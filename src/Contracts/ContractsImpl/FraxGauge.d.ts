/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface FraxGaugeInterface extends ethers.utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "addMigrator(address)": FunctionFragment;
    "bypassEmissionFactor()": FunctionFragment;
    "calcCurCombinedWeight(address)": FunctionFragment;
    "combinedWeightOf(address)": FunctionFragment;
    "curator_address()": FunctionFragment;
    "earned(address)": FunctionFragment;
    "emissionFactor()": FunctionFragment;
    "frax_is_token0()": FunctionFragment;
    "gauge_controller()": FunctionFragment;
    "getReward()": FunctionFragment;
    "getRewardForDuration()": FunctionFragment;
    "greylistAddress(address)": FunctionFragment;
    "ideal_tick()": FunctionFragment;
    "lockMultiplier(uint256)": FunctionFragment;
    "lock_max_multiplier()": FunctionFragment;
    "lock_time_for_max_multiplier()": FunctionFragment;
    "lock_time_min()": FunctionFragment;
    "lockedLiquidityOf(address)": FunctionFragment;
    "lockedNFTsOf(address)": FunctionFragment;
    "lp_pool()": FunctionFragment;
    "migrationsOn()": FunctionFragment;
    "migrator_stakeLocked_for(address,uint256,uint256,uint256)": FunctionFragment;
    "migrator_withdraw_locked(address,uint256)": FunctionFragment;
    "minVeFXSForMaxBoost(address)": FunctionFragment;
    "nominateNewOwner(address)": FunctionFragment;
    "nominatedOwner()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "recoverERC20(address,uint256)": FunctionFragment;
    "recoverERC721(address,uint256)": FunctionFragment;
    "removeMigrator(address)": FunctionFragment;
    "rewardRate0()": FunctionFragment;
    "reward_rate_manual()": FunctionFragment;
    "rewardsCollectionPaused()": FunctionFragment;
    "rewardsDuration()": FunctionFragment;
    "rewards_distributor()": FunctionFragment;
    "setCurator(address)": FunctionFragment;
    "setGaugeRelatedAddrs(address,address)": FunctionFragment;
    "setLockedNFTTimeForMinAndMaxMultiplier(uint256,uint256)": FunctionFragment;
    "setManualRewardRate(uint256,bool)": FunctionFragment;
    "setMultipliers(uint256,uint256,uint256)": FunctionFragment;
    "setPauses(bool,bool,bool)": FunctionFragment;
    "setTWAP(uint32)": FunctionFragment;
    "setTimelock(address)": FunctionFragment;
    "stakeLocked(uint256,uint256)": FunctionFragment;
    "stakerAllowMigrator(address)": FunctionFragment;
    "stakerDisallowMigrator(address)": FunctionFragment;
    "stakesUnlocked()": FunctionFragment;
    "stakingPaused()": FunctionFragment;
    "sync()": FunctionFragment;
    "sync_gauge_weight(bool)": FunctionFragment;
    "timelock_address()": FunctionFragment;
    "toggleEmissionFactorBypass()": FunctionFragment;
    "toggleMigrations()": FunctionFragment;
    "totalCombinedWeight()": FunctionFragment;
    "totalLiquidityLocked()": FunctionFragment;
    "twap_duration()": FunctionFragment;
    "uni_required_fee()": FunctionFragment;
    "uni_tick_lower()": FunctionFragment;
    "uni_tick_upper()": FunctionFragment;
    "uni_token0()": FunctionFragment;
    "uni_token1()": FunctionFragment;
    "unlockStakes()": FunctionFragment;
    "userStakedFrax(address)": FunctionFragment;
    "veFXSMultiplier(address)": FunctionFragment;
    "vefxs_max_multiplier()": FunctionFragment;
    "vefxs_per_frax_for_max_boost()": FunctionFragment;
    "withdrawLocked(uint256)": FunctionFragment;
    "withdrawalsPaused()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addMigrator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "bypassEmissionFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calcCurCombinedWeight",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "combinedWeightOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "curator_address",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "earned", values: [string]): string;
  encodeFunctionData(
    functionFragment: "emissionFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "frax_is_token0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gauge_controller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getReward", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRewardForDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "greylistAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ideal_tick",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lock_max_multiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lock_time_for_max_multiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lock_time_min",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockedLiquidityOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedNFTsOf",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "lp_pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "migrationsOn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrator_stakeLocked_for",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "migrator_withdraw_locked",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minVeFXSForMaxBoost",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "nominateNewOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "nominatedOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverERC721",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMigrator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRate0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reward_rate_manual",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsCollectionPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewards_distributor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setCurator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setGaugeRelatedAddrs",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLockedNFTTimeForMinAndMaxMultiplier",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setManualRewardRate",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMultipliers",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPauses",
    values: [boolean, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTWAP",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setTimelock", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stakeLocked",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakerAllowMigrator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakerDisallowMigrator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakesUnlocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingPaused",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sync", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sync_gauge_weight",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "timelock_address",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleEmissionFactorBypass",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleMigrations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalCombinedWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalLiquidityLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "twap_duration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uni_required_fee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uni_tick_lower",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uni_tick_upper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uni_token0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uni_token1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unlockStakes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userStakedFrax",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "veFXSMultiplier",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vefxs_max_multiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vefxs_per_frax_for_max_boost",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLocked",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalsPaused",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMigrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bypassEmissionFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcCurCombinedWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "combinedWeightOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "curator_address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emissionFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "frax_is_token0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gauge_controller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRewardForDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "greylistAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ideal_tick", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lock_max_multiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lock_time_for_max_multiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lock_time_min",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedLiquidityOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedNFTsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lp_pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migrationsOn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrator_stakeLocked_for",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrator_withdraw_locked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minVeFXSForMaxBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominateNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominatedOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMigrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardRate0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reward_rate_manual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsCollectionPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewards_distributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCurator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGaugeRelatedAddrs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLockedNFTTimeForMinAndMaxMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setManualRewardRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMultipliers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPauses", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTWAP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakerAllowMigrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakerDisallowMigrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakesUnlocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sync", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sync_gauge_weight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timelock_address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleEmissionFactorBypass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleMigrations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCombinedWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLiquidityLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "twap_duration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uni_required_fee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uni_tick_lower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uni_tick_upper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uni_token0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uni_token1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unlockStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userStakedFrax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "veFXSMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vefxs_max_multiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vefxs_per_frax_for_max_boost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalsPaused",
    data: BytesLike
  ): Result;

  events: {
    "LockNFT(address,uint256,uint256,uint256,address)": EventFragment;
    "LockedNFTMaxMultiplierUpdated(uint256)": EventFragment;
    "LockedNFTMinTime(uint256)": EventFragment;
    "LockedNFTTimeForMaxMultiplier(uint256)": EventFragment;
    "MaxVeFXSMultiplier(uint256)": EventFragment;
    "OwnerChanged(address,address)": EventFragment;
    "OwnerNominated(address)": EventFragment;
    "RecoveredERC20(address,uint256)": EventFragment;
    "RecoveredERC721(address,uint256)": EventFragment;
    "RewardPaid(address,uint256,uint256,uint256,address,address)": EventFragment;
    "RewardsPeriodRenewed(address)": EventFragment;
    "WithdrawLocked(address,uint256,uint256,address)": EventFragment;
    "veFXSPctForMaxBoostUpdated(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LockNFT"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LockedNFTMaxMultiplierUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockedNFTMinTime"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LockedNFTTimeForMaxMultiplier"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxVeFXSMultiplier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerNominated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoveredERC20"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoveredERC721"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsPeriodRenewed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "veFXSPctForMaxBoostUpdated"): EventFragment;
}

export class FraxGauge extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FraxGaugeInterface;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "acceptOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addMigrator(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addMigrator(address)"(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bypassEmissionFactor(overrides?: CallOverrides): Promise<[boolean]>;

    "bypassEmissionFactor()"(overrides?: CallOverrides): Promise<[boolean]>;

    calcCurCombinedWeight(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        old_combined_weight: BigNumber;
        new_vefxs_multiplier: BigNumber;
        new_combined_weight: BigNumber;
      }
    >;

    "calcCurCombinedWeight(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        old_combined_weight: BigNumber;
        new_vefxs_multiplier: BigNumber;
        new_combined_weight: BigNumber;
      }
    >;

    combinedWeightOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "combinedWeightOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    curator_address(overrides?: CallOverrides): Promise<[string]>;

    "curator_address()"(overrides?: CallOverrides): Promise<[string]>;

    earned(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "earned(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    emissionFactor(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { emission_factor: BigNumber }>;

    "emissionFactor()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { emission_factor: BigNumber }>;

    frax_is_token0(overrides?: CallOverrides): Promise<[boolean]>;

    "frax_is_token0()"(overrides?: CallOverrides): Promise<[boolean]>;

    gauge_controller(overrides?: CallOverrides): Promise<[string]>;

    "gauge_controller()"(overrides?: CallOverrides): Promise<[string]>;

    getReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "getReward()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRewardForDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getRewardForDuration()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    greylistAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "greylistAddress(address)"(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ideal_tick(overrides?: CallOverrides): Promise<[number]>;

    "ideal_tick()"(overrides?: CallOverrides): Promise<[number]>;

    lockMultiplier(
      secs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "lockMultiplier(uint256)"(
      secs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lock_max_multiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lock_max_multiplier()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    lock_time_for_max_multiplier(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "lock_time_for_max_multiplier()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lock_time_min(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lock_time_min()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockedLiquidityOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "lockedLiquidityOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lockedNFTsOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          number
        ] & {
          token_id: BigNumber;
          liquidity: BigNumber;
          start_timestamp: BigNumber;
          ending_timestamp: BigNumber;
          lock_multiplier: BigNumber;
          tick_lower: number;
          tick_upper: number;
        })[]
      ]
    >;

    "lockedNFTsOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          number
        ] & {
          token_id: BigNumber;
          liquidity: BigNumber;
          start_timestamp: BigNumber;
          ending_timestamp: BigNumber;
          lock_multiplier: BigNumber;
          tick_lower: number;
          tick_upper: number;
        })[]
      ]
    >;

    lp_pool(overrides?: CallOverrides): Promise<[string]>;

    "lp_pool()"(overrides?: CallOverrides): Promise<[string]>;

    migrationsOn(overrides?: CallOverrides): Promise<[boolean]>;

    "migrationsOn()"(overrides?: CallOverrides): Promise<[boolean]>;

    migrator_stakeLocked_for(
      staker_address: string,
      token_id: BigNumberish,
      secs: BigNumberish,
      start_timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "migrator_stakeLocked_for(address,uint256,uint256,uint256)"(
      staker_address: string,
      token_id: BigNumberish,
      secs: BigNumberish,
      start_timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrator_withdraw_locked(
      staker_address: string,
      token_id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "migrator_withdraw_locked(address,uint256)"(
      staker_address: string,
      token_id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minVeFXSForMaxBoost(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "minVeFXSForMaxBoost(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "nominateNewOwner(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<[string]>;

    "nominatedOwner()"(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "recoverERC20(address,uint256)"(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    recoverERC721(
      tokenAddress: string,
      token_id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "recoverERC721(address,uint256)"(
      tokenAddress: string,
      token_id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeMigrator(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeMigrator(address)"(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardRate0(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rwd_rate: BigNumber }>;

    "rewardRate0()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rwd_rate: BigNumber }>;

    reward_rate_manual(overrides?: CallOverrides): Promise<[BigNumber]>;

    "reward_rate_manual()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardsCollectionPaused(overrides?: CallOverrides): Promise<[boolean]>;

    "rewardsCollectionPaused()"(overrides?: CallOverrides): Promise<[boolean]>;

    rewardsDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    "rewardsDuration()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewards_distributor(overrides?: CallOverrides): Promise<[string]>;

    "rewards_distributor()"(overrides?: CallOverrides): Promise<[string]>;

    setCurator(
      _new_curator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setCurator(address)"(
      _new_curator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGaugeRelatedAddrs(
      _gauge_controller_address: string,
      _rewards_distributor_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setGaugeRelatedAddrs(address,address)"(
      _gauge_controller_address: string,
      _rewards_distributor_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLockedNFTTimeForMinAndMaxMultiplier(
      _lock_time_for_max_multiplier: BigNumberish,
      _lock_time_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setLockedNFTTimeForMinAndMaxMultiplier(uint256,uint256)"(
      _lock_time_for_max_multiplier: BigNumberish,
      _lock_time_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setManualRewardRate(
      _reward_rate_manual: BigNumberish,
      sync_too: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setManualRewardRate(uint256,bool)"(
      _reward_rate_manual: BigNumberish,
      sync_too: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMultipliers(
      _lock_max_multiplier: BigNumberish,
      _vefxs_max_multiplier: BigNumberish,
      _vefxs_per_frax_for_max_boost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMultipliers(uint256,uint256,uint256)"(
      _lock_max_multiplier: BigNumberish,
      _vefxs_max_multiplier: BigNumberish,
      _vefxs_per_frax_for_max_boost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPauses(
      _stakingPaused: boolean,
      _withdrawalsPaused: boolean,
      _rewardsCollectionPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setPauses(bool,bool,bool)"(
      _stakingPaused: boolean,
      _withdrawalsPaused: boolean,
      _rewardsCollectionPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTWAP(
      _new_twap_duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTWAP(uint32)"(
      _new_twap_duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTimelock(
      _new_timelock: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTimelock(address)"(
      _new_timelock: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeLocked(
      token_id: BigNumberish,
      secs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "stakeLocked(uint256,uint256)"(
      token_id: BigNumberish,
      secs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakerAllowMigrator(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "stakerAllowMigrator(address)"(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakerDisallowMigrator(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "stakerDisallowMigrator(address)"(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakesUnlocked(overrides?: CallOverrides): Promise<[boolean]>;

    "stakesUnlocked()"(overrides?: CallOverrides): Promise<[boolean]>;

    stakingPaused(overrides?: CallOverrides): Promise<[boolean]>;

    "stakingPaused()"(overrides?: CallOverrides): Promise<[boolean]>;

    sync(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "sync()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sync_gauge_weight(
      force_update: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "sync_gauge_weight(bool)"(
      force_update: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timelock_address(overrides?: CallOverrides): Promise<[string]>;

    "timelock_address()"(overrides?: CallOverrides): Promise<[string]>;

    toggleEmissionFactorBypass(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "toggleEmissionFactorBypass()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleMigrations(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "toggleMigrations()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalCombinedWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalCombinedWeight()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalLiquidityLocked(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalLiquidityLocked()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    twap_duration(overrides?: CallOverrides): Promise<[number]>;

    "twap_duration()"(overrides?: CallOverrides): Promise<[number]>;

    uni_required_fee(overrides?: CallOverrides): Promise<[number]>;

    "uni_required_fee()"(overrides?: CallOverrides): Promise<[number]>;

    uni_tick_lower(overrides?: CallOverrides): Promise<[number]>;

    "uni_tick_lower()"(overrides?: CallOverrides): Promise<[number]>;

    uni_tick_upper(overrides?: CallOverrides): Promise<[number]>;

    "uni_tick_upper()"(overrides?: CallOverrides): Promise<[number]>;

    uni_token0(overrides?: CallOverrides): Promise<[string]>;

    "uni_token0()"(overrides?: CallOverrides): Promise<[string]>;

    uni_token1(overrides?: CallOverrides): Promise<[string]>;

    "uni_token1()"(overrides?: CallOverrides): Promise<[string]>;

    unlockStakes(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unlockStakes()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userStakedFrax(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "userStakedFrax(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    veFXSMultiplier(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "veFXSMultiplier(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vefxs_max_multiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    "vefxs_max_multiplier()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    vefxs_per_frax_for_max_boost(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "vefxs_per_frax_for_max_boost()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawLocked(
      token_id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawLocked(uint256)"(
      token_id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawalsPaused(overrides?: CallOverrides): Promise<[boolean]>;

    "withdrawalsPaused()"(overrides?: CallOverrides): Promise<[boolean]>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "acceptOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addMigrator(
    migrator_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addMigrator(address)"(
    migrator_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bypassEmissionFactor(overrides?: CallOverrides): Promise<boolean>;

  "bypassEmissionFactor()"(overrides?: CallOverrides): Promise<boolean>;

  calcCurCombinedWeight(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      old_combined_weight: BigNumber;
      new_vefxs_multiplier: BigNumber;
      new_combined_weight: BigNumber;
    }
  >;

  "calcCurCombinedWeight(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      old_combined_weight: BigNumber;
      new_vefxs_multiplier: BigNumber;
      new_combined_weight: BigNumber;
    }
  >;

  combinedWeightOf(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "combinedWeightOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  curator_address(overrides?: CallOverrides): Promise<string>;

  "curator_address()"(overrides?: CallOverrides): Promise<string>;

  earned(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "earned(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  emissionFactor(overrides?: CallOverrides): Promise<BigNumber>;

  "emissionFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

  frax_is_token0(overrides?: CallOverrides): Promise<boolean>;

  "frax_is_token0()"(overrides?: CallOverrides): Promise<boolean>;

  gauge_controller(overrides?: CallOverrides): Promise<string>;

  "gauge_controller()"(overrides?: CallOverrides): Promise<string>;

  getReward(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "getReward()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRewardForDuration(overrides?: CallOverrides): Promise<BigNumber>;

  "getRewardForDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

  greylistAddress(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "greylistAddress(address)"(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ideal_tick(overrides?: CallOverrides): Promise<number>;

  "ideal_tick()"(overrides?: CallOverrides): Promise<number>;

  lockMultiplier(
    secs: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "lockMultiplier(uint256)"(
    secs: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lock_max_multiplier(overrides?: CallOverrides): Promise<BigNumber>;

  "lock_max_multiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

  lock_time_for_max_multiplier(overrides?: CallOverrides): Promise<BigNumber>;

  "lock_time_for_max_multiplier()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lock_time_min(overrides?: CallOverrides): Promise<BigNumber>;

  "lock_time_min()"(overrides?: CallOverrides): Promise<BigNumber>;

  lockedLiquidityOf(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "lockedLiquidityOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lockedNFTsOf(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, number, number] & {
      token_id: BigNumber;
      liquidity: BigNumber;
      start_timestamp: BigNumber;
      ending_timestamp: BigNumber;
      lock_multiplier: BigNumber;
      tick_lower: number;
      tick_upper: number;
    })[]
  >;

  "lockedNFTsOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, number, number] & {
      token_id: BigNumber;
      liquidity: BigNumber;
      start_timestamp: BigNumber;
      ending_timestamp: BigNumber;
      lock_multiplier: BigNumber;
      tick_lower: number;
      tick_upper: number;
    })[]
  >;

  lp_pool(overrides?: CallOverrides): Promise<string>;

  "lp_pool()"(overrides?: CallOverrides): Promise<string>;

  migrationsOn(overrides?: CallOverrides): Promise<boolean>;

  "migrationsOn()"(overrides?: CallOverrides): Promise<boolean>;

  migrator_stakeLocked_for(
    staker_address: string,
    token_id: BigNumberish,
    secs: BigNumberish,
    start_timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "migrator_stakeLocked_for(address,uint256,uint256,uint256)"(
    staker_address: string,
    token_id: BigNumberish,
    secs: BigNumberish,
    start_timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrator_withdraw_locked(
    staker_address: string,
    token_id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "migrator_withdraw_locked(address,uint256)"(
    staker_address: string,
    token_id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minVeFXSForMaxBoost(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "minVeFXSForMaxBoost(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nominateNewOwner(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "nominateNewOwner(address)"(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nominatedOwner(overrides?: CallOverrides): Promise<string>;

  "nominatedOwner()"(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "onERC721Received(address,address,uint256,bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  recoverERC20(
    tokenAddress: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "recoverERC20(address,uint256)"(
    tokenAddress: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  recoverERC721(
    tokenAddress: string,
    token_id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "recoverERC721(address,uint256)"(
    tokenAddress: string,
    token_id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeMigrator(
    migrator_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeMigrator(address)"(
    migrator_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardRate0(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardRate0()"(overrides?: CallOverrides): Promise<BigNumber>;

  reward_rate_manual(overrides?: CallOverrides): Promise<BigNumber>;

  "reward_rate_manual()"(overrides?: CallOverrides): Promise<BigNumber>;

  rewardsCollectionPaused(overrides?: CallOverrides): Promise<boolean>;

  "rewardsCollectionPaused()"(overrides?: CallOverrides): Promise<boolean>;

  rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardsDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

  rewards_distributor(overrides?: CallOverrides): Promise<string>;

  "rewards_distributor()"(overrides?: CallOverrides): Promise<string>;

  setCurator(
    _new_curator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setCurator(address)"(
    _new_curator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGaugeRelatedAddrs(
    _gauge_controller_address: string,
    _rewards_distributor_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setGaugeRelatedAddrs(address,address)"(
    _gauge_controller_address: string,
    _rewards_distributor_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLockedNFTTimeForMinAndMaxMultiplier(
    _lock_time_for_max_multiplier: BigNumberish,
    _lock_time_min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setLockedNFTTimeForMinAndMaxMultiplier(uint256,uint256)"(
    _lock_time_for_max_multiplier: BigNumberish,
    _lock_time_min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setManualRewardRate(
    _reward_rate_manual: BigNumberish,
    sync_too: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setManualRewardRate(uint256,bool)"(
    _reward_rate_manual: BigNumberish,
    sync_too: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMultipliers(
    _lock_max_multiplier: BigNumberish,
    _vefxs_max_multiplier: BigNumberish,
    _vefxs_per_frax_for_max_boost: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMultipliers(uint256,uint256,uint256)"(
    _lock_max_multiplier: BigNumberish,
    _vefxs_max_multiplier: BigNumberish,
    _vefxs_per_frax_for_max_boost: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPauses(
    _stakingPaused: boolean,
    _withdrawalsPaused: boolean,
    _rewardsCollectionPaused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setPauses(bool,bool,bool)"(
    _stakingPaused: boolean,
    _withdrawalsPaused: boolean,
    _rewardsCollectionPaused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTWAP(
    _new_twap_duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTWAP(uint32)"(
    _new_twap_duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTimelock(
    _new_timelock: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTimelock(address)"(
    _new_timelock: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeLocked(
    token_id: BigNumberish,
    secs: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "stakeLocked(uint256,uint256)"(
    token_id: BigNumberish,
    secs: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakerAllowMigrator(
    migrator_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "stakerAllowMigrator(address)"(
    migrator_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakerDisallowMigrator(
    migrator_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "stakerDisallowMigrator(address)"(
    migrator_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakesUnlocked(overrides?: CallOverrides): Promise<boolean>;

  "stakesUnlocked()"(overrides?: CallOverrides): Promise<boolean>;

  stakingPaused(overrides?: CallOverrides): Promise<boolean>;

  "stakingPaused()"(overrides?: CallOverrides): Promise<boolean>;

  sync(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "sync()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sync_gauge_weight(
    force_update: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "sync_gauge_weight(bool)"(
    force_update: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timelock_address(overrides?: CallOverrides): Promise<string>;

  "timelock_address()"(overrides?: CallOverrides): Promise<string>;

  toggleEmissionFactorBypass(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "toggleEmissionFactorBypass()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleMigrations(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "toggleMigrations()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalCombinedWeight(overrides?: CallOverrides): Promise<BigNumber>;

  "totalCombinedWeight()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalLiquidityLocked(overrides?: CallOverrides): Promise<BigNumber>;

  "totalLiquidityLocked()"(overrides?: CallOverrides): Promise<BigNumber>;

  twap_duration(overrides?: CallOverrides): Promise<number>;

  "twap_duration()"(overrides?: CallOverrides): Promise<number>;

  uni_required_fee(overrides?: CallOverrides): Promise<number>;

  "uni_required_fee()"(overrides?: CallOverrides): Promise<number>;

  uni_tick_lower(overrides?: CallOverrides): Promise<number>;

  "uni_tick_lower()"(overrides?: CallOverrides): Promise<number>;

  uni_tick_upper(overrides?: CallOverrides): Promise<number>;

  "uni_tick_upper()"(overrides?: CallOverrides): Promise<number>;

  uni_token0(overrides?: CallOverrides): Promise<string>;

  "uni_token0()"(overrides?: CallOverrides): Promise<string>;

  uni_token1(overrides?: CallOverrides): Promise<string>;

  "uni_token1()"(overrides?: CallOverrides): Promise<string>;

  unlockStakes(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unlockStakes()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userStakedFrax(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userStakedFrax(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  veFXSMultiplier(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "veFXSMultiplier(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vefxs_max_multiplier(overrides?: CallOverrides): Promise<BigNumber>;

  "vefxs_max_multiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

  vefxs_per_frax_for_max_boost(overrides?: CallOverrides): Promise<BigNumber>;

  "vefxs_per_frax_for_max_boost()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawLocked(
    token_id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawLocked(uint256)"(
    token_id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawalsPaused(overrides?: CallOverrides): Promise<boolean>;

  "withdrawalsPaused()"(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    "acceptOwnership()"(overrides?: CallOverrides): Promise<void>;

    addMigrator(
      migrator_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addMigrator(address)"(
      migrator_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    bypassEmissionFactor(overrides?: CallOverrides): Promise<boolean>;

    "bypassEmissionFactor()"(overrides?: CallOverrides): Promise<boolean>;

    calcCurCombinedWeight(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        old_combined_weight: BigNumber;
        new_vefxs_multiplier: BigNumber;
        new_combined_weight: BigNumber;
      }
    >;

    "calcCurCombinedWeight(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        old_combined_weight: BigNumber;
        new_vefxs_multiplier: BigNumber;
        new_combined_weight: BigNumber;
      }
    >;

    combinedWeightOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "combinedWeightOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    curator_address(overrides?: CallOverrides): Promise<string>;

    "curator_address()"(overrides?: CallOverrides): Promise<string>;

    earned(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "earned(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emissionFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "emissionFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    frax_is_token0(overrides?: CallOverrides): Promise<boolean>;

    "frax_is_token0()"(overrides?: CallOverrides): Promise<boolean>;

    gauge_controller(overrides?: CallOverrides): Promise<string>;

    "gauge_controller()"(overrides?: CallOverrides): Promise<string>;

    getReward(overrides?: CallOverrides): Promise<BigNumber>;

    "getReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardForDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "getRewardForDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    greylistAddress(_address: string, overrides?: CallOverrides): Promise<void>;

    "greylistAddress(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ideal_tick(overrides?: CallOverrides): Promise<number>;

    "ideal_tick()"(overrides?: CallOverrides): Promise<number>;

    lockMultiplier(
      secs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockMultiplier(uint256)"(
      secs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock_max_multiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "lock_max_multiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    lock_time_for_max_multiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "lock_time_for_max_multiplier()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock_time_min(overrides?: CallOverrides): Promise<BigNumber>;

    "lock_time_min()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockedLiquidityOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockedLiquidityOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedNFTsOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number
      ] & {
        token_id: BigNumber;
        liquidity: BigNumber;
        start_timestamp: BigNumber;
        ending_timestamp: BigNumber;
        lock_multiplier: BigNumber;
        tick_lower: number;
        tick_upper: number;
      })[]
    >;

    "lockedNFTsOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number
      ] & {
        token_id: BigNumber;
        liquidity: BigNumber;
        start_timestamp: BigNumber;
        ending_timestamp: BigNumber;
        lock_multiplier: BigNumber;
        tick_lower: number;
        tick_upper: number;
      })[]
    >;

    lp_pool(overrides?: CallOverrides): Promise<string>;

    "lp_pool()"(overrides?: CallOverrides): Promise<string>;

    migrationsOn(overrides?: CallOverrides): Promise<boolean>;

    "migrationsOn()"(overrides?: CallOverrides): Promise<boolean>;

    migrator_stakeLocked_for(
      staker_address: string,
      token_id: BigNumberish,
      secs: BigNumberish,
      start_timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "migrator_stakeLocked_for(address,uint256,uint256,uint256)"(
      staker_address: string,
      token_id: BigNumberish,
      secs: BigNumberish,
      start_timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    migrator_withdraw_locked(
      staker_address: string,
      token_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "migrator_withdraw_locked(address,uint256)"(
      staker_address: string,
      token_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    minVeFXSForMaxBoost(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "minVeFXSForMaxBoost(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nominateNewOwner(_owner: string, overrides?: CallOverrides): Promise<void>;

    "nominateNewOwner(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    nominatedOwner(overrides?: CallOverrides): Promise<string>;

    "nominatedOwner()"(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "recoverERC20(address,uint256)"(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    recoverERC721(
      tokenAddress: string,
      token_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "recoverERC721(address,uint256)"(
      tokenAddress: string,
      token_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeMigrator(
      migrator_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeMigrator(address)"(
      migrator_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardRate0(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardRate0()"(overrides?: CallOverrides): Promise<BigNumber>;

    reward_rate_manual(overrides?: CallOverrides): Promise<BigNumber>;

    "reward_rate_manual()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsCollectionPaused(overrides?: CallOverrides): Promise<boolean>;

    "rewardsCollectionPaused()"(overrides?: CallOverrides): Promise<boolean>;

    rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewards_distributor(overrides?: CallOverrides): Promise<string>;

    "rewards_distributor()"(overrides?: CallOverrides): Promise<string>;

    setCurator(_new_curator: string, overrides?: CallOverrides): Promise<void>;

    "setCurator(address)"(
      _new_curator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGaugeRelatedAddrs(
      _gauge_controller_address: string,
      _rewards_distributor_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setGaugeRelatedAddrs(address,address)"(
      _gauge_controller_address: string,
      _rewards_distributor_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLockedNFTTimeForMinAndMaxMultiplier(
      _lock_time_for_max_multiplier: BigNumberish,
      _lock_time_min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLockedNFTTimeForMinAndMaxMultiplier(uint256,uint256)"(
      _lock_time_for_max_multiplier: BigNumberish,
      _lock_time_min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setManualRewardRate(
      _reward_rate_manual: BigNumberish,
      sync_too: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setManualRewardRate(uint256,bool)"(
      _reward_rate_manual: BigNumberish,
      sync_too: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMultipliers(
      _lock_max_multiplier: BigNumberish,
      _vefxs_max_multiplier: BigNumberish,
      _vefxs_per_frax_for_max_boost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMultipliers(uint256,uint256,uint256)"(
      _lock_max_multiplier: BigNumberish,
      _vefxs_max_multiplier: BigNumberish,
      _vefxs_per_frax_for_max_boost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPauses(
      _stakingPaused: boolean,
      _withdrawalsPaused: boolean,
      _rewardsCollectionPaused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPauses(bool,bool,bool)"(
      _stakingPaused: boolean,
      _withdrawalsPaused: boolean,
      _rewardsCollectionPaused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setTWAP(
      _new_twap_duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTWAP(uint32)"(
      _new_twap_duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTimelock(
      _new_timelock: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTimelock(address)"(
      _new_timelock: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeLocked(
      token_id: BigNumberish,
      secs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "stakeLocked(uint256,uint256)"(
      token_id: BigNumberish,
      secs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakerAllowMigrator(
      migrator_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "stakerAllowMigrator(address)"(
      migrator_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakerDisallowMigrator(
      migrator_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "stakerDisallowMigrator(address)"(
      migrator_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakesUnlocked(overrides?: CallOverrides): Promise<boolean>;

    "stakesUnlocked()"(overrides?: CallOverrides): Promise<boolean>;

    stakingPaused(overrides?: CallOverrides): Promise<boolean>;

    "stakingPaused()"(overrides?: CallOverrides): Promise<boolean>;

    sync(overrides?: CallOverrides): Promise<void>;

    "sync()"(overrides?: CallOverrides): Promise<void>;

    sync_gauge_weight(
      force_update: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "sync_gauge_weight(bool)"(
      force_update: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    timelock_address(overrides?: CallOverrides): Promise<string>;

    "timelock_address()"(overrides?: CallOverrides): Promise<string>;

    toggleEmissionFactorBypass(overrides?: CallOverrides): Promise<void>;

    "toggleEmissionFactorBypass()"(overrides?: CallOverrides): Promise<void>;

    toggleMigrations(overrides?: CallOverrides): Promise<void>;

    "toggleMigrations()"(overrides?: CallOverrides): Promise<void>;

    totalCombinedWeight(overrides?: CallOverrides): Promise<BigNumber>;

    "totalCombinedWeight()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalLiquidityLocked(overrides?: CallOverrides): Promise<BigNumber>;

    "totalLiquidityLocked()"(overrides?: CallOverrides): Promise<BigNumber>;

    twap_duration(overrides?: CallOverrides): Promise<number>;

    "twap_duration()"(overrides?: CallOverrides): Promise<number>;

    uni_required_fee(overrides?: CallOverrides): Promise<number>;

    "uni_required_fee()"(overrides?: CallOverrides): Promise<number>;

    uni_tick_lower(overrides?: CallOverrides): Promise<number>;

    "uni_tick_lower()"(overrides?: CallOverrides): Promise<number>;

    uni_tick_upper(overrides?: CallOverrides): Promise<number>;

    "uni_tick_upper()"(overrides?: CallOverrides): Promise<number>;

    uni_token0(overrides?: CallOverrides): Promise<string>;

    "uni_token0()"(overrides?: CallOverrides): Promise<string>;

    uni_token1(overrides?: CallOverrides): Promise<string>;

    "uni_token1()"(overrides?: CallOverrides): Promise<string>;

    unlockStakes(overrides?: CallOverrides): Promise<void>;

    "unlockStakes()"(overrides?: CallOverrides): Promise<void>;

    userStakedFrax(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userStakedFrax(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    veFXSMultiplier(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "veFXSMultiplier(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vefxs_max_multiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "vefxs_max_multiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    vefxs_per_frax_for_max_boost(overrides?: CallOverrides): Promise<BigNumber>;

    "vefxs_per_frax_for_max_boost()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawLocked(
      token_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawLocked(uint256)"(
      token_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawalsPaused(overrides?: CallOverrides): Promise<boolean>;

    "withdrawalsPaused()"(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    LockNFT(
      user: string | null,
      liquidity: null,
      token_id: null,
      secs: null,
      source_address: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, string],
      {
        user: string;
        liquidity: BigNumber;
        token_id: BigNumber;
        secs: BigNumber;
        source_address: string;
      }
    >;

    LockedNFTMaxMultiplierUpdated(
      multiplier: null
    ): TypedEventFilter<[BigNumber], { multiplier: BigNumber }>;

    LockedNFTMinTime(
      secs: null
    ): TypedEventFilter<[BigNumber], { secs: BigNumber }>;

    LockedNFTTimeForMaxMultiplier(
      secs: null
    ): TypedEventFilter<[BigNumber], { secs: BigNumber }>;

    MaxVeFXSMultiplier(
      multiplier: null
    ): TypedEventFilter<[BigNumber], { multiplier: BigNumber }>;

    OwnerChanged(
      oldOwner: null,
      newOwner: null
    ): TypedEventFilter<
      [string, string],
      { oldOwner: string; newOwner: string }
    >;

    OwnerNominated(
      newOwner: null
    ): TypedEventFilter<[string], { newOwner: string }>;

    RecoveredERC20(
      token: null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    RecoveredERC721(
      token: null,
      token_id: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; token_id: BigNumber }
    >;

    RewardPaid(
      user: string | null,
      farm_reward: null,
      liq_tok0_reward: null,
      liq_tok1_reward: null,
      token_address: null,
      destination_address: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, string, string],
      {
        user: string;
        farm_reward: BigNumber;
        liq_tok0_reward: BigNumber;
        liq_tok1_reward: BigNumber;
        token_address: string;
        destination_address: string;
      }
    >;

    RewardsPeriodRenewed(
      token: null
    ): TypedEventFilter<[string], { token: string }>;

    WithdrawLocked(
      user: string | null,
      liquidity: null,
      token_id: null,
      destination_address: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      {
        user: string;
        liquidity: BigNumber;
        token_id: BigNumber;
        destination_address: string;
      }
    >;

    veFXSPctForMaxBoostUpdated(
      scale_factor: null
    ): TypedEventFilter<[BigNumber], { scale_factor: BigNumber }>;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "acceptOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addMigrator(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addMigrator(address)"(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bypassEmissionFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "bypassEmissionFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    calcCurCombinedWeight(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcCurCombinedWeight(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    combinedWeightOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "combinedWeightOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    curator_address(overrides?: CallOverrides): Promise<BigNumber>;

    "curator_address()"(overrides?: CallOverrides): Promise<BigNumber>;

    earned(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "earned(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emissionFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "emissionFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    frax_is_token0(overrides?: CallOverrides): Promise<BigNumber>;

    "frax_is_token0()"(overrides?: CallOverrides): Promise<BigNumber>;

    gauge_controller(overrides?: CallOverrides): Promise<BigNumber>;

    "gauge_controller()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "getReward()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRewardForDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "getRewardForDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    greylistAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "greylistAddress(address)"(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ideal_tick(overrides?: CallOverrides): Promise<BigNumber>;

    "ideal_tick()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockMultiplier(
      secs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockMultiplier(uint256)"(
      secs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock_max_multiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "lock_max_multiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    lock_time_for_max_multiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "lock_time_for_max_multiplier()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock_time_min(overrides?: CallOverrides): Promise<BigNumber>;

    "lock_time_min()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockedLiquidityOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockedLiquidityOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedNFTsOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockedNFTsOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lp_pool(overrides?: CallOverrides): Promise<BigNumber>;

    "lp_pool()"(overrides?: CallOverrides): Promise<BigNumber>;

    migrationsOn(overrides?: CallOverrides): Promise<BigNumber>;

    "migrationsOn()"(overrides?: CallOverrides): Promise<BigNumber>;

    migrator_stakeLocked_for(
      staker_address: string,
      token_id: BigNumberish,
      secs: BigNumberish,
      start_timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "migrator_stakeLocked_for(address,uint256,uint256,uint256)"(
      staker_address: string,
      token_id: BigNumberish,
      secs: BigNumberish,
      start_timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrator_withdraw_locked(
      staker_address: string,
      token_id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "migrator_withdraw_locked(address,uint256)"(
      staker_address: string,
      token_id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minVeFXSForMaxBoost(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "minVeFXSForMaxBoost(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "nominateNewOwner(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "nominatedOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "recoverERC20(address,uint256)"(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    recoverERC721(
      tokenAddress: string,
      token_id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "recoverERC721(address,uint256)"(
      tokenAddress: string,
      token_id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeMigrator(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeMigrator(address)"(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardRate0(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardRate0()"(overrides?: CallOverrides): Promise<BigNumber>;

    reward_rate_manual(overrides?: CallOverrides): Promise<BigNumber>;

    "reward_rate_manual()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsCollectionPaused(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsCollectionPaused()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewards_distributor(overrides?: CallOverrides): Promise<BigNumber>;

    "rewards_distributor()"(overrides?: CallOverrides): Promise<BigNumber>;

    setCurator(
      _new_curator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setCurator(address)"(
      _new_curator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGaugeRelatedAddrs(
      _gauge_controller_address: string,
      _rewards_distributor_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setGaugeRelatedAddrs(address,address)"(
      _gauge_controller_address: string,
      _rewards_distributor_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLockedNFTTimeForMinAndMaxMultiplier(
      _lock_time_for_max_multiplier: BigNumberish,
      _lock_time_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setLockedNFTTimeForMinAndMaxMultiplier(uint256,uint256)"(
      _lock_time_for_max_multiplier: BigNumberish,
      _lock_time_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setManualRewardRate(
      _reward_rate_manual: BigNumberish,
      sync_too: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setManualRewardRate(uint256,bool)"(
      _reward_rate_manual: BigNumberish,
      sync_too: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMultipliers(
      _lock_max_multiplier: BigNumberish,
      _vefxs_max_multiplier: BigNumberish,
      _vefxs_per_frax_for_max_boost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMultipliers(uint256,uint256,uint256)"(
      _lock_max_multiplier: BigNumberish,
      _vefxs_max_multiplier: BigNumberish,
      _vefxs_per_frax_for_max_boost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPauses(
      _stakingPaused: boolean,
      _withdrawalsPaused: boolean,
      _rewardsCollectionPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setPauses(bool,bool,bool)"(
      _stakingPaused: boolean,
      _withdrawalsPaused: boolean,
      _rewardsCollectionPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTWAP(
      _new_twap_duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTWAP(uint32)"(
      _new_twap_duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTimelock(
      _new_timelock: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTimelock(address)"(
      _new_timelock: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeLocked(
      token_id: BigNumberish,
      secs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "stakeLocked(uint256,uint256)"(
      token_id: BigNumberish,
      secs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakerAllowMigrator(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "stakerAllowMigrator(address)"(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakerDisallowMigrator(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "stakerDisallowMigrator(address)"(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakesUnlocked(overrides?: CallOverrides): Promise<BigNumber>;

    "stakesUnlocked()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakingPaused(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingPaused()"(overrides?: CallOverrides): Promise<BigNumber>;

    sync(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "sync()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sync_gauge_weight(
      force_update: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "sync_gauge_weight(bool)"(
      force_update: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timelock_address(overrides?: CallOverrides): Promise<BigNumber>;

    "timelock_address()"(overrides?: CallOverrides): Promise<BigNumber>;

    toggleEmissionFactorBypass(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "toggleEmissionFactorBypass()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleMigrations(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "toggleMigrations()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalCombinedWeight(overrides?: CallOverrides): Promise<BigNumber>;

    "totalCombinedWeight()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalLiquidityLocked(overrides?: CallOverrides): Promise<BigNumber>;

    "totalLiquidityLocked()"(overrides?: CallOverrides): Promise<BigNumber>;

    twap_duration(overrides?: CallOverrides): Promise<BigNumber>;

    "twap_duration()"(overrides?: CallOverrides): Promise<BigNumber>;

    uni_required_fee(overrides?: CallOverrides): Promise<BigNumber>;

    "uni_required_fee()"(overrides?: CallOverrides): Promise<BigNumber>;

    uni_tick_lower(overrides?: CallOverrides): Promise<BigNumber>;

    "uni_tick_lower()"(overrides?: CallOverrides): Promise<BigNumber>;

    uni_tick_upper(overrides?: CallOverrides): Promise<BigNumber>;

    "uni_tick_upper()"(overrides?: CallOverrides): Promise<BigNumber>;

    uni_token0(overrides?: CallOverrides): Promise<BigNumber>;

    "uni_token0()"(overrides?: CallOverrides): Promise<BigNumber>;

    uni_token1(overrides?: CallOverrides): Promise<BigNumber>;

    "uni_token1()"(overrides?: CallOverrides): Promise<BigNumber>;

    unlockStakes(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unlockStakes()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userStakedFrax(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userStakedFrax(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    veFXSMultiplier(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "veFXSMultiplier(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vefxs_max_multiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "vefxs_max_multiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    vefxs_per_frax_for_max_boost(overrides?: CallOverrides): Promise<BigNumber>;

    "vefxs_per_frax_for_max_boost()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawLocked(
      token_id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawLocked(uint256)"(
      token_id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawalsPaused(overrides?: CallOverrides): Promise<BigNumber>;

    "withdrawalsPaused()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "acceptOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addMigrator(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addMigrator(address)"(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bypassEmissionFactor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bypassEmissionFactor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcCurCombinedWeight(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcCurCombinedWeight(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    combinedWeightOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "combinedWeightOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    curator_address(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "curator_address()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    earned(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "earned(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emissionFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "emissionFactor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    frax_is_token0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "frax_is_token0()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gauge_controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gauge_controller()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "getReward()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRewardForDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRewardForDuration()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    greylistAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "greylistAddress(address)"(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ideal_tick(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ideal_tick()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockMultiplier(
      secs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lockMultiplier(uint256)"(
      secs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lock_max_multiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lock_max_multiplier()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lock_time_for_max_multiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lock_time_for_max_multiplier()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lock_time_min(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lock_time_min()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedLiquidityOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lockedLiquidityOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedNFTsOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lockedNFTsOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lp_pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lp_pool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrationsOn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "migrationsOn()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrator_stakeLocked_for(
      staker_address: string,
      token_id: BigNumberish,
      secs: BigNumberish,
      start_timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "migrator_stakeLocked_for(address,uint256,uint256,uint256)"(
      staker_address: string,
      token_id: BigNumberish,
      secs: BigNumberish,
      start_timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrator_withdraw_locked(
      staker_address: string,
      token_id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "migrator_withdraw_locked(address,uint256)"(
      staker_address: string,
      token_id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minVeFXSForMaxBoost(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minVeFXSForMaxBoost(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "nominateNewOwner(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nominatedOwner()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "recoverERC20(address,uint256)"(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    recoverERC721(
      tokenAddress: string,
      token_id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "recoverERC721(address,uint256)"(
      tokenAddress: string,
      token_id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeMigrator(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeMigrator(address)"(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardRate0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardRate0()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reward_rate_manual(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "reward_rate_manual()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsCollectionPaused(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardsCollectionPaused()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardsDuration()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewards_distributor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewards_distributor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCurator(
      _new_curator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setCurator(address)"(
      _new_curator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGaugeRelatedAddrs(
      _gauge_controller_address: string,
      _rewards_distributor_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setGaugeRelatedAddrs(address,address)"(
      _gauge_controller_address: string,
      _rewards_distributor_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLockedNFTTimeForMinAndMaxMultiplier(
      _lock_time_for_max_multiplier: BigNumberish,
      _lock_time_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setLockedNFTTimeForMinAndMaxMultiplier(uint256,uint256)"(
      _lock_time_for_max_multiplier: BigNumberish,
      _lock_time_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setManualRewardRate(
      _reward_rate_manual: BigNumberish,
      sync_too: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setManualRewardRate(uint256,bool)"(
      _reward_rate_manual: BigNumberish,
      sync_too: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMultipliers(
      _lock_max_multiplier: BigNumberish,
      _vefxs_max_multiplier: BigNumberish,
      _vefxs_per_frax_for_max_boost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMultipliers(uint256,uint256,uint256)"(
      _lock_max_multiplier: BigNumberish,
      _vefxs_max_multiplier: BigNumberish,
      _vefxs_per_frax_for_max_boost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPauses(
      _stakingPaused: boolean,
      _withdrawalsPaused: boolean,
      _rewardsCollectionPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setPauses(bool,bool,bool)"(
      _stakingPaused: boolean,
      _withdrawalsPaused: boolean,
      _rewardsCollectionPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTWAP(
      _new_twap_duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTWAP(uint32)"(
      _new_twap_duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTimelock(
      _new_timelock: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTimelock(address)"(
      _new_timelock: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeLocked(
      token_id: BigNumberish,
      secs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "stakeLocked(uint256,uint256)"(
      token_id: BigNumberish,
      secs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakerAllowMigrator(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "stakerAllowMigrator(address)"(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakerDisallowMigrator(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "stakerDisallowMigrator(address)"(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakesUnlocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakesUnlocked()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakingPaused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sync(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "sync()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sync_gauge_weight(
      force_update: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "sync_gauge_weight(bool)"(
      force_update: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timelock_address(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "timelock_address()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toggleEmissionFactorBypass(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "toggleEmissionFactorBypass()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleMigrations(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "toggleMigrations()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalCombinedWeight(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalCombinedWeight()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalLiquidityLocked(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalLiquidityLocked()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    twap_duration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "twap_duration()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uni_required_fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "uni_required_fee()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uni_tick_lower(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "uni_tick_lower()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uni_tick_upper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "uni_tick_upper()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uni_token0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "uni_token0()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uni_token1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "uni_token1()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unlockStakes(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unlockStakes()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userStakedFrax(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userStakedFrax(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    veFXSMultiplier(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "veFXSMultiplier(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vefxs_max_multiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "vefxs_max_multiplier()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vefxs_per_frax_for_max_boost(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "vefxs_per_frax_for_max_boost()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawLocked(
      token_id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawLocked(uint256)"(
      token_id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawalsPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "withdrawalsPaused()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
