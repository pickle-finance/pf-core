/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface FraxGaugeInterface extends ethers.utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "calcCurCombinedWeight(address)": FunctionFragment;
    "changeTokenManager(address,address)": FunctionFragment;
    "combinedWeightOf(address)": FunctionFragment;
    "earned(address)": FunctionFragment;
    "fraxPerLPStored()": FunctionFragment;
    "fraxPerLPToken()": FunctionFragment;
    "getAllRewardTokens()": FunctionFragment;
    "getReward(address)": FunctionFragment;
    "getRewardForDuration()": FunctionFragment;
    "isTokenManagerFor(address,address)": FunctionFragment;
    "lastUpdateTime()": FunctionFragment;
    "lockAdditional(bytes32,uint256)": FunctionFragment;
    "lockMultiplier(uint256)": FunctionFragment;
    "lock_max_multiplier()": FunctionFragment;
    "lock_time_for_max_multiplier()": FunctionFragment;
    "lock_time_min()": FunctionFragment;
    "lockedLiquidityOf(address)": FunctionFragment;
    "lockedStakes(address,uint256)": FunctionFragment;
    "lockedStakesOf(address)": FunctionFragment;
    "lockedStakesOfLength(address)": FunctionFragment;
    "maxLPForMaxBoost(address)": FunctionFragment;
    "migrator_stakeLocked_for(address,uint256,uint256,uint256)": FunctionFragment;
    "migrator_withdraw_locked(address,bytes32)": FunctionFragment;
    "minVeFXSForMaxBoost(address)": FunctionFragment;
    "minVeFXSForMaxBoostProxy(address)": FunctionFragment;
    "nominateNewOwner(address)": FunctionFragment;
    "nominatedOwner()": FunctionFragment;
    "owner()": FunctionFragment;
    "periodFinish()": FunctionFragment;
    "proxyStakedFrax(address)": FunctionFragment;
    "proxyToggleStaker(address)": FunctionFragment;
    "proxy_lp_balances(address)": FunctionFragment;
    "recoverERC20(address,uint256)": FunctionFragment;
    "rewardManagers(address)": FunctionFragment;
    "rewardRates(uint256)": FunctionFragment;
    "rewardTokenAddrToIdx(address)": FunctionFragment;
    "rewardsDuration()": FunctionFragment;
    "rewardsPerToken()": FunctionFragment;
    "setMiscVariables(uint256[6])": FunctionFragment;
    "setPauses(bool,bool,bool)": FunctionFragment;
    "setRewardVars(address,uint256,address,address)": FunctionFragment;
    "stakeLocked(uint256,uint256)": FunctionFragment;
    "stakerSetVeFXSProxy(address)": FunctionFragment;
    "stakerToggleMigrator(address)": FunctionFragment;
    "staker_designated_proxies(address)": FunctionFragment;
    "stakesUnlocked()": FunctionFragment;
    "stakingToken()": FunctionFragment;
    "sync()": FunctionFragment;
    "sync_gauge_weights(bool)": FunctionFragment;
    "toggleMigrations()": FunctionFragment;
    "toggleMigrator(address)": FunctionFragment;
    "toggleValidVeFXSProxy(address)": FunctionFragment;
    "totalCombinedWeight()": FunctionFragment;
    "totalLiquidityLocked()": FunctionFragment;
    "unlockStakes()": FunctionFragment;
    "userStakedFrax(address)": FunctionFragment;
    "veFXSMultiplier(address)": FunctionFragment;
    "vefxs_boost_scale_factor()": FunctionFragment;
    "vefxs_max_multiplier()": FunctionFragment;
    "vefxs_per_frax_for_max_boost()": FunctionFragment;
    "withdrawLocked(bytes32,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calcCurCombinedWeight",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeTokenManager",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "combinedWeightOf",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "earned", values: [string]): string;
  encodeFunctionData(
    functionFragment: "fraxPerLPStored",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fraxPerLPToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllRewardTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getReward", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getRewardForDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenManagerFor",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdateTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockAdditional",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lock_max_multiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lock_time_for_max_multiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lock_time_min",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockedLiquidityOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedStakes",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedStakesOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedStakesOfLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxLPForMaxBoost",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "migrator_stakeLocked_for",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "migrator_withdraw_locked",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minVeFXSForMaxBoost",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "minVeFXSForMaxBoostProxy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "nominateNewOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "nominatedOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "periodFinish",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxyStakedFrax",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "proxyToggleStaker",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "proxy_lp_balances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardManagers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokenAddrToIdx",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsPerToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMiscVariables",
    values: [
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPauses",
    values: [boolean, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardVars",
    values: [string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeLocked",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakerSetVeFXSProxy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakerToggleMigrator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "staker_designated_proxies",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakesUnlocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sync", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sync_gauge_weights",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleMigrations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleMigrator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleValidVeFXSProxy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalCombinedWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalLiquidityLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unlockStakes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userStakedFrax",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "veFXSMultiplier",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vefxs_boost_scale_factor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vefxs_max_multiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vefxs_per_frax_for_max_boost",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLocked",
    values: [BytesLike, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcCurCombinedWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeTokenManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "combinedWeightOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fraxPerLPStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fraxPerLPToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllRewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRewardForDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenManagerFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockAdditional",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lock_max_multiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lock_time_for_max_multiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lock_time_min",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedLiquidityOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedStakesOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedStakesOfLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxLPForMaxBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrator_stakeLocked_for",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrator_withdraw_locked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minVeFXSForMaxBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minVeFXSForMaxBoostProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominateNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominatedOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "periodFinish",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxyStakedFrax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxyToggleStaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxy_lp_balances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokenAddrToIdx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMiscVariables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPauses", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRewardVars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakerSetVeFXSProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakerToggleMigrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "staker_designated_proxies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakesUnlocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sync", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sync_gauge_weights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleMigrations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleMigrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleValidVeFXSProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCombinedWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLiquidityLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userStakedFrax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "veFXSMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vefxs_boost_scale_factor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vefxs_max_multiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vefxs_per_frax_for_max_boost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLocked",
    data: BytesLike
  ): Result;

  events: {
    "OwnerChanged(address,address)": EventFragment;
    "OwnerNominated(address)": EventFragment;
    "StakeLocked(address,uint256,uint256,bytes32,address)": EventFragment;
    "WithdrawLocked(address,uint256,bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerNominated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawLocked"): EventFragment;
}

export class FraxGauge extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FraxGaugeInterface;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "acceptOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calcCurCombinedWeight(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        old_combined_weight: BigNumber;
        new_vefxs_multiplier: BigNumber;
        new_combined_weight: BigNumber;
      }
    >;

    "calcCurCombinedWeight(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        old_combined_weight: BigNumber;
        new_vefxs_multiplier: BigNumber;
        new_combined_weight: BigNumber;
      }
    >;

    changeTokenManager(
      reward_token_address: string,
      new_manager_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "changeTokenManager(address,address)"(
      reward_token_address: string,
      new_manager_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    combinedWeightOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "combinedWeightOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    earned(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { new_earned: BigNumber[] }>;

    "earned(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { new_earned: BigNumber[] }>;

    fraxPerLPStored(overrides?: CallOverrides): Promise<[BigNumber]>;

    "fraxPerLPStored()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    fraxPerLPToken(overrides?: CallOverrides): Promise<[BigNumber]>;

    "fraxPerLPToken()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAllRewardTokens(overrides?: CallOverrides): Promise<[string[]]>;

    "getAllRewardTokens()"(overrides?: CallOverrides): Promise<[string[]]>;

    getReward(
      destination_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "getReward(address)"(
      destination_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRewardForDuration(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { rewards_per_duration_arr: BigNumber[] }>;

    "getRewardForDuration()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { rewards_per_duration_arr: BigNumber[] }>;

    isTokenManagerFor(
      caller_addr: string,
      reward_token_addr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isTokenManagerFor(address,address)"(
      caller_addr: string,
      reward_token_addr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastUpdateTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastUpdateTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockAdditional(
      kek_id: BytesLike,
      addl_liq: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lockAdditional(bytes32,uint256)"(
      kek_id: BytesLike,
      addl_liq: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockMultiplier(
      secs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "lockMultiplier(uint256)"(
      secs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lock_max_multiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lock_max_multiplier()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    lock_time_for_max_multiplier(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "lock_time_for_max_multiplier()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lock_time_min(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lock_time_min()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockedLiquidityOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "lockedLiquidityOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lockedStakes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        kek_id: string;
        start_timestamp: BigNumber;
        liquidity: BigNumber;
        ending_timestamp: BigNumber;
        lock_multiplier: BigNumber;
      }
    >;

    "lockedStakes(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        kek_id: string;
        start_timestamp: BigNumber;
        liquidity: BigNumber;
        ending_timestamp: BigNumber;
        lock_multiplier: BigNumber;
      }
    >;

    lockedStakesOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          kek_id: string;
          start_timestamp: BigNumber;
          liquidity: BigNumber;
          ending_timestamp: BigNumber;
          lock_multiplier: BigNumber;
        })[]
      ]
    >;

    "lockedStakesOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          kek_id: string;
          start_timestamp: BigNumber;
          liquidity: BigNumber;
          ending_timestamp: BigNumber;
          lock_multiplier: BigNumber;
        })[]
      ]
    >;

    lockedStakesOfLength(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "lockedStakesOfLength(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxLPForMaxBoost(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "maxLPForMaxBoost(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    migrator_stakeLocked_for(
      staker_address: string,
      amount: BigNumberish,
      secs: BigNumberish,
      start_timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "migrator_stakeLocked_for(address,uint256,uint256,uint256)"(
      staker_address: string,
      amount: BigNumberish,
      secs: BigNumberish,
      start_timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrator_withdraw_locked(
      staker_address: string,
      kek_id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "migrator_withdraw_locked(address,bytes32)"(
      staker_address: string,
      kek_id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minVeFXSForMaxBoost(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "minVeFXSForMaxBoost(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minVeFXSForMaxBoostProxy(
      proxy_address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "minVeFXSForMaxBoostProxy(address)"(
      proxy_address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "nominateNewOwner(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<[string]>;

    "nominatedOwner()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    periodFinish(overrides?: CallOverrides): Promise<[BigNumber]>;

    "periodFinish()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    proxyStakedFrax(
      proxy_address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "proxyStakedFrax(address)"(
      proxy_address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    proxyToggleStaker(
      staker_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "proxyToggleStaker(address)"(
      staker_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proxy_lp_balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "proxy_lp_balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "recoverERC20(address,uint256)"(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardManagers(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    "rewardManagers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rewardRates(
      token_idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rwd_rate: BigNumber }>;

    "rewardRates(uint256)"(
      token_idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rwd_rate: BigNumber }>;

    rewardTokenAddrToIdx(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "rewardTokenAddrToIdx(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardsDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    "rewardsDuration()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardsPerToken(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { newRewardsPerTokenStored: BigNumber[] }>;

    "rewardsPerToken()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { newRewardsPerTokenStored: BigNumber[] }>;

    setMiscVariables(
      _misc_vars: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMiscVariables(uint256[6])"(
      _misc_vars: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPauses(
      _stakingPaused: boolean,
      _withdrawalsPaused: boolean,
      _rewardsCollectionPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setPauses(bool,bool,bool)"(
      _stakingPaused: boolean,
      _withdrawalsPaused: boolean,
      _rewardsCollectionPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardVars(
      reward_token_address: string,
      _new_rate: BigNumberish,
      _gauge_controller_address: string,
      _rewards_distributor_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setRewardVars(address,uint256,address,address)"(
      reward_token_address: string,
      _new_rate: BigNumberish,
      _gauge_controller_address: string,
      _rewards_distributor_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeLocked(
      liquidity: BigNumberish,
      secs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "stakeLocked(uint256,uint256)"(
      liquidity: BigNumberish,
      secs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakerSetVeFXSProxy(
      proxy_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "stakerSetVeFXSProxy(address)"(
      proxy_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakerToggleMigrator(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "stakerToggleMigrator(address)"(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    staker_designated_proxies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "staker_designated_proxies(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    stakesUnlocked(overrides?: CallOverrides): Promise<[boolean]>;

    "stakesUnlocked()"(overrides?: CallOverrides): Promise<[boolean]>;

    stakingToken(overrides?: CallOverrides): Promise<[string]>;

    "stakingToken()"(overrides?: CallOverrides): Promise<[string]>;

    sync(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "sync()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sync_gauge_weights(
      force_update: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "sync_gauge_weights(bool)"(
      force_update: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleMigrations(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "toggleMigrations()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleMigrator(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "toggleMigrator(address)"(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleValidVeFXSProxy(
      _proxy_addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "toggleValidVeFXSProxy(address)"(
      _proxy_addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalCombinedWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalCombinedWeight()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalLiquidityLocked(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalLiquidityLocked()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    unlockStakes(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unlockStakes()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userStakedFrax(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "userStakedFrax(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    veFXSMultiplier(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { vefxs_multiplier: BigNumber }>;

    "veFXSMultiplier(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { vefxs_multiplier: BigNumber }>;

    vefxs_boost_scale_factor(overrides?: CallOverrides): Promise<[BigNumber]>;

    "vefxs_boost_scale_factor()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vefxs_max_multiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    "vefxs_max_multiplier()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    vefxs_per_frax_for_max_boost(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "vefxs_per_frax_for_max_boost()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawLocked(
      kek_id: BytesLike,
      destination_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawLocked(bytes32,address)"(
      kek_id: BytesLike,
      destination_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "acceptOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calcCurCombinedWeight(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      old_combined_weight: BigNumber;
      new_vefxs_multiplier: BigNumber;
      new_combined_weight: BigNumber;
    }
  >;

  "calcCurCombinedWeight(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      old_combined_weight: BigNumber;
      new_vefxs_multiplier: BigNumber;
      new_combined_weight: BigNumber;
    }
  >;

  changeTokenManager(
    reward_token_address: string,
    new_manager_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "changeTokenManager(address,address)"(
    reward_token_address: string,
    new_manager_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  combinedWeightOf(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "combinedWeightOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  earned(account: string, overrides?: CallOverrides): Promise<BigNumber[]>;

  "earned(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  fraxPerLPStored(overrides?: CallOverrides): Promise<BigNumber>;

  "fraxPerLPStored()"(overrides?: CallOverrides): Promise<BigNumber>;

  fraxPerLPToken(overrides?: CallOverrides): Promise<BigNumber>;

  "fraxPerLPToken()"(overrides?: CallOverrides): Promise<BigNumber>;

  getAllRewardTokens(overrides?: CallOverrides): Promise<string[]>;

  "getAllRewardTokens()"(overrides?: CallOverrides): Promise<string[]>;

  getReward(
    destination_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "getReward(address)"(
    destination_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRewardForDuration(overrides?: CallOverrides): Promise<BigNumber[]>;

  "getRewardForDuration()"(overrides?: CallOverrides): Promise<BigNumber[]>;

  isTokenManagerFor(
    caller_addr: string,
    reward_token_addr: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isTokenManagerFor(address,address)"(
    caller_addr: string,
    reward_token_addr: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

  "lastUpdateTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  lockAdditional(
    kek_id: BytesLike,
    addl_liq: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lockAdditional(bytes32,uint256)"(
    kek_id: BytesLike,
    addl_liq: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockMultiplier(
    secs: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "lockMultiplier(uint256)"(
    secs: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lock_max_multiplier(overrides?: CallOverrides): Promise<BigNumber>;

  "lock_max_multiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

  lock_time_for_max_multiplier(overrides?: CallOverrides): Promise<BigNumber>;

  "lock_time_for_max_multiplier()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lock_time_min(overrides?: CallOverrides): Promise<BigNumber>;

  "lock_time_min()"(overrides?: CallOverrides): Promise<BigNumber>;

  lockedLiquidityOf(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "lockedLiquidityOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lockedStakes(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      kek_id: string;
      start_timestamp: BigNumber;
      liquidity: BigNumber;
      ending_timestamp: BigNumber;
      lock_multiplier: BigNumber;
    }
  >;

  "lockedStakes(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      kek_id: string;
      start_timestamp: BigNumber;
      liquidity: BigNumber;
      ending_timestamp: BigNumber;
      lock_multiplier: BigNumber;
    }
  >;

  lockedStakesOf(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      kek_id: string;
      start_timestamp: BigNumber;
      liquidity: BigNumber;
      ending_timestamp: BigNumber;
      lock_multiplier: BigNumber;
    })[]
  >;

  "lockedStakesOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      kek_id: string;
      start_timestamp: BigNumber;
      liquidity: BigNumber;
      ending_timestamp: BigNumber;
      lock_multiplier: BigNumber;
    })[]
  >;

  lockedStakesOfLength(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "lockedStakesOfLength(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxLPForMaxBoost(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "maxLPForMaxBoost(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  migrator_stakeLocked_for(
    staker_address: string,
    amount: BigNumberish,
    secs: BigNumberish,
    start_timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "migrator_stakeLocked_for(address,uint256,uint256,uint256)"(
    staker_address: string,
    amount: BigNumberish,
    secs: BigNumberish,
    start_timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrator_withdraw_locked(
    staker_address: string,
    kek_id: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "migrator_withdraw_locked(address,bytes32)"(
    staker_address: string,
    kek_id: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minVeFXSForMaxBoost(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "minVeFXSForMaxBoost(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minVeFXSForMaxBoostProxy(
    proxy_address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "minVeFXSForMaxBoostProxy(address)"(
    proxy_address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nominateNewOwner(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "nominateNewOwner(address)"(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nominatedOwner(overrides?: CallOverrides): Promise<string>;

  "nominatedOwner()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

  "periodFinish()"(overrides?: CallOverrides): Promise<BigNumber>;

  proxyStakedFrax(
    proxy_address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "proxyStakedFrax(address)"(
    proxy_address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  proxyToggleStaker(
    staker_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "proxyToggleStaker(address)"(
    staker_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proxy_lp_balances(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "proxy_lp_balances(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  recoverERC20(
    tokenAddress: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "recoverERC20(address,uint256)"(
    tokenAddress: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardManagers(arg0: string, overrides?: CallOverrides): Promise<string>;

  "rewardManagers(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  rewardRates(
    token_idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "rewardRates(uint256)"(
    token_idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardTokenAddrToIdx(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "rewardTokenAddrToIdx(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardsDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

  rewardsPerToken(overrides?: CallOverrides): Promise<BigNumber[]>;

  "rewardsPerToken()"(overrides?: CallOverrides): Promise<BigNumber[]>;

  setMiscVariables(
    _misc_vars: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMiscVariables(uint256[6])"(
    _misc_vars: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPauses(
    _stakingPaused: boolean,
    _withdrawalsPaused: boolean,
    _rewardsCollectionPaused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setPauses(bool,bool,bool)"(
    _stakingPaused: boolean,
    _withdrawalsPaused: boolean,
    _rewardsCollectionPaused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardVars(
    reward_token_address: string,
    _new_rate: BigNumberish,
    _gauge_controller_address: string,
    _rewards_distributor_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setRewardVars(address,uint256,address,address)"(
    reward_token_address: string,
    _new_rate: BigNumberish,
    _gauge_controller_address: string,
    _rewards_distributor_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeLocked(
    liquidity: BigNumberish,
    secs: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "stakeLocked(uint256,uint256)"(
    liquidity: BigNumberish,
    secs: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakerSetVeFXSProxy(
    proxy_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "stakerSetVeFXSProxy(address)"(
    proxy_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakerToggleMigrator(
    migrator_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "stakerToggleMigrator(address)"(
    migrator_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  staker_designated_proxies(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "staker_designated_proxies(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  stakesUnlocked(overrides?: CallOverrides): Promise<boolean>;

  "stakesUnlocked()"(overrides?: CallOverrides): Promise<boolean>;

  stakingToken(overrides?: CallOverrides): Promise<string>;

  "stakingToken()"(overrides?: CallOverrides): Promise<string>;

  sync(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "sync()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sync_gauge_weights(
    force_update: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "sync_gauge_weights(bool)"(
    force_update: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleMigrations(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "toggleMigrations()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleMigrator(
    migrator_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "toggleMigrator(address)"(
    migrator_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleValidVeFXSProxy(
    _proxy_addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "toggleValidVeFXSProxy(address)"(
    _proxy_addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalCombinedWeight(overrides?: CallOverrides): Promise<BigNumber>;

  "totalCombinedWeight()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalLiquidityLocked(overrides?: CallOverrides): Promise<BigNumber>;

  "totalLiquidityLocked()"(overrides?: CallOverrides): Promise<BigNumber>;

  unlockStakes(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unlockStakes()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userStakedFrax(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userStakedFrax(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  veFXSMultiplier(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "veFXSMultiplier(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vefxs_boost_scale_factor(overrides?: CallOverrides): Promise<BigNumber>;

  "vefxs_boost_scale_factor()"(overrides?: CallOverrides): Promise<BigNumber>;

  vefxs_max_multiplier(overrides?: CallOverrides): Promise<BigNumber>;

  "vefxs_max_multiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

  vefxs_per_frax_for_max_boost(overrides?: CallOverrides): Promise<BigNumber>;

  "vefxs_per_frax_for_max_boost()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawLocked(
    kek_id: BytesLike,
    destination_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawLocked(bytes32,address)"(
    kek_id: BytesLike,
    destination_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    "acceptOwnership()"(overrides?: CallOverrides): Promise<void>;

    calcCurCombinedWeight(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        old_combined_weight: BigNumber;
        new_vefxs_multiplier: BigNumber;
        new_combined_weight: BigNumber;
      }
    >;

    "calcCurCombinedWeight(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        old_combined_weight: BigNumber;
        new_vefxs_multiplier: BigNumber;
        new_combined_weight: BigNumber;
      }
    >;

    changeTokenManager(
      reward_token_address: string,
      new_manager_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeTokenManager(address,address)"(
      reward_token_address: string,
      new_manager_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    combinedWeightOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "combinedWeightOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    earned(account: string, overrides?: CallOverrides): Promise<BigNumber[]>;

    "earned(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    fraxPerLPStored(overrides?: CallOverrides): Promise<BigNumber>;

    "fraxPerLPStored()"(overrides?: CallOverrides): Promise<BigNumber>;

    fraxPerLPToken(overrides?: CallOverrides): Promise<BigNumber>;

    "fraxPerLPToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAllRewardTokens(overrides?: CallOverrides): Promise<string[]>;

    "getAllRewardTokens()"(overrides?: CallOverrides): Promise<string[]>;

    getReward(
      destination_address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getReward(address)"(
      destination_address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getRewardForDuration(overrides?: CallOverrides): Promise<BigNumber[]>;

    "getRewardForDuration()"(overrides?: CallOverrides): Promise<BigNumber[]>;

    isTokenManagerFor(
      caller_addr: string,
      reward_token_addr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isTokenManagerFor(address,address)"(
      caller_addr: string,
      reward_token_addr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lastUpdateTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockAdditional(
      kek_id: BytesLike,
      addl_liq: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "lockAdditional(bytes32,uint256)"(
      kek_id: BytesLike,
      addl_liq: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockMultiplier(
      secs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockMultiplier(uint256)"(
      secs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock_max_multiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "lock_max_multiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    lock_time_for_max_multiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "lock_time_for_max_multiplier()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock_time_min(overrides?: CallOverrides): Promise<BigNumber>;

    "lock_time_min()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockedLiquidityOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockedLiquidityOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedStakes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        kek_id: string;
        start_timestamp: BigNumber;
        liquidity: BigNumber;
        ending_timestamp: BigNumber;
        lock_multiplier: BigNumber;
      }
    >;

    "lockedStakes(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        kek_id: string;
        start_timestamp: BigNumber;
        liquidity: BigNumber;
        ending_timestamp: BigNumber;
        lock_multiplier: BigNumber;
      }
    >;

    lockedStakesOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        kek_id: string;
        start_timestamp: BigNumber;
        liquidity: BigNumber;
        ending_timestamp: BigNumber;
        lock_multiplier: BigNumber;
      })[]
    >;

    "lockedStakesOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        kek_id: string;
        start_timestamp: BigNumber;
        liquidity: BigNumber;
        ending_timestamp: BigNumber;
        lock_multiplier: BigNumber;
      })[]
    >;

    lockedStakesOfLength(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockedStakesOfLength(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxLPForMaxBoost(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "maxLPForMaxBoost(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migrator_stakeLocked_for(
      staker_address: string,
      amount: BigNumberish,
      secs: BigNumberish,
      start_timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "migrator_stakeLocked_for(address,uint256,uint256,uint256)"(
      staker_address: string,
      amount: BigNumberish,
      secs: BigNumberish,
      start_timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    migrator_withdraw_locked(
      staker_address: string,
      kek_id: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "migrator_withdraw_locked(address,bytes32)"(
      staker_address: string,
      kek_id: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    minVeFXSForMaxBoost(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "minVeFXSForMaxBoost(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minVeFXSForMaxBoostProxy(
      proxy_address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "minVeFXSForMaxBoostProxy(address)"(
      proxy_address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nominateNewOwner(_owner: string, overrides?: CallOverrides): Promise<void>;

    "nominateNewOwner(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    nominatedOwner(overrides?: CallOverrides): Promise<string>;

    "nominatedOwner()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

    "periodFinish()"(overrides?: CallOverrides): Promise<BigNumber>;

    proxyStakedFrax(
      proxy_address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proxyStakedFrax(address)"(
      proxy_address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxyToggleStaker(
      staker_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "proxyToggleStaker(address)"(
      staker_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proxy_lp_balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proxy_lp_balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "recoverERC20(address,uint256)"(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardManagers(arg0: string, overrides?: CallOverrides): Promise<string>;

    "rewardManagers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    rewardRates(
      token_idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardRates(uint256)"(
      token_idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardTokenAddrToIdx(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardTokenAddrToIdx(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsPerToken(overrides?: CallOverrides): Promise<BigNumber[]>;

    "rewardsPerToken()"(overrides?: CallOverrides): Promise<BigNumber[]>;

    setMiscVariables(
      _misc_vars: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    "setMiscVariables(uint256[6])"(
      _misc_vars: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    setPauses(
      _stakingPaused: boolean,
      _withdrawalsPaused: boolean,
      _rewardsCollectionPaused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPauses(bool,bool,bool)"(
      _stakingPaused: boolean,
      _withdrawalsPaused: boolean,
      _rewardsCollectionPaused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardVars(
      reward_token_address: string,
      _new_rate: BigNumberish,
      _gauge_controller_address: string,
      _rewards_distributor_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRewardVars(address,uint256,address,address)"(
      reward_token_address: string,
      _new_rate: BigNumberish,
      _gauge_controller_address: string,
      _rewards_distributor_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeLocked(
      liquidity: BigNumberish,
      secs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "stakeLocked(uint256,uint256)"(
      liquidity: BigNumberish,
      secs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakerSetVeFXSProxy(
      proxy_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "stakerSetVeFXSProxy(address)"(
      proxy_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakerToggleMigrator(
      migrator_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "stakerToggleMigrator(address)"(
      migrator_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    staker_designated_proxies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "staker_designated_proxies(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    stakesUnlocked(overrides?: CallOverrides): Promise<boolean>;

    "stakesUnlocked()"(overrides?: CallOverrides): Promise<boolean>;

    stakingToken(overrides?: CallOverrides): Promise<string>;

    "stakingToken()"(overrides?: CallOverrides): Promise<string>;

    sync(overrides?: CallOverrides): Promise<void>;

    "sync()"(overrides?: CallOverrides): Promise<void>;

    sync_gauge_weights(
      force_update: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "sync_gauge_weights(bool)"(
      force_update: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleMigrations(overrides?: CallOverrides): Promise<void>;

    "toggleMigrations()"(overrides?: CallOverrides): Promise<void>;

    toggleMigrator(
      migrator_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "toggleMigrator(address)"(
      migrator_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleValidVeFXSProxy(
      _proxy_addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "toggleValidVeFXSProxy(address)"(
      _proxy_addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    totalCombinedWeight(overrides?: CallOverrides): Promise<BigNumber>;

    "totalCombinedWeight()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalLiquidityLocked(overrides?: CallOverrides): Promise<BigNumber>;

    "totalLiquidityLocked()"(overrides?: CallOverrides): Promise<BigNumber>;

    unlockStakes(overrides?: CallOverrides): Promise<void>;

    "unlockStakes()"(overrides?: CallOverrides): Promise<void>;

    userStakedFrax(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userStakedFrax(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    veFXSMultiplier(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "veFXSMultiplier(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vefxs_boost_scale_factor(overrides?: CallOverrides): Promise<BigNumber>;

    "vefxs_boost_scale_factor()"(overrides?: CallOverrides): Promise<BigNumber>;

    vefxs_max_multiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "vefxs_max_multiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    vefxs_per_frax_for_max_boost(overrides?: CallOverrides): Promise<BigNumber>;

    "vefxs_per_frax_for_max_boost()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawLocked(
      kek_id: BytesLike,
      destination_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawLocked(bytes32,address)"(
      kek_id: BytesLike,
      destination_address: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnerChanged(
      oldOwner: null,
      newOwner: null
    ): TypedEventFilter<
      [string, string],
      { oldOwner: string; newOwner: string }
    >;

    OwnerNominated(
      newOwner: null
    ): TypedEventFilter<[string], { newOwner: string }>;

    StakeLocked(
      user: string | null,
      amount: null,
      secs: null,
      kek_id: null,
      source_address: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, string],
      {
        user: string;
        amount: BigNumber;
        secs: BigNumber;
        kek_id: string;
        source_address: string;
      }
    >;

    WithdrawLocked(
      user: string | null,
      liquidity: null,
      kek_id: null,
      destination_address: null
    ): TypedEventFilter<
      [string, BigNumber, string, string],
      {
        user: string;
        liquidity: BigNumber;
        kek_id: string;
        destination_address: string;
      }
    >;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "acceptOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calcCurCombinedWeight(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcCurCombinedWeight(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeTokenManager(
      reward_token_address: string,
      new_manager_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "changeTokenManager(address,address)"(
      reward_token_address: string,
      new_manager_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    combinedWeightOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "combinedWeightOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    earned(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "earned(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fraxPerLPStored(overrides?: CallOverrides): Promise<BigNumber>;

    "fraxPerLPStored()"(overrides?: CallOverrides): Promise<BigNumber>;

    fraxPerLPToken(overrides?: CallOverrides): Promise<BigNumber>;

    "fraxPerLPToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAllRewardTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "getAllRewardTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReward(
      destination_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "getReward(address)"(
      destination_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRewardForDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "getRewardForDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    isTokenManagerFor(
      caller_addr: string,
      reward_token_addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isTokenManagerFor(address,address)"(
      caller_addr: string,
      reward_token_addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lastUpdateTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockAdditional(
      kek_id: BytesLike,
      addl_liq: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lockAdditional(bytes32,uint256)"(
      kek_id: BytesLike,
      addl_liq: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockMultiplier(
      secs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockMultiplier(uint256)"(
      secs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock_max_multiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "lock_max_multiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    lock_time_for_max_multiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "lock_time_for_max_multiplier()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock_time_min(overrides?: CallOverrides): Promise<BigNumber>;

    "lock_time_min()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockedLiquidityOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockedLiquidityOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedStakes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockedStakes(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedStakesOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockedStakesOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedStakesOfLength(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockedStakesOfLength(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxLPForMaxBoost(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "maxLPForMaxBoost(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migrator_stakeLocked_for(
      staker_address: string,
      amount: BigNumberish,
      secs: BigNumberish,
      start_timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "migrator_stakeLocked_for(address,uint256,uint256,uint256)"(
      staker_address: string,
      amount: BigNumberish,
      secs: BigNumberish,
      start_timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrator_withdraw_locked(
      staker_address: string,
      kek_id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "migrator_withdraw_locked(address,bytes32)"(
      staker_address: string,
      kek_id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minVeFXSForMaxBoost(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "minVeFXSForMaxBoost(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minVeFXSForMaxBoostProxy(
      proxy_address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "minVeFXSForMaxBoostProxy(address)"(
      proxy_address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "nominateNewOwner(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "nominatedOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

    "periodFinish()"(overrides?: CallOverrides): Promise<BigNumber>;

    proxyStakedFrax(
      proxy_address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proxyStakedFrax(address)"(
      proxy_address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxyToggleStaker(
      staker_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "proxyToggleStaker(address)"(
      staker_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proxy_lp_balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proxy_lp_balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "recoverERC20(address,uint256)"(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardManagers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "rewardManagers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardRates(
      token_idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardRates(uint256)"(
      token_idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardTokenAddrToIdx(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardTokenAddrToIdx(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsPerToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    setMiscVariables(
      _misc_vars: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMiscVariables(uint256[6])"(
      _misc_vars: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPauses(
      _stakingPaused: boolean,
      _withdrawalsPaused: boolean,
      _rewardsCollectionPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setPauses(bool,bool,bool)"(
      _stakingPaused: boolean,
      _withdrawalsPaused: boolean,
      _rewardsCollectionPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardVars(
      reward_token_address: string,
      _new_rate: BigNumberish,
      _gauge_controller_address: string,
      _rewards_distributor_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setRewardVars(address,uint256,address,address)"(
      reward_token_address: string,
      _new_rate: BigNumberish,
      _gauge_controller_address: string,
      _rewards_distributor_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeLocked(
      liquidity: BigNumberish,
      secs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "stakeLocked(uint256,uint256)"(
      liquidity: BigNumberish,
      secs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakerSetVeFXSProxy(
      proxy_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "stakerSetVeFXSProxy(address)"(
      proxy_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakerToggleMigrator(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "stakerToggleMigrator(address)"(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    staker_designated_proxies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "staker_designated_proxies(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakesUnlocked(overrides?: CallOverrides): Promise<BigNumber>;

    "stakesUnlocked()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    sync(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "sync()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sync_gauge_weights(
      force_update: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "sync_gauge_weights(bool)"(
      force_update: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleMigrations(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "toggleMigrations()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleMigrator(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "toggleMigrator(address)"(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleValidVeFXSProxy(
      _proxy_addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "toggleValidVeFXSProxy(address)"(
      _proxy_addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalCombinedWeight(overrides?: CallOverrides): Promise<BigNumber>;

    "totalCombinedWeight()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalLiquidityLocked(overrides?: CallOverrides): Promise<BigNumber>;

    "totalLiquidityLocked()"(overrides?: CallOverrides): Promise<BigNumber>;

    unlockStakes(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unlockStakes()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userStakedFrax(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userStakedFrax(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    veFXSMultiplier(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "veFXSMultiplier(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vefxs_boost_scale_factor(overrides?: CallOverrides): Promise<BigNumber>;

    "vefxs_boost_scale_factor()"(overrides?: CallOverrides): Promise<BigNumber>;

    vefxs_max_multiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "vefxs_max_multiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    vefxs_per_frax_for_max_boost(overrides?: CallOverrides): Promise<BigNumber>;

    "vefxs_per_frax_for_max_boost()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawLocked(
      kek_id: BytesLike,
      destination_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawLocked(bytes32,address)"(
      kek_id: BytesLike,
      destination_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "acceptOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calcCurCombinedWeight(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcCurCombinedWeight(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeTokenManager(
      reward_token_address: string,
      new_manager_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "changeTokenManager(address,address)"(
      reward_token_address: string,
      new_manager_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    combinedWeightOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "combinedWeightOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    earned(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "earned(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fraxPerLPStored(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fraxPerLPStored()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fraxPerLPToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fraxPerLPToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllRewardTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAllRewardTokens()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReward(
      destination_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "getReward(address)"(
      destination_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRewardForDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRewardForDuration()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTokenManagerFor(
      caller_addr: string,
      reward_token_addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isTokenManagerFor(address,address)"(
      caller_addr: string,
      reward_token_addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastUpdateTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastUpdateTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockAdditional(
      kek_id: BytesLike,
      addl_liq: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lockAdditional(bytes32,uint256)"(
      kek_id: BytesLike,
      addl_liq: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockMultiplier(
      secs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lockMultiplier(uint256)"(
      secs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lock_max_multiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lock_max_multiplier()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lock_time_for_max_multiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lock_time_for_max_multiplier()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lock_time_min(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lock_time_min()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedLiquidityOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lockedLiquidityOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedStakes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lockedStakes(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedStakesOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lockedStakesOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedStakesOfLength(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lockedStakesOfLength(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxLPForMaxBoost(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maxLPForMaxBoost(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migrator_stakeLocked_for(
      staker_address: string,
      amount: BigNumberish,
      secs: BigNumberish,
      start_timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "migrator_stakeLocked_for(address,uint256,uint256,uint256)"(
      staker_address: string,
      amount: BigNumberish,
      secs: BigNumberish,
      start_timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrator_withdraw_locked(
      staker_address: string,
      kek_id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "migrator_withdraw_locked(address,bytes32)"(
      staker_address: string,
      kek_id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minVeFXSForMaxBoost(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minVeFXSForMaxBoost(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minVeFXSForMaxBoostProxy(
      proxy_address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minVeFXSForMaxBoostProxy(address)"(
      proxy_address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "nominateNewOwner(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nominatedOwner()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periodFinish(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "periodFinish()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxyStakedFrax(
      proxy_address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proxyStakedFrax(address)"(
      proxy_address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxyToggleStaker(
      staker_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "proxyToggleStaker(address)"(
      staker_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proxy_lp_balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proxy_lp_balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "recoverERC20(address,uint256)"(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardManagers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardManagers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardRates(
      token_idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardRates(uint256)"(
      token_idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardTokenAddrToIdx(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardTokenAddrToIdx(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardsDuration()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsPerToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardsPerToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMiscVariables(
      _misc_vars: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMiscVariables(uint256[6])"(
      _misc_vars: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPauses(
      _stakingPaused: boolean,
      _withdrawalsPaused: boolean,
      _rewardsCollectionPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setPauses(bool,bool,bool)"(
      _stakingPaused: boolean,
      _withdrawalsPaused: boolean,
      _rewardsCollectionPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardVars(
      reward_token_address: string,
      _new_rate: BigNumberish,
      _gauge_controller_address: string,
      _rewards_distributor_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setRewardVars(address,uint256,address,address)"(
      reward_token_address: string,
      _new_rate: BigNumberish,
      _gauge_controller_address: string,
      _rewards_distributor_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeLocked(
      liquidity: BigNumberish,
      secs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "stakeLocked(uint256,uint256)"(
      liquidity: BigNumberish,
      secs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakerSetVeFXSProxy(
      proxy_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "stakerSetVeFXSProxy(address)"(
      proxy_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakerToggleMigrator(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "stakerToggleMigrator(address)"(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    staker_designated_proxies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "staker_designated_proxies(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakesUnlocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakesUnlocked()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakingToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sync(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "sync()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sync_gauge_weights(
      force_update: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "sync_gauge_weights(bool)"(
      force_update: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleMigrations(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "toggleMigrations()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleMigrator(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "toggleMigrator(address)"(
      migrator_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleValidVeFXSProxy(
      _proxy_addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "toggleValidVeFXSProxy(address)"(
      _proxy_addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalCombinedWeight(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalCombinedWeight()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalLiquidityLocked(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalLiquidityLocked()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlockStakes(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unlockStakes()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userStakedFrax(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userStakedFrax(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    veFXSMultiplier(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "veFXSMultiplier(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vefxs_boost_scale_factor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "vefxs_boost_scale_factor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vefxs_max_multiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "vefxs_max_multiplier()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vefxs_per_frax_for_max_boost(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "vefxs_per_frax_for_max_boost()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawLocked(
      kek_id: BytesLike,
      destination_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawLocked(bytes32,address)"(
      kek_id: BytesLike,
      destination_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
