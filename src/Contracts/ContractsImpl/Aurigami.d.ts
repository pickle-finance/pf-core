/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface AurigamiInterface extends ethers.utils.Interface {
  functions: {
    "addPool(address,uint32,uint32,uint256[])": FunctionFragment;
    "claimOwnership()": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "emergencyWithdraw(uint256)": FunctionFragment;
    "getPoolInfo(uint256)": FunctionFragment;
    "getRewardTokens()": FunctionFragment;
    "getUserInfo(uint256,address)": FunctionFragment;
    "harvest(address,uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerWithdraw(uint256,uint256)": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "pendingRewards(uint256,address)": FunctionFragment;
    "ply()": FunctionFragment;
    "poolExists(address)": FunctionFragment;
    "poolLength()": FunctionFragment;
    "pulp()": FunctionFragment;
    "renewPool(uint256,uint32,uint32,uint256[])": FunctionFragment;
    "rewardTokens(uint256)": FunctionFragment;
    "transferOwnership(address,bool,bool)": FunctionFragment;
    "unitroller()": FunctionFragment;
    "updateAndGetUserInfo(uint256,address)": FunctionFragment;
    "updateMultiplePools(address,uint256[])": FunctionFragment;
    "updatePool(uint256,uint32,uint256[])": FunctionFragment;
    "updatePoolRewards(uint256)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
    "withdrawAll(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addPool",
    values: [string, BigNumberish, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInfo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "harvest",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerWithdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingRewards",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "ply", values?: undefined): string;
  encodeFunctionData(functionFragment: "poolExists", values: [string]): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pulp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renewPool",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "unitroller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateAndGetUserInfo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMultiplePools",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [BigNumberish, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePoolRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolExists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pulp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renewPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unitroller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAndGetUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMultiplePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePoolRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;

  events: {
    "AddNewPool(address,uint32,uint32,uint256[])": EventFragment;
    "Deposit(address,uint256,uint256,uint256)": EventFragment;
    "EmergencyWithdraw(address,uint256,uint256,uint256)": EventFragment;
    "Harvest(address,uint256,address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RenewPool(uint256,uint32,uint32,uint256[])": EventFragment;
    "RewardTokenWithdrawn(address,address,uint256)": EventFragment;
    "UpdatePool(uint256,uint32,uint256[])": EventFragment;
    "Withdraw(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddNewPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Harvest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RenewPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardTokenWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class Aurigami extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AurigamiInterface;

  functions: {
    addPool(
      _stakeToken: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _rewardPerSeconds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addPool(address,uint32,uint32,uint256[])"(
      _stakeToken: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _rewardPerSeconds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPoolInfo(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, number, number, number, BigNumber[], BigNumber[]] & {
        totalStake: BigNumber;
        stakeToken: string;
        startTime: number;
        endTime: number;
        lastRewardTimestamp: number;
        rewardPerSeconds: BigNumber[];
        accRewardPerShares: BigNumber[];
      }
    >;

    "getPoolInfo(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, number, number, number, BigNumber[], BigNumber[]] & {
        totalStake: BigNumber;
        stakeToken: string;
        startTime: number;
        endTime: number;
        lastRewardTimestamp: number;
        rewardPerSeconds: BigNumber[];
        accRewardPerShares: BigNumber[];
      }
    >;

    getRewardTokens(overrides?: CallOverrides): Promise<[string[]]>;

    "getRewardTokens()"(overrides?: CallOverrides): Promise<[string[]]>;

    getUserInfo(
      _pid: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[], BigNumber[]] & {
        amount: BigNumber;
        unclaimedRewards: BigNumber[];
        lastRewardPerShares: BigNumber[];
      }
    >;

    "getUserInfo(uint256,address)"(
      _pid: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[], BigNumber[]] & {
        amount: BigNumber;
        unclaimedRewards: BigNumber[];
        lastRewardPerShares: BigNumber[];
      }
    >;

    harvest(
      account: string,
      _pid: BigNumberish,
      _maxAmountOfPlyToHarvest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "harvest(address,uint256,uint256)"(
      account: string,
      _pid: BigNumberish,
      _maxAmountOfPlyToHarvest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    ownerWithdraw(
      rewardTokenIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "ownerWithdraw(uint256,uint256)"(
      rewardTokenIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<[string]>;

    pendingRewards(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { rewards: BigNumber[] }>;

    "pendingRewards(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { rewards: BigNumber[] }>;

    ply(overrides?: CallOverrides): Promise<[string]>;

    "ply()"(overrides?: CallOverrides): Promise<[string]>;

    poolExists(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "poolExists(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    poolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "poolLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    pulp(overrides?: CallOverrides): Promise<[string]>;

    "pulp()"(overrides?: CallOverrides): Promise<[string]>;

    renewPool(
      _pid: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _rewardPerSeconds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renewPool(uint256,uint32,uint32,uint256[])"(
      _pid: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _rewardPerSeconds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "rewardTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address,bool,bool)"(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unitroller(overrides?: CallOverrides): Promise<[string]>;

    "unitroller()"(overrides?: CallOverrides): Promise<[string]>;

    updateAndGetUserInfo(
      _pid: BigNumberish,
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateAndGetUserInfo(uint256,address)"(
      _pid: BigNumberish,
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMultiplePools(
      account: string,
      _pids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateMultiplePools(address,uint256[])"(
      account: string,
      _pids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePool(
      _pid: BigNumberish,
      _endTime: BigNumberish,
      _rewardPerSeconds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updatePool(uint256,uint32,uint256[])"(
      _pid: BigNumberish,
      _endTime: BigNumberish,
      _rewardPerSeconds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePoolRewards(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updatePoolRewards(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawAll(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addPool(
    _stakeToken: string,
    _startTime: BigNumberish,
    _endTime: BigNumberish,
    _rewardPerSeconds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addPool(address,uint32,uint32,uint256[])"(
    _stakeToken: string,
    _startTime: BigNumberish,
    _endTime: BigNumberish,
    _rewardPerSeconds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit(uint256,uint256)"(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "emergencyWithdraw(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPoolInfo(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, number, number, number, BigNumber[], BigNumber[]] & {
      totalStake: BigNumber;
      stakeToken: string;
      startTime: number;
      endTime: number;
      lastRewardTimestamp: number;
      rewardPerSeconds: BigNumber[];
      accRewardPerShares: BigNumber[];
    }
  >;

  "getPoolInfo(uint256)"(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, number, number, number, BigNumber[], BigNumber[]] & {
      totalStake: BigNumber;
      stakeToken: string;
      startTime: number;
      endTime: number;
      lastRewardTimestamp: number;
      rewardPerSeconds: BigNumber[];
      accRewardPerShares: BigNumber[];
    }
  >;

  getRewardTokens(overrides?: CallOverrides): Promise<string[]>;

  "getRewardTokens()"(overrides?: CallOverrides): Promise<string[]>;

  getUserInfo(
    _pid: BigNumberish,
    _account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber[], BigNumber[]] & {
      amount: BigNumber;
      unclaimedRewards: BigNumber[];
      lastRewardPerShares: BigNumber[];
    }
  >;

  "getUserInfo(uint256,address)"(
    _pid: BigNumberish,
    _account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber[], BigNumber[]] & {
      amount: BigNumber;
      unclaimedRewards: BigNumber[];
      lastRewardPerShares: BigNumber[];
    }
  >;

  harvest(
    account: string,
    _pid: BigNumberish,
    _maxAmountOfPlyToHarvest: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "harvest(address,uint256,uint256)"(
    account: string,
    _pid: BigNumberish,
    _maxAmountOfPlyToHarvest: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  ownerWithdraw(
    rewardTokenIndex: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "ownerWithdraw(uint256,uint256)"(
    rewardTokenIndex: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

  pendingRewards(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "pendingRewards(uint256,address)"(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  ply(overrides?: CallOverrides): Promise<string>;

  "ply()"(overrides?: CallOverrides): Promise<string>;

  poolExists(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "poolExists(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  pulp(overrides?: CallOverrides): Promise<string>;

  "pulp()"(overrides?: CallOverrides): Promise<string>;

  renewPool(
    _pid: BigNumberish,
    _startTime: BigNumberish,
    _endTime: BigNumberish,
    _rewardPerSeconds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renewPool(uint256,uint32,uint32,uint256[])"(
    _pid: BigNumberish,
    _startTime: BigNumberish,
    _endTime: BigNumberish,
    _rewardPerSeconds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "rewardTokens(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  transferOwnership(
    newOwner: string,
    direct: boolean,
    renounce: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address,bool,bool)"(
    newOwner: string,
    direct: boolean,
    renounce: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unitroller(overrides?: CallOverrides): Promise<string>;

  "unitroller()"(overrides?: CallOverrides): Promise<string>;

  updateAndGetUserInfo(
    _pid: BigNumberish,
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateAndGetUserInfo(uint256,address)"(
    _pid: BigNumberish,
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMultiplePools(
    account: string,
    _pids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateMultiplePools(address,uint256[])"(
    account: string,
    _pids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePool(
    _pid: BigNumberish,
    _endTime: BigNumberish,
    _rewardPerSeconds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updatePool(uint256,uint32,uint256[])"(
    _pid: BigNumberish,
    _endTime: BigNumberish,
    _rewardPerSeconds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePoolRewards(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updatePoolRewards(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(uint256,uint256)"(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawAll(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addPool(
      _stakeToken: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _rewardPerSeconds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addPool(address,uint32,uint32,uint256[])"(
      _stakeToken: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _rewardPerSeconds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimOwnership(overrides?: CallOverrides): Promise<void>;

    "claimOwnership()"(overrides?: CallOverrides): Promise<void>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getPoolInfo(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, number, number, number, BigNumber[], BigNumber[]] & {
        totalStake: BigNumber;
        stakeToken: string;
        startTime: number;
        endTime: number;
        lastRewardTimestamp: number;
        rewardPerSeconds: BigNumber[];
        accRewardPerShares: BigNumber[];
      }
    >;

    "getPoolInfo(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, number, number, number, BigNumber[], BigNumber[]] & {
        totalStake: BigNumber;
        stakeToken: string;
        startTime: number;
        endTime: number;
        lastRewardTimestamp: number;
        rewardPerSeconds: BigNumber[];
        accRewardPerShares: BigNumber[];
      }
    >;

    getRewardTokens(overrides?: CallOverrides): Promise<string[]>;

    "getRewardTokens()"(overrides?: CallOverrides): Promise<string[]>;

    getUserInfo(
      _pid: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[], BigNumber[]] & {
        amount: BigNumber;
        unclaimedRewards: BigNumber[];
        lastRewardPerShares: BigNumber[];
      }
    >;

    "getUserInfo(uint256,address)"(
      _pid: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[], BigNumber[]] & {
        amount: BigNumber;
        unclaimedRewards: BigNumber[];
        lastRewardPerShares: BigNumber[];
      }
    >;

    harvest(
      account: string,
      _pid: BigNumberish,
      _maxAmountOfPlyToHarvest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "harvest(address,uint256,uint256)"(
      account: string,
      _pid: BigNumberish,
      _maxAmountOfPlyToHarvest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    ownerWithdraw(
      rewardTokenIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "ownerWithdraw(uint256,uint256)"(
      rewardTokenIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

    pendingRewards(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "pendingRewards(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    ply(overrides?: CallOverrides): Promise<string>;

    "ply()"(overrides?: CallOverrides): Promise<string>;

    poolExists(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "poolExists(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    pulp(overrides?: CallOverrides): Promise<string>;

    "pulp()"(overrides?: CallOverrides): Promise<string>;

    renewPool(
      _pid: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _rewardPerSeconds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "renewPool(uint256,uint32,uint32,uint256[])"(
      _pid: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _rewardPerSeconds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "rewardTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address,bool,bool)"(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    unitroller(overrides?: CallOverrides): Promise<string>;

    "unitroller()"(overrides?: CallOverrides): Promise<string>;

    updateAndGetUserInfo(
      _pid: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[], BigNumber[]] & {
        amount: BigNumber;
        unclaimedRewards: BigNumber[];
        lastRewardPerShares: BigNumber[];
      }
    >;

    "updateAndGetUserInfo(uint256,address)"(
      _pid: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[], BigNumber[]] & {
        amount: BigNumber;
        unclaimedRewards: BigNumber[];
        lastRewardPerShares: BigNumber[];
      }
    >;

    updateMultiplePools(
      account: string,
      _pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "updateMultiplePools(address,uint256[])"(
      account: string,
      _pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    updatePool(
      _pid: BigNumberish,
      _endTime: BigNumberish,
      _rewardPerSeconds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "updatePool(uint256,uint32,uint256[])"(
      _pid: BigNumberish,
      _endTime: BigNumberish,
      _rewardPerSeconds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    updatePoolRewards(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updatePoolRewards(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "withdrawAll(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AddNewPool(
      stakeToken: string | null,
      startTime: BigNumberish | null,
      endTime: BigNumberish | null,
      rewardPerSeconds: null
    ): TypedEventFilter<
      [string, number, number, BigNumber[]],
      {
        stakeToken: string;
        startTime: number;
        endTime: number;
        rewardPerSeconds: BigNumber[];
      }
    >;

    Deposit(
      user: string | null,
      pid: BigNumberish | null,
      timestamp: BigNumberish | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      { user: string; pid: BigNumber; timestamp: BigNumber; amount: BigNumber }
    >;

    EmergencyWithdraw(
      user: string | null,
      pid: BigNumberish | null,
      timestamp: BigNumberish | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      { user: string; pid: BigNumber; timestamp: BigNumber; amount: BigNumber }
    >;

    Harvest(
      user: string | null,
      pid: BigNumberish | null,
      rewardToken: string | null,
      lockedAmount: null,
      timestamp: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, BigNumber],
      {
        user: string;
        pid: BigNumber;
        rewardToken: string;
        lockedAmount: BigNumber;
        timestamp: BigNumber;
      }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    RenewPool(
      pid: BigNumberish | null,
      startTime: BigNumberish | null,
      endTime: BigNumberish | null,
      rewardPerSeconds: null
    ): TypedEventFilter<
      [BigNumber, number, number, BigNumber[]],
      {
        pid: BigNumber;
        startTime: number;
        endTime: number;
        rewardPerSeconds: BigNumber[];
      }
    >;

    RewardTokenWithdrawn(
      owner: string | null,
      rewardToken: string | null,
      amount: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; rewardToken: string; amount: BigNumber }
    >;

    UpdatePool(
      pid: BigNumberish | null,
      endTime: BigNumberish | null,
      rewardPerSecond: null
    ): TypedEventFilter<
      [BigNumber, number, BigNumber[]],
      { pid: BigNumber; endTime: number; rewardPerSecond: BigNumber[] }
    >;

    Withdraw(
      user: string | null,
      pid: BigNumberish | null,
      timestamp: BigNumberish | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      { user: string; pid: BigNumber; timestamp: BigNumber; amount: BigNumber }
    >;
  };

  estimateGas: {
    addPool(
      _stakeToken: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _rewardPerSeconds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addPool(address,uint32,uint32,uint256[])"(
      _stakeToken: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _rewardPerSeconds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPoolInfo(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPoolInfo(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "getRewardTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUserInfo(
      _pid: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserInfo(uint256,address)"(
      _pid: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvest(
      account: string,
      _pid: BigNumberish,
      _maxAmountOfPlyToHarvest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "harvest(address,uint256,uint256)"(
      account: string,
      _pid: BigNumberish,
      _maxAmountOfPlyToHarvest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    ownerWithdraw(
      rewardTokenIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "ownerWithdraw(uint256,uint256)"(
      rewardTokenIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingRewards(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingRewards(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ply(overrides?: CallOverrides): Promise<BigNumber>;

    "ply()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolExists(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "poolExists(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    pulp(overrides?: CallOverrides): Promise<BigNumber>;

    "pulp()"(overrides?: CallOverrides): Promise<BigNumber>;

    renewPool(
      _pid: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _rewardPerSeconds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renewPool(uint256,uint32,uint32,uint256[])"(
      _pid: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _rewardPerSeconds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address,bool,bool)"(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unitroller(overrides?: CallOverrides): Promise<BigNumber>;

    "unitroller()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateAndGetUserInfo(
      _pid: BigNumberish,
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateAndGetUserInfo(uint256,address)"(
      _pid: BigNumberish,
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMultiplePools(
      account: string,
      _pids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateMultiplePools(address,uint256[])"(
      account: string,
      _pids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePool(
      _pid: BigNumberish,
      _endTime: BigNumberish,
      _rewardPerSeconds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updatePool(uint256,uint32,uint256[])"(
      _pid: BigNumberish,
      _endTime: BigNumberish,
      _rewardPerSeconds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePoolRewards(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updatePoolRewards(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawAll(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPool(
      _stakeToken: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _rewardPerSeconds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addPool(address,uint32,uint32,uint256[])"(
      _stakeToken: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _rewardPerSeconds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPoolInfo(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPoolInfo(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getRewardTokens()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserInfo(
      _pid: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserInfo(uint256,address)"(
      _pid: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvest(
      account: string,
      _pid: BigNumberish,
      _maxAmountOfPlyToHarvest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "harvest(address,uint256,uint256)"(
      account: string,
      _pid: BigNumberish,
      _maxAmountOfPlyToHarvest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerWithdraw(
      rewardTokenIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "ownerWithdraw(uint256,uint256)"(
      rewardTokenIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingRewards(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingRewards(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolExists(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolExists(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pulp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pulp()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renewPool(
      _pid: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _rewardPerSeconds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renewPool(uint256,uint32,uint32,uint256[])"(
      _pid: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _rewardPerSeconds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address,bool,bool)"(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unitroller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "unitroller()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateAndGetUserInfo(
      _pid: BigNumberish,
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateAndGetUserInfo(uint256,address)"(
      _pid: BigNumberish,
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMultiplePools(
      account: string,
      _pids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateMultiplePools(address,uint256[])"(
      account: string,
      _pids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePool(
      _pid: BigNumberish,
      _endTime: BigNumberish,
      _rewardPerSeconds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updatePool(uint256,uint32,uint256[])"(
      _pid: BigNumberish,
      _endTime: BigNumberish,
      _rewardPerSeconds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePoolRewards(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updatePoolRewards(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawAll(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
