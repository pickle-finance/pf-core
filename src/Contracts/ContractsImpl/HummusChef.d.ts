/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface HummusChefInterface extends ethers.utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "add(uint256,address,address)": FunctionFragment;
    "claimableHum(uint256,address)": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "depositFor(uint256,uint256,address)": FunctionFragment;
    "dialutingRepartition()": FunctionFragment;
    "emergencyHumWithdraw()": FunctionFragment;
    "emergencyWithdraw(uint256)": FunctionFragment;
    "hum()": FunctionFragment;
    "humPerSec()": FunctionFragment;
    "initialize(address,address,uint256,uint256,uint256)": FunctionFragment;
    "massUpdatePools()": FunctionFragment;
    "maxPoolLength()": FunctionFragment;
    "migrate(uint256[])": FunctionFragment;
    "multiClaim(uint256[])": FunctionFragment;
    "newMasterHummus()": FunctionFragment;
    "nonDialutingRepartition()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerCandidate()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingTokens(uint256,address)": FunctionFragment;
    "poolAdjustFactor(uint256)": FunctionFragment;
    "poolInfo(uint256)": FunctionFragment;
    "poolLength()": FunctionFragment;
    "proposeOwner(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewarderBonusTokenInfo(uint256)": FunctionFragment;
    "set(uint256,uint256,address,bool)": FunctionFragment;
    "setMaxPoolLength(uint256)": FunctionFragment;
    "setNewMasterHummus(address)": FunctionFragment;
    "setVeHum(address)": FunctionFragment;
    "startTimestamp()": FunctionFragment;
    "totalAdjustedAllocPoint()": FunctionFragment;
    "totalBaseAllocPoint()": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateEmissionRate(uint256)": FunctionFragment;
    "updateEmissionRepartition(uint256)": FunctionFragment;
    "updateFactor(address,uint256)": FunctionFragment;
    "updatePool(uint256)": FunctionFragment;
    "userInfo(uint256,address)": FunctionFragment;
    "veHum()": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "add",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableHum",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFor",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "dialutingRepartition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyHumWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "hum", values?: undefined): string;
  encodeFunctionData(functionFragment: "humPerSec", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "massUpdatePools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxPoolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "multiClaim",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "newMasterHummus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nonDialutingRepartition",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerCandidate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingTokens",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolAdjustFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposeOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewarderBonusTokenInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [BigNumberish, BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPoolLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNewMasterHummus",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setVeHum", values: [string]): string;
  encodeFunctionData(
    functionFragment: "startTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAdjustedAllocPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBaseAllocPoint",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateEmissionRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEmissionRepartition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFactor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "veHum", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimableHum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dialutingRepartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyHumWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hum", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "humPerSec", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "massUpdatePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPoolLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multiClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newMasterHummus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonDialutingRepartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolAdjustFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewarderBonusTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPoolLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNewMasterHummus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVeHum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAdjustedAllocPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBaseAllocPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateEmissionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEmissionRepartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "veHum", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Add(uint256,uint256,address,address)": EventFragment;
    "Deposit(address,uint256,uint256)": EventFragment;
    "DepositFor(address,uint256,uint256)": EventFragment;
    "EmergencyWithdraw(address,uint256,uint256)": EventFragment;
    "Harvest(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Set(uint256,uint256,address,bool)": EventFragment;
    "Unpaused(address)": EventFragment;
    "UpdateEmissionRate(address,uint256)": EventFragment;
    "UpdateEmissionRepartition(address,uint256,uint256)": EventFragment;
    "UpdatePool(uint256,uint256,uint256,uint256)": EventFragment;
    "UpdateVeHUM(address,address,address)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Add"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositFor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Harvest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Set"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateEmissionRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateEmissionRepartition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateVeHUM"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class HummusChef extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: HummusChefInterface;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "acceptOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    add(
      _baseAllocPoint: BigNumberish,
      _lpToken: string,
      _rewarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "add(uint256,address,address)"(
      _baseAllocPoint: BigNumberish,
      _lpToken: string,
      _rewarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimableHum(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "claimableHum(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositFor(
      _pid: BigNumberish,
      _amount: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "depositFor(uint256,uint256,address)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dialutingRepartition(overrides?: CallOverrides): Promise<[BigNumber]>;

    "dialutingRepartition()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyHumWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "emergencyHumWithdraw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hum(overrides?: CallOverrides): Promise<[string]>;

    "hum()"(overrides?: CallOverrides): Promise<[string]>;

    humPerSec(overrides?: CallOverrides): Promise<[BigNumber]>;

    "humPerSec()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _hum: string,
      _veHum: string,
      _humPerSec: BigNumberish,
      _dialutingRepartition: BigNumberish,
      _startTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address,address,uint256,uint256,uint256)"(
      _hum: string,
      _veHum: string,
      _humPerSec: BigNumberish,
      _dialutingRepartition: BigNumberish,
      _startTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    massUpdatePools(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "massUpdatePools()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxPoolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxPoolLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    migrate(
      _pids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "migrate(uint256[])"(
      _pids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multiClaim(
      _pids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "multiClaim(uint256[])"(
      _pids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    newMasterHummus(overrides?: CallOverrides): Promise<[string]>;

    "newMasterHummus()"(overrides?: CallOverrides): Promise<[string]>;

    nonDialutingRepartition(overrides?: CallOverrides): Promise<[BigNumber]>;

    "nonDialutingRepartition()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    ownerCandidate(overrides?: CallOverrides): Promise<[string]>;

    "ownerCandidate()"(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    pendingTokens(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber] & {
        pendingHum: BigNumber;
        bonusTokenAddress: string;
        bonusTokenSymbol: string;
        pendingBonusToken: BigNumber;
      }
    >;

    "pendingTokens(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber] & {
        pendingHum: BigNumber;
        bonusTokenAddress: string;
        bonusTokenSymbol: string;
        pendingBonusToken: BigNumber;
      }
    >;

    poolAdjustFactor(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "poolAdjustFactor(uint256)"(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        lpToken: string;
        baseAllocPoint: BigNumber;
        lastRewardTimestamp: BigNumber;
        accHumPerShare: BigNumber;
        rewarder: string;
        sumOfFactors: BigNumber;
        accHumPerFactorShare: BigNumber;
        adjustedAllocPoint: BigNumber;
      }
    >;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        lpToken: string;
        baseAllocPoint: BigNumber;
        lastRewardTimestamp: BigNumber;
        accHumPerShare: BigNumber;
        rewarder: string;
        sumOfFactors: BigNumber;
        accHumPerFactorShare: BigNumber;
        adjustedAllocPoint: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "poolLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposeOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "proposeOwner(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewarderBonusTokenInfo(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { bonusTokenAddress: string; bonusTokenSymbol: string }
    >;

    "rewarderBonusTokenInfo(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { bonusTokenAddress: string; bonusTokenSymbol: string }
    >;

    set(
      _pid: BigNumberish,
      _baseAllocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "set(uint256,uint256,address,bool)"(
      _pid: BigNumberish,
      _baseAllocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxPoolLength(
      _maxPoolLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMaxPoolLength(uint256)"(
      _maxPoolLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNewMasterHummus(
      _newMasterHummus: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setNewMasterHummus(address)"(
      _newMasterHummus: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVeHum(
      _newVeHum: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setVeHum(address)"(
      _newVeHum: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    "startTimestamp()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalAdjustedAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalAdjustedAllocPoint()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalBaseAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalBaseAllocPoint()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateEmissionRate(
      _humPerSec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateEmissionRate(uint256)"(
      _humPerSec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateEmissionRepartition(
      _dialutingRepartition: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateEmissionRepartition(uint256)"(
      _dialutingRepartition: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFactor(
      _user: string,
      _newVeHumBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateFactor(address,uint256)"(
      _user: string,
      _newVeHumBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        factor: BigNumber;
      }
    >;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        factor: BigNumber;
      }
    >;

    veHum(overrides?: CallOverrides): Promise<[string]>;

    "veHum()"(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "acceptOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  add(
    _baseAllocPoint: BigNumberish,
    _lpToken: string,
    _rewarder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "add(uint256,address,address)"(
    _baseAllocPoint: BigNumberish,
    _lpToken: string,
    _rewarder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimableHum(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "claimableHum(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deposit(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit(uint256,uint256)"(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositFor(
    _pid: BigNumberish,
    _amount: BigNumberish,
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "depositFor(uint256,uint256,address)"(
    _pid: BigNumberish,
    _amount: BigNumberish,
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dialutingRepartition(overrides?: CallOverrides): Promise<BigNumber>;

  "dialutingRepartition()"(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyHumWithdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "emergencyHumWithdraw()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "emergencyWithdraw(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hum(overrides?: CallOverrides): Promise<string>;

  "hum()"(overrides?: CallOverrides): Promise<string>;

  humPerSec(overrides?: CallOverrides): Promise<BigNumber>;

  "humPerSec()"(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _hum: string,
    _veHum: string,
    _humPerSec: BigNumberish,
    _dialutingRepartition: BigNumberish,
    _startTimestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address,address,uint256,uint256,uint256)"(
    _hum: string,
    _veHum: string,
    _humPerSec: BigNumberish,
    _dialutingRepartition: BigNumberish,
    _startTimestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  massUpdatePools(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "massUpdatePools()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxPoolLength(overrides?: CallOverrides): Promise<BigNumber>;

  "maxPoolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  migrate(
    _pids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "migrate(uint256[])"(
    _pids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multiClaim(
    _pids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "multiClaim(uint256[])"(
    _pids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  newMasterHummus(overrides?: CallOverrides): Promise<string>;

  "newMasterHummus()"(overrides?: CallOverrides): Promise<string>;

  nonDialutingRepartition(overrides?: CallOverrides): Promise<BigNumber>;

  "nonDialutingRepartition()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  ownerCandidate(overrides?: CallOverrides): Promise<string>;

  "ownerCandidate()"(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pause()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  pendingTokens(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, BigNumber] & {
      pendingHum: BigNumber;
      bonusTokenAddress: string;
      bonusTokenSymbol: string;
      pendingBonusToken: BigNumber;
    }
  >;

  "pendingTokens(uint256,address)"(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, BigNumber] & {
      pendingHum: BigNumber;
      bonusTokenAddress: string;
      bonusTokenSymbol: string;
      pendingBonusToken: BigNumber;
    }
  >;

  poolAdjustFactor(
    pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "poolAdjustFactor(uint256)"(
    pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      lpToken: string;
      baseAllocPoint: BigNumber;
      lastRewardTimestamp: BigNumber;
      accHumPerShare: BigNumber;
      rewarder: string;
      sumOfFactors: BigNumber;
      accHumPerFactorShare: BigNumber;
      adjustedAllocPoint: BigNumber;
    }
  >;

  "poolInfo(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      lpToken: string;
      baseAllocPoint: BigNumber;
      lastRewardTimestamp: BigNumber;
      accHumPerShare: BigNumber;
      rewarder: string;
      sumOfFactors: BigNumber;
      accHumPerFactorShare: BigNumber;
      adjustedAllocPoint: BigNumber;
    }
  >;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  proposeOwner(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "proposeOwner(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewarderBonusTokenInfo(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string] & { bonusTokenAddress: string; bonusTokenSymbol: string }
  >;

  "rewarderBonusTokenInfo(uint256)"(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string] & { bonusTokenAddress: string; bonusTokenSymbol: string }
  >;

  set(
    _pid: BigNumberish,
    _baseAllocPoint: BigNumberish,
    _rewarder: string,
    overwrite: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "set(uint256,uint256,address,bool)"(
    _pid: BigNumberish,
    _baseAllocPoint: BigNumberish,
    _rewarder: string,
    overwrite: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxPoolLength(
    _maxPoolLength: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMaxPoolLength(uint256)"(
    _maxPoolLength: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNewMasterHummus(
    _newMasterHummus: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setNewMasterHummus(address)"(
    _newMasterHummus: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVeHum(
    _newVeHum: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setVeHum(address)"(
    _newVeHum: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  "startTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalAdjustedAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  "totalAdjustedAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalBaseAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  "totalBaseAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unpause()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateEmissionRate(
    _humPerSec: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateEmissionRate(uint256)"(
    _humPerSec: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateEmissionRepartition(
    _dialutingRepartition: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateEmissionRepartition(uint256)"(
    _dialutingRepartition: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFactor(
    _user: string,
    _newVeHumBalance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateFactor(address,uint256)"(
    _user: string,
    _newVeHumBalance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePool(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updatePool(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      rewardDebt: BigNumber;
      factor: BigNumber;
    }
  >;

  "userInfo(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      rewardDebt: BigNumber;
      factor: BigNumber;
    }
  >;

  veHum(overrides?: CallOverrides): Promise<string>;

  "veHum()"(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(uint256,uint256)"(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    "acceptOwnership()"(overrides?: CallOverrides): Promise<void>;

    add(
      _baseAllocPoint: BigNumberish,
      _lpToken: string,
      _rewarder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "add(uint256,address,address)"(
      _baseAllocPoint: BigNumberish,
      _lpToken: string,
      _rewarder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimableHum(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimableHum(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "deposit(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    depositFor(
      _pid: BigNumberish,
      _amount: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositFor(uint256,uint256,address)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    dialutingRepartition(overrides?: CallOverrides): Promise<BigNumber>;

    "dialutingRepartition()"(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyHumWithdraw(overrides?: CallOverrides): Promise<void>;

    "emergencyHumWithdraw()"(overrides?: CallOverrides): Promise<void>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    hum(overrides?: CallOverrides): Promise<string>;

    "hum()"(overrides?: CallOverrides): Promise<string>;

    humPerSec(overrides?: CallOverrides): Promise<BigNumber>;

    "humPerSec()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _hum: string,
      _veHum: string,
      _humPerSec: BigNumberish,
      _dialutingRepartition: BigNumberish,
      _startTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,uint256,uint256,uint256)"(
      _hum: string,
      _veHum: string,
      _humPerSec: BigNumberish,
      _dialutingRepartition: BigNumberish,
      _startTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    massUpdatePools(overrides?: CallOverrides): Promise<void>;

    "massUpdatePools()"(overrides?: CallOverrides): Promise<void>;

    maxPoolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "maxPoolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    migrate(_pids: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    "migrate(uint256[])"(
      _pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    multiClaim(
      _pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber[], BigNumber[]]>;

    "multiClaim(uint256[])"(
      _pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber[], BigNumber[]]>;

    newMasterHummus(overrides?: CallOverrides): Promise<string>;

    "newMasterHummus()"(overrides?: CallOverrides): Promise<string>;

    nonDialutingRepartition(overrides?: CallOverrides): Promise<BigNumber>;

    "nonDialutingRepartition()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    ownerCandidate(overrides?: CallOverrides): Promise<string>;

    "ownerCandidate()"(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    "pause()"(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    pendingTokens(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber] & {
        pendingHum: BigNumber;
        bonusTokenAddress: string;
        bonusTokenSymbol: string;
        pendingBonusToken: BigNumber;
      }
    >;

    "pendingTokens(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber] & {
        pendingHum: BigNumber;
        bonusTokenAddress: string;
        bonusTokenSymbol: string;
        pendingBonusToken: BigNumber;
      }
    >;

    poolAdjustFactor(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolAdjustFactor(uint256)"(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        lpToken: string;
        baseAllocPoint: BigNumber;
        lastRewardTimestamp: BigNumber;
        accHumPerShare: BigNumber;
        rewarder: string;
        sumOfFactors: BigNumber;
        accHumPerFactorShare: BigNumber;
        adjustedAllocPoint: BigNumber;
      }
    >;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        lpToken: string;
        baseAllocPoint: BigNumber;
        lastRewardTimestamp: BigNumber;
        accHumPerShare: BigNumber;
        rewarder: string;
        sumOfFactors: BigNumber;
        accHumPerFactorShare: BigNumber;
        adjustedAllocPoint: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposeOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    "proposeOwner(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rewarderBonusTokenInfo(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { bonusTokenAddress: string; bonusTokenSymbol: string }
    >;

    "rewarderBonusTokenInfo(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { bonusTokenAddress: string; bonusTokenSymbol: string }
    >;

    set(
      _pid: BigNumberish,
      _baseAllocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "set(uint256,uint256,address,bool)"(
      _pid: BigNumberish,
      _baseAllocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPoolLength(
      _maxPoolLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxPoolLength(uint256)"(
      _maxPoolLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNewMasterHummus(
      _newMasterHummus: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setNewMasterHummus(address)"(
      _newMasterHummus: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setVeHum(_newVeHum: string, overrides?: CallOverrides): Promise<void>;

    "setVeHum(address)"(
      _newVeHum: string,
      overrides?: CallOverrides
    ): Promise<void>;

    startTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "startTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalAdjustedAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAdjustedAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalBaseAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBaseAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    "unpause()"(overrides?: CallOverrides): Promise<void>;

    updateEmissionRate(
      _humPerSec: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateEmissionRate(uint256)"(
      _humPerSec: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateEmissionRepartition(
      _dialutingRepartition: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateEmissionRepartition(uint256)"(
      _dialutingRepartition: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFactor(
      _user: string,
      _newVeHumBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateFactor(address,uint256)"(
      _user: string,
      _newVeHumBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePool(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        factor: BigNumber;
      }
    >;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        factor: BigNumber;
      }
    >;

    veHum(overrides?: CallOverrides): Promise<string>;

    "veHum()"(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;
  };

  filters: {
    Add(
      pid: BigNumberish | null,
      baseAllocPoint: null,
      lpToken: string | null,
      rewarder: string | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, string],
      {
        pid: BigNumber;
        baseAllocPoint: BigNumber;
        lpToken: string;
        rewarder: string;
      }
    >;

    Deposit(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amount: BigNumber }
    >;

    DepositFor(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amount: BigNumber }
    >;

    EmergencyWithdraw(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amount: BigNumber }
    >;

    Harvest(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amount: BigNumber }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Paused(account: null): TypedEventFilter<[string], { account: string }>;

    Set(
      pid: BigNumberish | null,
      baseAllocPoint: null,
      rewarder: string | null,
      overwrite: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, boolean],
      {
        pid: BigNumber;
        baseAllocPoint: BigNumber;
        rewarder: string;
        overwrite: boolean;
      }
    >;

    Unpaused(account: null): TypedEventFilter<[string], { account: string }>;

    UpdateEmissionRate(
      user: string | null,
      humPerSec: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; humPerSec: BigNumber }
    >;

    UpdateEmissionRepartition(
      user: string | null,
      dialutingRepartition: null,
      nonDialutingRepartition: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        user: string;
        dialutingRepartition: BigNumber;
        nonDialutingRepartition: BigNumber;
      }
    >;

    UpdatePool(
      pid: BigNumberish | null,
      lastRewardTimestamp: null,
      lpSupply: null,
      accHumPerShare: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        pid: BigNumber;
        lastRewardTimestamp: BigNumber;
        lpSupply: BigNumber;
        accHumPerShare: BigNumber;
      }
    >;

    UpdateVeHUM(
      user: string | null,
      oldVeHUM: null,
      newVeHUM: null
    ): TypedEventFilter<
      [string, string, string],
      { user: string; oldVeHUM: string; newVeHUM: string }
    >;

    Withdraw(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amount: BigNumber }
    >;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "acceptOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    add(
      _baseAllocPoint: BigNumberish,
      _lpToken: string,
      _rewarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "add(uint256,address,address)"(
      _baseAllocPoint: BigNumberish,
      _lpToken: string,
      _rewarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimableHum(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimableHum(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositFor(
      _pid: BigNumberish,
      _amount: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "depositFor(uint256,uint256,address)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dialutingRepartition(overrides?: CallOverrides): Promise<BigNumber>;

    "dialutingRepartition()"(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyHumWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "emergencyHumWithdraw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hum(overrides?: CallOverrides): Promise<BigNumber>;

    "hum()"(overrides?: CallOverrides): Promise<BigNumber>;

    humPerSec(overrides?: CallOverrides): Promise<BigNumber>;

    "humPerSec()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _hum: string,
      _veHum: string,
      _humPerSec: BigNumberish,
      _dialutingRepartition: BigNumberish,
      _startTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address,address,uint256,uint256,uint256)"(
      _hum: string,
      _veHum: string,
      _humPerSec: BigNumberish,
      _dialutingRepartition: BigNumberish,
      _startTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    massUpdatePools(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "massUpdatePools()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxPoolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "maxPoolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    migrate(
      _pids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "migrate(uint256[])"(
      _pids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multiClaim(
      _pids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "multiClaim(uint256[])"(
      _pids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    newMasterHummus(overrides?: CallOverrides): Promise<BigNumber>;

    "newMasterHummus()"(overrides?: CallOverrides): Promise<BigNumber>;

    nonDialutingRepartition(overrides?: CallOverrides): Promise<BigNumber>;

    "nonDialutingRepartition()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    ownerCandidate(overrides?: CallOverrides): Promise<BigNumber>;

    "ownerCandidate()"(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingTokens(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingTokens(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolAdjustFactor(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolAdjustFactor(uint256)"(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposeOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "proposeOwner(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewarderBonusTokenInfo(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewarderBonusTokenInfo(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    set(
      _pid: BigNumberish,
      _baseAllocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "set(uint256,uint256,address,bool)"(
      _pid: BigNumberish,
      _baseAllocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxPoolLength(
      _maxPoolLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMaxPoolLength(uint256)"(
      _maxPoolLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNewMasterHummus(
      _newMasterHummus: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setNewMasterHummus(address)"(
      _newMasterHummus: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVeHum(
      _newVeHum: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setVeHum(address)"(
      _newVeHum: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "startTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalAdjustedAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAdjustedAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalBaseAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBaseAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateEmissionRate(
      _humPerSec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateEmissionRate(uint256)"(
      _humPerSec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateEmissionRepartition(
      _dialutingRepartition: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateEmissionRepartition(uint256)"(
      _dialutingRepartition: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFactor(
      _user: string,
      _newVeHumBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateFactor(address,uint256)"(
      _user: string,
      _newVeHumBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    veHum(overrides?: CallOverrides): Promise<BigNumber>;

    "veHum()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "acceptOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    add(
      _baseAllocPoint: BigNumberish,
      _lpToken: string,
      _rewarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "add(uint256,address,address)"(
      _baseAllocPoint: BigNumberish,
      _lpToken: string,
      _rewarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimableHum(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimableHum(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositFor(
      _pid: BigNumberish,
      _amount: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "depositFor(uint256,uint256,address)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dialutingRepartition(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "dialutingRepartition()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyHumWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "emergencyHumWithdraw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "hum()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    humPerSec(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "humPerSec()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _hum: string,
      _veHum: string,
      _humPerSec: BigNumberish,
      _dialutingRepartition: BigNumberish,
      _startTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,uint256,uint256,uint256)"(
      _hum: string,
      _veHum: string,
      _humPerSec: BigNumberish,
      _dialutingRepartition: BigNumberish,
      _startTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    massUpdatePools(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "massUpdatePools()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxPoolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxPoolLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrate(
      _pids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "migrate(uint256[])"(
      _pids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multiClaim(
      _pids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "multiClaim(uint256[])"(
      _pids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    newMasterHummus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "newMasterHummus()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonDialutingRepartition(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonDialutingRepartition()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerCandidate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ownerCandidate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingTokens(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingTokens(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolAdjustFactor(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolAdjustFactor(uint256)"(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "proposeOwner(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewarderBonusTokenInfo(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewarderBonusTokenInfo(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    set(
      _pid: BigNumberish,
      _baseAllocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "set(uint256,uint256,address,bool)"(
      _pid: BigNumberish,
      _baseAllocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPoolLength(
      _maxPoolLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMaxPoolLength(uint256)"(
      _maxPoolLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNewMasterHummus(
      _newMasterHummus: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setNewMasterHummus(address)"(
      _newMasterHummus: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVeHum(
      _newVeHum: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setVeHum(address)"(
      _newVeHum: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "startTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalAdjustedAllocPoint(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalAdjustedAllocPoint()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalBaseAllocPoint(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalBaseAllocPoint()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateEmissionRate(
      _humPerSec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateEmissionRate(uint256)"(
      _humPerSec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateEmissionRepartition(
      _dialutingRepartition: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateEmissionRepartition(uint256)"(
      _dialutingRepartition: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFactor(
      _user: string,
      _newVeHumBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateFactor(address,uint256)"(
      _user: string,
      _newVeHumBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    veHum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "veHum()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
