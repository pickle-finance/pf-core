/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface RaiderRewardsInterface extends ethers.utils.Interface {
  functions: {
    "addressStakedBalance(address)": FunctionFragment;
    "bigMultiplier()": FunctionFragment;
    "createStake(uint256)": FunctionFragment;
    "dailyEmissionsRate()": FunctionFragment;
    "depositRewards(uint256)": FunctionFragment;
    "emergencyUnstake(uint256)": FunctionFragment;
    "getRewards()": FunctionFragment;
    "isStaker(address)": FunctionFragment;
    "lastRewardTime()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "removeStake(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardsBalance()": FunctionFragment;
    "setDailyEmissions(uint256)": FunctionFragment;
    "showBigRewardsPerToken()": FunctionFragment;
    "showBigUserRewardsCollected()": FunctionFragment;
    "showRewardToken()": FunctionFragment;
    "showStakingToken()": FunctionFragment;
    "timeSinceLastReward()": FunctionFragment;
    "totalStakedSupply()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateBigRewardsPerToken()": FunctionFragment;
    "userPendingRewards(address)": FunctionFragment;
    "withdrawRewards(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addressStakedBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "bigMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dailyEmissionsRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyUnstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewards",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isStaker", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lastRewardTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDailyEmissions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "showBigRewardsPerToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "showBigUserRewardsCollected",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "showRewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "showStakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeSinceLastReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakedSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateBigRewardsPerToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userPendingRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRewards",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addressStakedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bigMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailyEmissionsRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyUnstake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isStaker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastRewardTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDailyEmissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "showBigRewardsPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "showBigUserRewardsCollected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "showRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "showStakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeSinceLastReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakedSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateBigRewardsPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRewards",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RewardAdded(uint256)": EventFragment;
    "RewardPaid(address,uint256)": EventFragment;
    "Staked(address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Withdrawn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export class RaiderRewards extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RaiderRewardsInterface;

  functions: {
    addressStakedBalance(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "addressStakedBalance(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bigMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    "bigMultiplier()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    createStake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createStake(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dailyEmissionsRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "dailyEmissionsRate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositRewards(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "depositRewards(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyUnstake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "emergencyUnstake(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "getRewards()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isStaker(_address: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isStaker(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastRewardTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastRewardTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    removeStake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeStake(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardsBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "rewardsBalance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    setDailyEmissions(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setDailyEmissions(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    showBigRewardsPerToken(overrides?: CallOverrides): Promise<[BigNumber]>;

    "showBigRewardsPerToken()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    showBigUserRewardsCollected(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "showBigUserRewardsCollected()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    showRewardToken(overrides?: CallOverrides): Promise<[string]>;

    "showRewardToken()"(overrides?: CallOverrides): Promise<[string]>;

    showStakingToken(overrides?: CallOverrides): Promise<[string]>;

    "showStakingToken()"(overrides?: CallOverrides): Promise<[string]>;

    timeSinceLastReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    "timeSinceLastReward()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStakedSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalStakedSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateBigRewardsPerToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateBigRewardsPerToken()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userPendingRewards(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "userPendingRewards(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawRewards(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawRewards(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addressStakedBalance(
    _address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "addressStakedBalance(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bigMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  "bigMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

  createStake(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createStake(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dailyEmissionsRate(overrides?: CallOverrides): Promise<BigNumber>;

  "dailyEmissionsRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  depositRewards(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "depositRewards(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyUnstake(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "emergencyUnstake(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "getRewards()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isStaker(_address: string, overrides?: CallOverrides): Promise<boolean>;

  "isStaker(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastRewardTime(overrides?: CallOverrides): Promise<BigNumber>;

  "lastRewardTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pause()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  removeStake(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeStake(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardsBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardsBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  setDailyEmissions(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setDailyEmissions(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  showBigRewardsPerToken(overrides?: CallOverrides): Promise<BigNumber>;

  "showBigRewardsPerToken()"(overrides?: CallOverrides): Promise<BigNumber>;

  showBigUserRewardsCollected(overrides?: CallOverrides): Promise<BigNumber>;

  "showBigUserRewardsCollected()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  showRewardToken(overrides?: CallOverrides): Promise<string>;

  "showRewardToken()"(overrides?: CallOverrides): Promise<string>;

  showStakingToken(overrides?: CallOverrides): Promise<string>;

  "showStakingToken()"(overrides?: CallOverrides): Promise<string>;

  timeSinceLastReward(overrides?: CallOverrides): Promise<BigNumber>;

  "timeSinceLastReward()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalStakedSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalStakedSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unpause()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateBigRewardsPerToken(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateBigRewardsPerToken()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userPendingRewards(
    _address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userPendingRewards(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawRewards(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawRewards(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addressStakedBalance(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addressStakedBalance(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bigMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "bigMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    createStake(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createStake(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    dailyEmissionsRate(overrides?: CallOverrides): Promise<BigNumber>;

    "dailyEmissionsRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    depositRewards(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositRewards(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyUnstake(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "emergencyUnstake(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getRewards(overrides?: CallOverrides): Promise<void>;

    "getRewards()"(overrides?: CallOverrides): Promise<void>;

    isStaker(_address: string, overrides?: CallOverrides): Promise<boolean>;

    "isStaker(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastRewardTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lastRewardTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    "pause()"(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    removeStake(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeStake(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rewardsBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    setDailyEmissions(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDailyEmissions(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    showBigRewardsPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    "showBigRewardsPerToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    showBigUserRewardsCollected(overrides?: CallOverrides): Promise<BigNumber>;

    "showBigUserRewardsCollected()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    showRewardToken(overrides?: CallOverrides): Promise<string>;

    "showRewardToken()"(overrides?: CallOverrides): Promise<string>;

    showStakingToken(overrides?: CallOverrides): Promise<string>;

    "showStakingToken()"(overrides?: CallOverrides): Promise<string>;

    timeSinceLastReward(overrides?: CallOverrides): Promise<BigNumber>;

    "timeSinceLastReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalStakedSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    "unpause()"(overrides?: CallOverrides): Promise<void>;

    updateBigRewardsPerToken(overrides?: CallOverrides): Promise<void>;

    "updateBigRewardsPerToken()"(overrides?: CallOverrides): Promise<void>;

    userPendingRewards(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userPendingRewards(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawRewards(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawRewards(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Paused(account: null): TypedEventFilter<[string], { account: string }>;

    RewardAdded(
      reward: null
    ): TypedEventFilter<[BigNumber], { reward: BigNumber }>;

    RewardPaid(
      user: string | null,
      reward: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; reward: BigNumber }
    >;

    Staked(
      user: string | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    Unpaused(account: null): TypedEventFilter<[string], { account: string }>;

    Withdrawn(
      user: string | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    addressStakedBalance(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addressStakedBalance(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bigMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "bigMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    createStake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createStake(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dailyEmissionsRate(overrides?: CallOverrides): Promise<BigNumber>;

    "dailyEmissionsRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    depositRewards(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "depositRewards(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyUnstake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "emergencyUnstake(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "getRewards()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isStaker(_address: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isStaker(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastRewardTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lastRewardTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeStake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeStake(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardsBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    setDailyEmissions(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setDailyEmissions(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    showBigRewardsPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    "showBigRewardsPerToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    showBigUserRewardsCollected(overrides?: CallOverrides): Promise<BigNumber>;

    "showBigUserRewardsCollected()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    showRewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    "showRewardToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    showStakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    "showStakingToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    timeSinceLastReward(overrides?: CallOverrides): Promise<BigNumber>;

    "timeSinceLastReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalStakedSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateBigRewardsPerToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateBigRewardsPerToken()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userPendingRewards(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userPendingRewards(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawRewards(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawRewards(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addressStakedBalance(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "addressStakedBalance(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bigMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bigMultiplier()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createStake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createStake(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dailyEmissionsRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "dailyEmissionsRate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositRewards(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "depositRewards(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyUnstake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "emergencyUnstake(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "getRewards()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isStaker(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isStaker(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastRewardTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastRewardTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeStake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeStake(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardsBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardsBalance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDailyEmissions(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setDailyEmissions(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    showBigRewardsPerToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "showBigRewardsPerToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    showBigUserRewardsCollected(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "showBigUserRewardsCollected()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    showRewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "showRewardToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    showStakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "showStakingToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timeSinceLastReward(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "timeSinceLastReward()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStakedSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalStakedSupply()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateBigRewardsPerToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateBigRewardsPerToken()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userPendingRewards(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userPendingRewards(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawRewards(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawRewards(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
