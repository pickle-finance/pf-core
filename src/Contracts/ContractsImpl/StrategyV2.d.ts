/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface StrategyV2Interface extends ethers.utils.Interface {
  functions: {
    "activeRewardsTokens(uint256)": FunctionFragment;
    "addToNativeRoute(tuple[])": FunctionFragment;
    "balanceOf()": FunctionFragment;
    "balanceOfPool()": FunctionFragment;
    "balanceOfWant()": FunctionFragment;
    "controller()": FunctionFragment;
    "deactivateReward(address)": FunctionFragment;
    "deposit()": FunctionFragment;
    "execute(address,bytes)": FunctionFragment;
    "gauge()": FunctionFragment;
    "getActiveRewardsTokens()": FunctionFragment;
    "getHarvestable()": FunctionFragment;
    "getName()": FunctionFragment;
    "governance()": FunctionFragment;
    "harvest()": FunctionFragment;
    "harvesters(address)": FunctionFragment;
    "isStablePool()": FunctionFragment;
    "native()": FunctionFragment;
    "nativeToTokenRoutes(address,uint256)": FunctionFragment;
    "performanceDevFee()": FunctionFragment;
    "performanceDevMax()": FunctionFragment;
    "performanceTreasuryFee()": FunctionFragment;
    "performanceTreasuryMax()": FunctionFragment;
    "revokeHarvesters(address[])": FunctionFragment;
    "setController(address)": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "setPerformanceDevFee(uint256)": FunctionFragment;
    "setPerformanceTreasuryFee(uint256)": FunctionFragment;
    "setStrategist(address)": FunctionFragment;
    "setTimelock(address)": FunctionFragment;
    "setWithdrawalDevFundFee(uint256)": FunctionFragment;
    "setWithdrawalTreasuryFee(uint256)": FunctionFragment;
    "solidRouter()": FunctionFragment;
    "strategist()": FunctionFragment;
    "timelock()": FunctionFragment;
    "toNativeRoutes(address,uint256)": FunctionFragment;
    "token0()": FunctionFragment;
    "token1()": FunctionFragment;
    "uniV2Router()": FunctionFragment;
    "velo()": FunctionFragment;
    "want()": FunctionFragment;
    "weth()": FunctionFragment;
    "whitelistHarvesters(address[])": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawAll()": FunctionFragment;
    "withdrawForSwap(uint256)": FunctionFragment;
    "withdrawalDevFundFee()": FunctionFragment;
    "withdrawalDevFundMax()": FunctionFragment;
    "withdrawalTreasuryFee()": FunctionFragment;
    "withdrawalTreasuryMax()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "activeRewardsTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addToNativeRoute",
    values: [{ from: string; to: string; stable: boolean }[]]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOfPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfWant",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateReward",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "gauge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getActiveRewardsTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHarvestable",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "harvest", values?: undefined): string;
  encodeFunctionData(functionFragment: "harvesters", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isStablePool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "native", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nativeToTokenRoutes",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "performanceDevFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "performanceDevMax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "performanceTreasuryFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "performanceTreasuryMax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeHarvesters",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPerformanceDevFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPerformanceTreasuryFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategist",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setTimelock", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setWithdrawalDevFundFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawalTreasuryFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "solidRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "strategist",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toNativeRoutes",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token0", values?: undefined): string;
  encodeFunctionData(functionFragment: "token1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "uniV2Router",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "velo", values?: undefined): string;
  encodeFunctionData(functionFragment: "want", values?: undefined): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "whitelistHarvesters",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawForSwap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalDevFundFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalDevFundMax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalTreasuryFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalTreasuryMax",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "activeRewardsTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToNativeRoute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfWant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deactivateReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gauge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActiveRewardsTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHarvestable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "harvesters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isStablePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "native", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nativeToTokenRoutes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performanceDevFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performanceDevMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performanceTreasuryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performanceTreasuryMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeHarvesters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPerformanceDevFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPerformanceTreasuryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawalDevFundFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawalTreasuryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "solidRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toNativeRoutes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uniV2Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "velo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "want", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistHarvesters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawForSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalDevFundFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalDevFundMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalTreasuryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalTreasuryMax",
    data: BytesLike
  ): Result;

  events: {};
}

export class StrategyV2 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StrategyV2Interface;

  functions: {
    activeRewardsTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "activeRewardsTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    addToNativeRoute(
      path: { from: string; to: string; stable: boolean }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addToNativeRoute(tuple[])"(
      path: { from: string; to: string; stable: boolean }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfPool(overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOfPool()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfWant(overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOfWant()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    "controller()"(overrides?: CallOverrides): Promise<[string]>;

    deactivateReward(
      reward: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deactivateReward(address)"(
      reward: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execute(
      _target: string,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "execute(address,bytes)"(
      _target: string,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gauge(overrides?: CallOverrides): Promise<[string]>;

    "gauge()"(overrides?: CallOverrides): Promise<[string]>;

    getActiveRewardsTokens(overrides?: CallOverrides): Promise<[string[]]>;

    "getActiveRewardsTokens()"(overrides?: CallOverrides): Promise<[string[]]>;

    getHarvestable(overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

    "getHarvestable()"(
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getName(overrides?: CallOverrides): Promise<[string]>;

    "getName()"(overrides?: CallOverrides): Promise<[string]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    "governance()"(overrides?: CallOverrides): Promise<[string]>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "harvest()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    harvesters(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "harvesters(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isStablePool(overrides?: CallOverrides): Promise<[boolean]>;

    "isStablePool()"(overrides?: CallOverrides): Promise<[boolean]>;

    native(overrides?: CallOverrides): Promise<[string]>;

    "native()"(overrides?: CallOverrides): Promise<[string]>;

    nativeToTokenRoutes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean] & { from: string; to: string; stable: boolean }
    >;

    "nativeToTokenRoutes(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean] & { from: string; to: string; stable: boolean }
    >;

    performanceDevFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "performanceDevFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    performanceDevMax(overrides?: CallOverrides): Promise<[BigNumber]>;

    "performanceDevMax()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    performanceTreasuryFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "performanceTreasuryFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    performanceTreasuryMax(overrides?: CallOverrides): Promise<[BigNumber]>;

    "performanceTreasuryMax()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    revokeHarvesters(
      _harvesters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "revokeHarvesters(address[])"(
      _harvesters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setController(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setController(address)"(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPerformanceDevFee(
      _performanceDevFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setPerformanceDevFee(uint256)"(
      _performanceDevFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPerformanceTreasuryFee(
      _performanceTreasuryFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setPerformanceTreasuryFee(uint256)"(
      _performanceTreasuryFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStrategist(
      _strategist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setStrategist(address)"(
      _strategist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTimelock(
      _timelock: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTimelock(address)"(
      _timelock: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWithdrawalDevFundFee(
      _withdrawalDevFundFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setWithdrawalDevFundFee(uint256)"(
      _withdrawalDevFundFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWithdrawalTreasuryFee(
      _withdrawalTreasuryFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setWithdrawalTreasuryFee(uint256)"(
      _withdrawalTreasuryFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    solidRouter(overrides?: CallOverrides): Promise<[string]>;

    "solidRouter()"(overrides?: CallOverrides): Promise<[string]>;

    strategist(overrides?: CallOverrides): Promise<[string]>;

    "strategist()"(overrides?: CallOverrides): Promise<[string]>;

    timelock(overrides?: CallOverrides): Promise<[string]>;

    "timelock()"(overrides?: CallOverrides): Promise<[string]>;

    toNativeRoutes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean] & { from: string; to: string; stable: boolean }
    >;

    "toNativeRoutes(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean] & { from: string; to: string; stable: boolean }
    >;

    token0(overrides?: CallOverrides): Promise<[string]>;

    "token0()"(overrides?: CallOverrides): Promise<[string]>;

    token1(overrides?: CallOverrides): Promise<[string]>;

    "token1()"(overrides?: CallOverrides): Promise<[string]>;

    uniV2Router(overrides?: CallOverrides): Promise<[string]>;

    "uniV2Router()"(overrides?: CallOverrides): Promise<[string]>;

    velo(overrides?: CallOverrides): Promise<[string]>;

    "velo()"(overrides?: CallOverrides): Promise<[string]>;

    want(overrides?: CallOverrides): Promise<[string]>;

    "want()"(overrides?: CallOverrides): Promise<[string]>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    "weth()"(overrides?: CallOverrides): Promise<[string]>;

    whitelistHarvesters(
      _harvesters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "whitelistHarvesters(address[])"(
      _harvesters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(address)"(
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawAll()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawForSwap(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawForSwap(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawalDevFundFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "withdrawalDevFundFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawalDevFundMax(overrides?: CallOverrides): Promise<[BigNumber]>;

    "withdrawalDevFundMax()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawalTreasuryFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "withdrawalTreasuryFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawalTreasuryMax(overrides?: CallOverrides): Promise<[BigNumber]>;

    "withdrawalTreasuryMax()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  activeRewardsTokens(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "activeRewardsTokens(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  addToNativeRoute(
    path: { from: string; to: string; stable: boolean }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addToNativeRoute(tuple[])"(
    path: { from: string; to: string; stable: boolean }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf()"(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfPool(overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOfPool()"(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfWant(overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOfWant()"(overrides?: CallOverrides): Promise<BigNumber>;

  controller(overrides?: CallOverrides): Promise<string>;

  "controller()"(overrides?: CallOverrides): Promise<string>;

  deactivateReward(
    reward: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deactivateReward(address)"(
    reward: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execute(
    _target: string,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "execute(address,bytes)"(
    _target: string,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gauge(overrides?: CallOverrides): Promise<string>;

  "gauge()"(overrides?: CallOverrides): Promise<string>;

  getActiveRewardsTokens(overrides?: CallOverrides): Promise<string[]>;

  "getActiveRewardsTokens()"(overrides?: CallOverrides): Promise<string[]>;

  getHarvestable(overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

  "getHarvestable()"(
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  getName(overrides?: CallOverrides): Promise<string>;

  "getName()"(overrides?: CallOverrides): Promise<string>;

  governance(overrides?: CallOverrides): Promise<string>;

  "governance()"(overrides?: CallOverrides): Promise<string>;

  harvest(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "harvest()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  harvesters(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "harvesters(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isStablePool(overrides?: CallOverrides): Promise<boolean>;

  "isStablePool()"(overrides?: CallOverrides): Promise<boolean>;

  native(overrides?: CallOverrides): Promise<string>;

  "native()"(overrides?: CallOverrides): Promise<string>;

  nativeToTokenRoutes(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, boolean] & { from: string; to: string; stable: boolean }
  >;

  "nativeToTokenRoutes(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, boolean] & { from: string; to: string; stable: boolean }
  >;

  performanceDevFee(overrides?: CallOverrides): Promise<BigNumber>;

  "performanceDevFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  performanceDevMax(overrides?: CallOverrides): Promise<BigNumber>;

  "performanceDevMax()"(overrides?: CallOverrides): Promise<BigNumber>;

  performanceTreasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

  "performanceTreasuryFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  performanceTreasuryMax(overrides?: CallOverrides): Promise<BigNumber>;

  "performanceTreasuryMax()"(overrides?: CallOverrides): Promise<BigNumber>;

  revokeHarvesters(
    _harvesters: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "revokeHarvesters(address[])"(
    _harvesters: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setController(
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setController(address)"(
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGovernance(
    _governance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setGovernance(address)"(
    _governance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPerformanceDevFee(
    _performanceDevFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setPerformanceDevFee(uint256)"(
    _performanceDevFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPerformanceTreasuryFee(
    _performanceTreasuryFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setPerformanceTreasuryFee(uint256)"(
    _performanceTreasuryFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStrategist(
    _strategist: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setStrategist(address)"(
    _strategist: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTimelock(
    _timelock: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTimelock(address)"(
    _timelock: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWithdrawalDevFundFee(
    _withdrawalDevFundFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setWithdrawalDevFundFee(uint256)"(
    _withdrawalDevFundFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWithdrawalTreasuryFee(
    _withdrawalTreasuryFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setWithdrawalTreasuryFee(uint256)"(
    _withdrawalTreasuryFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  solidRouter(overrides?: CallOverrides): Promise<string>;

  "solidRouter()"(overrides?: CallOverrides): Promise<string>;

  strategist(overrides?: CallOverrides): Promise<string>;

  "strategist()"(overrides?: CallOverrides): Promise<string>;

  timelock(overrides?: CallOverrides): Promise<string>;

  "timelock()"(overrides?: CallOverrides): Promise<string>;

  toNativeRoutes(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, boolean] & { from: string; to: string; stable: boolean }
  >;

  "toNativeRoutes(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, boolean] & { from: string; to: string; stable: boolean }
  >;

  token0(overrides?: CallOverrides): Promise<string>;

  "token0()"(overrides?: CallOverrides): Promise<string>;

  token1(overrides?: CallOverrides): Promise<string>;

  "token1()"(overrides?: CallOverrides): Promise<string>;

  uniV2Router(overrides?: CallOverrides): Promise<string>;

  "uniV2Router()"(overrides?: CallOverrides): Promise<string>;

  velo(overrides?: CallOverrides): Promise<string>;

  "velo()"(overrides?: CallOverrides): Promise<string>;

  want(overrides?: CallOverrides): Promise<string>;

  "want()"(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  "weth()"(overrides?: CallOverrides): Promise<string>;

  whitelistHarvesters(
    _harvesters: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "whitelistHarvesters(address[])"(
    _harvesters: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(address)"(
    _asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawAll()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawForSwap(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawForSwap(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawalDevFundFee(overrides?: CallOverrides): Promise<BigNumber>;

  "withdrawalDevFundFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawalDevFundMax(overrides?: CallOverrides): Promise<BigNumber>;

  "withdrawalDevFundMax()"(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawalTreasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

  "withdrawalTreasuryFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawalTreasuryMax(overrides?: CallOverrides): Promise<BigNumber>;

  "withdrawalTreasuryMax()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    activeRewardsTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "activeRewardsTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    addToNativeRoute(
      path: { from: string; to: string; stable: boolean }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addToNativeRoute(tuple[])"(
      path: { from: string; to: string; stable: boolean }[],
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfPool(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOfPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfWant(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOfWant()"(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<string>;

    "controller()"(overrides?: CallOverrides): Promise<string>;

    deactivateReward(reward: string, overrides?: CallOverrides): Promise<void>;

    "deactivateReward(address)"(
      reward: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(overrides?: CallOverrides): Promise<void>;

    "deposit()"(overrides?: CallOverrides): Promise<void>;

    execute(
      _target: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "execute(address,bytes)"(
      _target: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    gauge(overrides?: CallOverrides): Promise<string>;

    "gauge()"(overrides?: CallOverrides): Promise<string>;

    getActiveRewardsTokens(overrides?: CallOverrides): Promise<string[]>;

    "getActiveRewardsTokens()"(overrides?: CallOverrides): Promise<string[]>;

    getHarvestable(overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

    "getHarvestable()"(
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getName(overrides?: CallOverrides): Promise<string>;

    "getName()"(overrides?: CallOverrides): Promise<string>;

    governance(overrides?: CallOverrides): Promise<string>;

    "governance()"(overrides?: CallOverrides): Promise<string>;

    harvest(overrides?: CallOverrides): Promise<void>;

    "harvest()"(overrides?: CallOverrides): Promise<void>;

    harvesters(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "harvesters(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isStablePool(overrides?: CallOverrides): Promise<boolean>;

    "isStablePool()"(overrides?: CallOverrides): Promise<boolean>;

    native(overrides?: CallOverrides): Promise<string>;

    "native()"(overrides?: CallOverrides): Promise<string>;

    nativeToTokenRoutes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean] & { from: string; to: string; stable: boolean }
    >;

    "nativeToTokenRoutes(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean] & { from: string; to: string; stable: boolean }
    >;

    performanceDevFee(overrides?: CallOverrides): Promise<BigNumber>;

    "performanceDevFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    performanceDevMax(overrides?: CallOverrides): Promise<BigNumber>;

    "performanceDevMax()"(overrides?: CallOverrides): Promise<BigNumber>;

    performanceTreasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

    "performanceTreasuryFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    performanceTreasuryMax(overrides?: CallOverrides): Promise<BigNumber>;

    "performanceTreasuryMax()"(overrides?: CallOverrides): Promise<BigNumber>;

    revokeHarvesters(
      _harvesters: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeHarvesters(address[])"(
      _harvesters: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setController(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setController(address)"(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernance(
      _governance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPerformanceDevFee(
      _performanceDevFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPerformanceDevFee(uint256)"(
      _performanceDevFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPerformanceTreasuryFee(
      _performanceTreasuryFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPerformanceTreasuryFee(uint256)"(
      _performanceTreasuryFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrategist(
      _strategist: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setStrategist(address)"(
      _strategist: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTimelock(_timelock: string, overrides?: CallOverrides): Promise<void>;

    "setTimelock(address)"(
      _timelock: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawalDevFundFee(
      _withdrawalDevFundFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setWithdrawalDevFundFee(uint256)"(
      _withdrawalDevFundFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawalTreasuryFee(
      _withdrawalTreasuryFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setWithdrawalTreasuryFee(uint256)"(
      _withdrawalTreasuryFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    solidRouter(overrides?: CallOverrides): Promise<string>;

    "solidRouter()"(overrides?: CallOverrides): Promise<string>;

    strategist(overrides?: CallOverrides): Promise<string>;

    "strategist()"(overrides?: CallOverrides): Promise<string>;

    timelock(overrides?: CallOverrides): Promise<string>;

    "timelock()"(overrides?: CallOverrides): Promise<string>;

    toNativeRoutes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean] & { from: string; to: string; stable: boolean }
    >;

    "toNativeRoutes(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean] & { from: string; to: string; stable: boolean }
    >;

    token0(overrides?: CallOverrides): Promise<string>;

    "token0()"(overrides?: CallOverrides): Promise<string>;

    token1(overrides?: CallOverrides): Promise<string>;

    "token1()"(overrides?: CallOverrides): Promise<string>;

    uniV2Router(overrides?: CallOverrides): Promise<string>;

    "uniV2Router()"(overrides?: CallOverrides): Promise<string>;

    velo(overrides?: CallOverrides): Promise<string>;

    "velo()"(overrides?: CallOverrides): Promise<string>;

    want(overrides?: CallOverrides): Promise<string>;

    "want()"(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;

    "weth()"(overrides?: CallOverrides): Promise<string>;

    whitelistHarvesters(
      _harvesters: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "whitelistHarvesters(address[])"(
      _harvesters: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(address)"(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawAll(overrides?: CallOverrides): Promise<BigNumber>;

    "withdrawAll()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawForSwap(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawForSwap(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawalDevFundFee(overrides?: CallOverrides): Promise<BigNumber>;

    "withdrawalDevFundFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalDevFundMax(overrides?: CallOverrides): Promise<BigNumber>;

    "withdrawalDevFundMax()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalTreasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

    "withdrawalTreasuryFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalTreasuryMax(overrides?: CallOverrides): Promise<BigNumber>;

    "withdrawalTreasuryMax()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    activeRewardsTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "activeRewardsTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addToNativeRoute(
      path: { from: string; to: string; stable: boolean }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addToNativeRoute(tuple[])"(
      path: { from: string; to: string; stable: boolean }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfPool(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOfPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfWant(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOfWant()"(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    "controller()"(overrides?: CallOverrides): Promise<BigNumber>;

    deactivateReward(
      reward: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deactivateReward(address)"(
      reward: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execute(
      _target: string,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "execute(address,bytes)"(
      _target: string,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gauge(overrides?: CallOverrides): Promise<BigNumber>;

    "gauge()"(overrides?: CallOverrides): Promise<BigNumber>;

    getActiveRewardsTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "getActiveRewardsTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    getHarvestable(overrides?: CallOverrides): Promise<BigNumber>;

    "getHarvestable()"(overrides?: CallOverrides): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<BigNumber>;

    "getName()"(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    "governance()"(overrides?: CallOverrides): Promise<BigNumber>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "harvest()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    harvesters(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "harvesters(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isStablePool(overrides?: CallOverrides): Promise<BigNumber>;

    "isStablePool()"(overrides?: CallOverrides): Promise<BigNumber>;

    native(overrides?: CallOverrides): Promise<BigNumber>;

    "native()"(overrides?: CallOverrides): Promise<BigNumber>;

    nativeToTokenRoutes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nativeToTokenRoutes(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    performanceDevFee(overrides?: CallOverrides): Promise<BigNumber>;

    "performanceDevFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    performanceDevMax(overrides?: CallOverrides): Promise<BigNumber>;

    "performanceDevMax()"(overrides?: CallOverrides): Promise<BigNumber>;

    performanceTreasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

    "performanceTreasuryFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    performanceTreasuryMax(overrides?: CallOverrides): Promise<BigNumber>;

    "performanceTreasuryMax()"(overrides?: CallOverrides): Promise<BigNumber>;

    revokeHarvesters(
      _harvesters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "revokeHarvesters(address[])"(
      _harvesters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setController(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setController(address)"(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPerformanceDevFee(
      _performanceDevFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setPerformanceDevFee(uint256)"(
      _performanceDevFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPerformanceTreasuryFee(
      _performanceTreasuryFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setPerformanceTreasuryFee(uint256)"(
      _performanceTreasuryFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStrategist(
      _strategist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setStrategist(address)"(
      _strategist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTimelock(
      _timelock: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTimelock(address)"(
      _timelock: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWithdrawalDevFundFee(
      _withdrawalDevFundFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setWithdrawalDevFundFee(uint256)"(
      _withdrawalDevFundFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWithdrawalTreasuryFee(
      _withdrawalTreasuryFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setWithdrawalTreasuryFee(uint256)"(
      _withdrawalTreasuryFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    solidRouter(overrides?: CallOverrides): Promise<BigNumber>;

    "solidRouter()"(overrides?: CallOverrides): Promise<BigNumber>;

    strategist(overrides?: CallOverrides): Promise<BigNumber>;

    "strategist()"(overrides?: CallOverrides): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<BigNumber>;

    "timelock()"(overrides?: CallOverrides): Promise<BigNumber>;

    toNativeRoutes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toNativeRoutes(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token0(overrides?: CallOverrides): Promise<BigNumber>;

    "token0()"(overrides?: CallOverrides): Promise<BigNumber>;

    token1(overrides?: CallOverrides): Promise<BigNumber>;

    "token1()"(overrides?: CallOverrides): Promise<BigNumber>;

    uniV2Router(overrides?: CallOverrides): Promise<BigNumber>;

    "uniV2Router()"(overrides?: CallOverrides): Promise<BigNumber>;

    velo(overrides?: CallOverrides): Promise<BigNumber>;

    "velo()"(overrides?: CallOverrides): Promise<BigNumber>;

    want(overrides?: CallOverrides): Promise<BigNumber>;

    "want()"(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    "weth()"(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistHarvesters(
      _harvesters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "whitelistHarvesters(address[])"(
      _harvesters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(address)"(
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawAll()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawForSwap(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawForSwap(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawalDevFundFee(overrides?: CallOverrides): Promise<BigNumber>;

    "withdrawalDevFundFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalDevFundMax(overrides?: CallOverrides): Promise<BigNumber>;

    "withdrawalDevFundMax()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalTreasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

    "withdrawalTreasuryFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalTreasuryMax(overrides?: CallOverrides): Promise<BigNumber>;

    "withdrawalTreasuryMax()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    activeRewardsTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "activeRewardsTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addToNativeRoute(
      path: { from: string; to: string; stable: boolean }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addToNativeRoute(tuple[])"(
      path: { from: string; to: string; stable: boolean }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "balanceOf()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOfPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "balanceOfPool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOfWant(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "balanceOfWant()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "controller()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deactivateReward(
      reward: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deactivateReward(address)"(
      reward: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execute(
      _target: string,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "execute(address,bytes)"(
      _target: string,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gauge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gauge()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getActiveRewardsTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getActiveRewardsTokens()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHarvestable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getHarvestable()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getName()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "harvest()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    harvesters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "harvesters(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isStablePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isStablePool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    native(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "native()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nativeToTokenRoutes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nativeToTokenRoutes(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    performanceDevFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "performanceDevFee()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    performanceDevMax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "performanceDevMax()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    performanceTreasuryFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "performanceTreasuryFee()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    performanceTreasuryMax(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "performanceTreasuryMax()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeHarvesters(
      _harvesters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "revokeHarvesters(address[])"(
      _harvesters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setController(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setController(address)"(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPerformanceDevFee(
      _performanceDevFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setPerformanceDevFee(uint256)"(
      _performanceDevFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPerformanceTreasuryFee(
      _performanceTreasuryFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setPerformanceTreasuryFee(uint256)"(
      _performanceTreasuryFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStrategist(
      _strategist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setStrategist(address)"(
      _strategist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTimelock(
      _timelock: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTimelock(address)"(
      _timelock: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawalDevFundFee(
      _withdrawalDevFundFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setWithdrawalDevFundFee(uint256)"(
      _withdrawalDevFundFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawalTreasuryFee(
      _withdrawalTreasuryFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setWithdrawalTreasuryFee(uint256)"(
      _withdrawalTreasuryFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    solidRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "solidRouter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strategist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "strategist()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "timelock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toNativeRoutes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toNativeRoutes(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token0()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token1()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniV2Router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "uniV2Router()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    velo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "velo()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    want(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "want()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "weth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistHarvesters(
      _harvesters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "whitelistHarvesters(address[])"(
      _harvesters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(address)"(
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawAll()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawForSwap(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawForSwap(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawalDevFundFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "withdrawalDevFundFee()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawalDevFundMax(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "withdrawalDevFundMax()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawalTreasuryFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "withdrawalTreasuryFee()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawalTreasuryMax(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "withdrawalTreasuryMax()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
