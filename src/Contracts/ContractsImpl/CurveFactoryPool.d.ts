/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface CurveFactoryPoolInterface extends ethers.utils.Interface {
  functions: {
    "deposit(uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "claim_rewards()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "user_checkpoint(address)": FunctionFragment;
    "set_rewards_receiver(address)": FunctionFragment;
    "kick(address)": FunctionFragment;
    "deposit_reward_token(address,uint256)": FunctionFragment;
    "add_reward(address,address)": FunctionFragment;
    "set_reward_distributor(address,address)": FunctionFragment;
    "set_killed(bool)": FunctionFragment;
    "claimed_reward(address,address)": FunctionFragment;
    "claimable_reward(address,address)": FunctionFragment;
    "claimable_tokens(address)": FunctionFragment;
    "integrate_checkpoint()": FunctionFragment;
    "future_epoch_time()": FunctionFragment;
    "inflation_rate()": FunctionFragment;
    "decimals()": FunctionFragment;
    "version()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "name()": FunctionFragment;
    "symbol()": FunctionFragment;
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "factory()": FunctionFragment;
    "lp_token()": FunctionFragment;
    "is_killed()": FunctionFragment;
    "reward_count()": FunctionFragment;
    "reward_data(address)": FunctionFragment;
    "rewards_receiver(address)": FunctionFragment;
    "reward_integral_for(address,address)": FunctionFragment;
    "working_balances(address)": FunctionFragment;
    "working_supply()": FunctionFragment;
    "integrate_inv_supply_of(address)": FunctionFragment;
    "integrate_checkpoint_of(address)": FunctionFragment;
    "integrate_fraction(address)": FunctionFragment;
    "period()": FunctionFragment;
    "reward_tokens(uint256)": FunctionFragment;
    "period_timestamp(uint256)": FunctionFragment;
    "integrate_inv_supply(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claim_rewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "user_checkpoint",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "set_rewards_receiver",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "kick", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deposit_reward_token",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "add_reward",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "set_reward_distributor",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "set_killed", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "claimed_reward",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimable_reward",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimable_tokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "integrate_checkpoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "future_epoch_time",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "inflation_rate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "lp_token", values?: undefined): string;
  encodeFunctionData(functionFragment: "is_killed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reward_count",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reward_data", values: [string]): string;
  encodeFunctionData(
    functionFragment: "rewards_receiver",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "reward_integral_for",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "working_balances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "working_supply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "integrate_inv_supply_of",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "integrate_checkpoint_of",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "integrate_fraction",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "period", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reward_tokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "period_timestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "integrate_inv_supply",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claim_rewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "user_checkpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_rewards_receiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kick", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deposit_reward_token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "add_reward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "set_reward_distributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set_killed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimed_reward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimable_reward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimable_tokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "integrate_checkpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "future_epoch_time",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inflation_rate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lp_token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "is_killed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reward_count",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reward_data",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewards_receiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reward_integral_for",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "working_balances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "working_supply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "integrate_inv_supply_of",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "integrate_checkpoint_of",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "integrate_fraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "period", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reward_tokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "period_timestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "integrate_inv_supply",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(address,uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
    "UpdateLiquidityLimit(address,uint256,uint256,uint256,uint256)": EventFragment;
    "CommitOwnership(address)": EventFragment;
    "ApplyOwnership(address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateLiquidityLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommitOwnership"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApplyOwnership"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
}

export class CurveFactoryPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CurveFactoryPoolInterface;

  functions: {
    "deposit(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit(uint256,address)"(
      _value: BigNumberish,
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit(uint256,address,bool)"(
      _value: BigNumberish,
      _addr: string,
      _claim_rewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(uint256,bool)"(
      _value: BigNumberish,
      _claim_rewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claim_rewards()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claim_rewards(address)"(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claim_rewards(address,address)"(
      _addr: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    permit(
      _owner: string,
      _spender: string,
      _value: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      _owner: string,
      _spender: string,
      _value: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseAllowance(
      _spender: string,
      _added_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      _spender: string,
      _added_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreaseAllowance(
      _spender: string,
      _subtracted_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      _spender: string,
      _subtracted_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    user_checkpoint(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "user_checkpoint(address)"(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    set_rewards_receiver(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "set_rewards_receiver(address)"(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    kick(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "kick(address)"(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit_reward_token(
      _reward_token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit_reward_token(address,uint256)"(
      _reward_token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    add_reward(
      _reward_token: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "add_reward(address,address)"(
      _reward_token: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    set_reward_distributor(
      _reward_token: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "set_reward_distributor(address,address)"(
      _reward_token: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    set_killed(
      _is_killed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "set_killed(bool)"(
      _is_killed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimed_reward(
      _addr: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "claimed_reward(address,address)"(
      _addr: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimable_reward(
      _user: string,
      _reward_token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "claimable_reward(address,address)"(
      _user: string,
      _reward_token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimable_tokens(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimable_tokens(address)"(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    integrate_checkpoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    "integrate_checkpoint()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    future_epoch_time(overrides?: CallOverrides): Promise<[BigNumber]>;

    "future_epoch_time()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    inflation_rate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "inflation_rate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    "decimals()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    version(overrides?: CallOverrides): Promise<[string]>;

    "version()"(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _lp_token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      _lp_token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<[string]>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    "factory()"(overrides?: CallOverrides): Promise<[string]>;

    lp_token(overrides?: CallOverrides): Promise<[string]>;

    "lp_token()"(overrides?: CallOverrides): Promise<[string]>;

    is_killed(overrides?: CallOverrides): Promise<[boolean]>;

    "is_killed()"(overrides?: CallOverrides): Promise<[boolean]>;

    reward_count(overrides?: CallOverrides): Promise<[BigNumber]>;

    "reward_count()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    reward_data(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          token: string;
          distributor: string;
          period_finish: BigNumber;
          rate: BigNumber;
          last_update: BigNumber;
          integral: BigNumber;
        }
      ]
    >;

    "reward_data(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          token: string;
          distributor: string;
          period_finish: BigNumber;
          rate: BigNumber;
          last_update: BigNumber;
          integral: BigNumber;
        }
      ]
    >;

    rewards_receiver(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "rewards_receiver(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    reward_integral_for(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "reward_integral_for(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    working_balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "working_balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    working_supply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "working_supply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    integrate_inv_supply_of(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "integrate_inv_supply_of(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    integrate_checkpoint_of(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "integrate_checkpoint_of(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    integrate_fraction(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "integrate_fraction(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    period(overrides?: CallOverrides): Promise<[BigNumber]>;

    "period()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    reward_tokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "reward_tokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    period_timestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "period_timestamp(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    integrate_inv_supply(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "integrate_inv_supply(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  "deposit(uint256)"(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit(uint256,address)"(
    _value: BigNumberish,
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit(uint256,address,bool)"(
    _value: BigNumberish,
    _addr: string,
    _claim_rewards: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(uint256,bool)"(
    _value: BigNumberish,
    _claim_rewards: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claim_rewards()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claim_rewards(address)"(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claim_rewards(address,address)"(
    _addr: string,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    _from: string,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    _from: string,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transfer(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    _spender: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    _spender: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  permit(
    _owner: string,
    _spender: string,
    _value: BigNumberish,
    _deadline: BigNumberish,
    _v: BigNumberish,
    _r: BytesLike,
    _s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
    _owner: string,
    _spender: string,
    _value: BigNumberish,
    _deadline: BigNumberish,
    _v: BigNumberish,
    _r: BytesLike,
    _s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseAllowance(
    _spender: string,
    _added_value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    _spender: string,
    _added_value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreaseAllowance(
    _spender: string,
    _subtracted_value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    _spender: string,
    _subtracted_value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  user_checkpoint(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "user_checkpoint(address)"(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  set_rewards_receiver(
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "set_rewards_receiver(address)"(
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  kick(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "kick(address)"(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit_reward_token(
    _reward_token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit_reward_token(address,uint256)"(
    _reward_token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  add_reward(
    _reward_token: string,
    _distributor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "add_reward(address,address)"(
    _reward_token: string,
    _distributor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  set_reward_distributor(
    _reward_token: string,
    _distributor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "set_reward_distributor(address,address)"(
    _reward_token: string,
    _distributor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  set_killed(
    _is_killed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "set_killed(bool)"(
    _is_killed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimed_reward(
    _addr: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "claimed_reward(address,address)"(
    _addr: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimable_reward(
    _user: string,
    _reward_token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "claimable_reward(address,address)"(
    _user: string,
    _reward_token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimable_tokens(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimable_tokens(address)"(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  integrate_checkpoint(overrides?: CallOverrides): Promise<BigNumber>;

  "integrate_checkpoint()"(overrides?: CallOverrides): Promise<BigNumber>;

  future_epoch_time(overrides?: CallOverrides): Promise<BigNumber>;

  "future_epoch_time()"(overrides?: CallOverrides): Promise<BigNumber>;

  inflation_rate(overrides?: CallOverrides): Promise<BigNumber>;

  "inflation_rate()"(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<BigNumber>;

  "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

  version(overrides?: CallOverrides): Promise<string>;

  "version()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    _lp_token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    _lp_token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "nonces(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  factory(overrides?: CallOverrides): Promise<string>;

  "factory()"(overrides?: CallOverrides): Promise<string>;

  lp_token(overrides?: CallOverrides): Promise<string>;

  "lp_token()"(overrides?: CallOverrides): Promise<string>;

  is_killed(overrides?: CallOverrides): Promise<boolean>;

  "is_killed()"(overrides?: CallOverrides): Promise<boolean>;

  reward_count(overrides?: CallOverrides): Promise<BigNumber>;

  "reward_count()"(overrides?: CallOverrides): Promise<BigNumber>;

  reward_data(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      token: string;
      distributor: string;
      period_finish: BigNumber;
      rate: BigNumber;
      last_update: BigNumber;
      integral: BigNumber;
    }
  >;

  "reward_data(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      token: string;
      distributor: string;
      period_finish: BigNumber;
      rate: BigNumber;
      last_update: BigNumber;
      integral: BigNumber;
    }
  >;

  rewards_receiver(arg0: string, overrides?: CallOverrides): Promise<string>;

  "rewards_receiver(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  reward_integral_for(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "reward_integral_for(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  working_balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "working_balances(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  working_supply(overrides?: CallOverrides): Promise<BigNumber>;

  "working_supply()"(overrides?: CallOverrides): Promise<BigNumber>;

  integrate_inv_supply_of(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "integrate_inv_supply_of(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  integrate_checkpoint_of(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "integrate_checkpoint_of(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  integrate_fraction(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "integrate_fraction(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  period(overrides?: CallOverrides): Promise<BigNumber>;

  "period()"(overrides?: CallOverrides): Promise<BigNumber>;

  reward_tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "reward_tokens(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  period_timestamp(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "period_timestamp(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  integrate_inv_supply(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "integrate_inv_supply(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    "deposit(uint256)"(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,address)"(
      _value: BigNumberish,
      _addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,address,bool)"(
      _value: BigNumberish,
      _addr: string,
      _claim_rewards: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256)"(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256,bool)"(
      _value: BigNumberish,
      _claim_rewards: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "claim_rewards()"(overrides?: CallOverrides): Promise<void>;

    "claim_rewards(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "claim_rewards(address,address)"(
      _addr: string,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      _spender: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    permit(
      _owner: string,
      _spender: string,
      _value: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      _owner: string,
      _spender: string,
      _value: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseAllowance(
      _spender: string,
      _added_value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      _spender: string,
      _added_value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    decreaseAllowance(
      _spender: string,
      _subtracted_value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      _spender: string,
      _subtracted_value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    user_checkpoint(addr: string, overrides?: CallOverrides): Promise<boolean>;

    "user_checkpoint(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    set_rewards_receiver(
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "set_rewards_receiver(address)"(
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    kick(addr: string, overrides?: CallOverrides): Promise<void>;

    "kick(address)"(addr: string, overrides?: CallOverrides): Promise<void>;

    deposit_reward_token(
      _reward_token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit_reward_token(address,uint256)"(
      _reward_token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    add_reward(
      _reward_token: string,
      _distributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "add_reward(address,address)"(
      _reward_token: string,
      _distributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    set_reward_distributor(
      _reward_token: string,
      _distributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "set_reward_distributor(address,address)"(
      _reward_token: string,
      _distributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    set_killed(_is_killed: boolean, overrides?: CallOverrides): Promise<void>;

    "set_killed(bool)"(
      _is_killed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    claimed_reward(
      _addr: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimed_reward(address,address)"(
      _addr: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimable_reward(
      _user: string,
      _reward_token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimable_reward(address,address)"(
      _user: string,
      _reward_token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimable_tokens(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimable_tokens(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    integrate_checkpoint(overrides?: CallOverrides): Promise<BigNumber>;

    "integrate_checkpoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    future_epoch_time(overrides?: CallOverrides): Promise<BigNumber>;

    "future_epoch_time()"(overrides?: CallOverrides): Promise<BigNumber>;

    inflation_rate(overrides?: CallOverrides): Promise<BigNumber>;

    "inflation_rate()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<string>;

    "version()"(overrides?: CallOverrides): Promise<string>;

    initialize(_lp_token: string, overrides?: CallOverrides): Promise<void>;

    "initialize(address)"(
      _lp_token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    "factory()"(overrides?: CallOverrides): Promise<string>;

    lp_token(overrides?: CallOverrides): Promise<string>;

    "lp_token()"(overrides?: CallOverrides): Promise<string>;

    is_killed(overrides?: CallOverrides): Promise<boolean>;

    "is_killed()"(overrides?: CallOverrides): Promise<boolean>;

    reward_count(overrides?: CallOverrides): Promise<BigNumber>;

    "reward_count()"(overrides?: CallOverrides): Promise<BigNumber>;

    reward_data(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        token: string;
        distributor: string;
        period_finish: BigNumber;
        rate: BigNumber;
        last_update: BigNumber;
        integral: BigNumber;
      }
    >;

    "reward_data(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        token: string;
        distributor: string;
        period_finish: BigNumber;
        rate: BigNumber;
        last_update: BigNumber;
        integral: BigNumber;
      }
    >;

    rewards_receiver(arg0: string, overrides?: CallOverrides): Promise<string>;

    "rewards_receiver(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    reward_integral_for(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "reward_integral_for(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    working_balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "working_balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    working_supply(overrides?: CallOverrides): Promise<BigNumber>;

    "working_supply()"(overrides?: CallOverrides): Promise<BigNumber>;

    integrate_inv_supply_of(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "integrate_inv_supply_of(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    integrate_checkpoint_of(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "integrate_checkpoint_of(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    integrate_fraction(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "integrate_fraction(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    period(overrides?: CallOverrides): Promise<BigNumber>;

    "period()"(overrides?: CallOverrides): Promise<BigNumber>;

    reward_tokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "reward_tokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    period_timestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "period_timestamp(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    integrate_inv_supply(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "integrate_inv_supply(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    Deposit(
      provider: string | null,
      value: null
    ): TypedEventFilter<
      [string, BigNumber],
      { provider: string; value: BigNumber }
    >;

    Withdraw(
      provider: string | null,
      value: null
    ): TypedEventFilter<
      [string, BigNumber],
      { provider: string; value: BigNumber }
    >;

    UpdateLiquidityLimit(
      user: string | null,
      original_balance: null,
      original_supply: null,
      working_balance: null,
      working_supply: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        user: string;
        original_balance: BigNumber;
        original_supply: BigNumber;
        working_balance: BigNumber;
        working_supply: BigNumber;
      }
    >;

    CommitOwnership(admin: null): TypedEventFilter<[string], { admin: string }>;

    ApplyOwnership(admin: null): TypedEventFilter<[string], { admin: string }>;

    Transfer(
      _from: string | null,
      _to: string | null,
      _value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _from: string; _to: string; _value: BigNumber }
    >;

    Approval(
      _owner: string | null,
      _spender: string | null,
      _value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _owner: string; _spender: string; _value: BigNumber }
    >;
  };

  estimateGas: {
    "deposit(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit(uint256,address)"(
      _value: BigNumberish,
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit(uint256,address,bool)"(
      _value: BigNumberish,
      _addr: string,
      _claim_rewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(uint256,bool)"(
      _value: BigNumberish,
      _claim_rewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claim_rewards()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claim_rewards(address)"(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claim_rewards(address,address)"(
      _addr: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    permit(
      _owner: string,
      _spender: string,
      _value: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      _owner: string,
      _spender: string,
      _value: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseAllowance(
      _spender: string,
      _added_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      _spender: string,
      _added_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreaseAllowance(
      _spender: string,
      _subtracted_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      _spender: string,
      _subtracted_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    user_checkpoint(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "user_checkpoint(address)"(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    set_rewards_receiver(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "set_rewards_receiver(address)"(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    kick(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "kick(address)"(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit_reward_token(
      _reward_token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit_reward_token(address,uint256)"(
      _reward_token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    add_reward(
      _reward_token: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "add_reward(address,address)"(
      _reward_token: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    set_reward_distributor(
      _reward_token: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "set_reward_distributor(address,address)"(
      _reward_token: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    set_killed(
      _is_killed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "set_killed(bool)"(
      _is_killed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimed_reward(
      _addr: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimed_reward(address,address)"(
      _addr: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimable_reward(
      _user: string,
      _reward_token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimable_reward(address,address)"(
      _user: string,
      _reward_token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimable_tokens(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimable_tokens(address)"(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    integrate_checkpoint(overrides?: CallOverrides): Promise<BigNumber>;

    "integrate_checkpoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    future_epoch_time(overrides?: CallOverrides): Promise<BigNumber>;

    "future_epoch_time()"(overrides?: CallOverrides): Promise<BigNumber>;

    inflation_rate(overrides?: CallOverrides): Promise<BigNumber>;

    "inflation_rate()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    "version()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _lp_token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address)"(
      _lp_token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    "factory()"(overrides?: CallOverrides): Promise<BigNumber>;

    lp_token(overrides?: CallOverrides): Promise<BigNumber>;

    "lp_token()"(overrides?: CallOverrides): Promise<BigNumber>;

    is_killed(overrides?: CallOverrides): Promise<BigNumber>;

    "is_killed()"(overrides?: CallOverrides): Promise<BigNumber>;

    reward_count(overrides?: CallOverrides): Promise<BigNumber>;

    "reward_count()"(overrides?: CallOverrides): Promise<BigNumber>;

    reward_data(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "reward_data(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewards_receiver(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewards_receiver(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reward_integral_for(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "reward_integral_for(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    working_balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "working_balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    working_supply(overrides?: CallOverrides): Promise<BigNumber>;

    "working_supply()"(overrides?: CallOverrides): Promise<BigNumber>;

    integrate_inv_supply_of(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "integrate_inv_supply_of(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    integrate_checkpoint_of(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "integrate_checkpoint_of(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    integrate_fraction(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "integrate_fraction(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    period(overrides?: CallOverrides): Promise<BigNumber>;

    "period()"(overrides?: CallOverrides): Promise<BigNumber>;

    reward_tokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "reward_tokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    period_timestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "period_timestamp(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    integrate_inv_supply(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "integrate_inv_supply(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "deposit(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,address)"(
      _value: BigNumberish,
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,address,bool)"(
      _value: BigNumberish,
      _addr: string,
      _claim_rewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,bool)"(
      _value: BigNumberish,
      _claim_rewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claim_rewards()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claim_rewards(address)"(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claim_rewards(address,address)"(
      _addr: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    permit(
      _owner: string,
      _spender: string,
      _value: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      _owner: string,
      _spender: string,
      _value: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      _spender: string,
      _added_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      _spender: string,
      _added_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreaseAllowance(
      _spender: string,
      _subtracted_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      _spender: string,
      _subtracted_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    user_checkpoint(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "user_checkpoint(address)"(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    set_rewards_receiver(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "set_rewards_receiver(address)"(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    kick(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "kick(address)"(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit_reward_token(
      _reward_token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit_reward_token(address,uint256)"(
      _reward_token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    add_reward(
      _reward_token: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "add_reward(address,address)"(
      _reward_token: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    set_reward_distributor(
      _reward_token: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "set_reward_distributor(address,address)"(
      _reward_token: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    set_killed(
      _is_killed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "set_killed(bool)"(
      _is_killed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimed_reward(
      _addr: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimed_reward(address,address)"(
      _addr: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimable_reward(
      _user: string,
      _reward_token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimable_reward(address,address)"(
      _user: string,
      _reward_token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimable_tokens(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimable_tokens(address)"(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    integrate_checkpoint(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "integrate_checkpoint()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    future_epoch_time(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "future_epoch_time()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inflation_rate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "inflation_rate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "version()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _lp_token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      _lp_token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DOMAIN_SEPARATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lp_token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lp_token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    is_killed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "is_killed()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reward_count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "reward_count()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reward_data(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "reward_data(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewards_receiver(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewards_receiver(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reward_integral_for(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "reward_integral_for(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    working_balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "working_balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    working_supply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "working_supply()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    integrate_inv_supply_of(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "integrate_inv_supply_of(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    integrate_checkpoint_of(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "integrate_checkpoint_of(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    integrate_fraction(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "integrate_fraction(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    period(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "period()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reward_tokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "reward_tokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    period_timestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "period_timestamp(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    integrate_inv_supply(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "integrate_inv_supply(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
