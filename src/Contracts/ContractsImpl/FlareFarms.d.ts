/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface FlareFarmsInterface extends ethers.utils.Interface {
  functions: {
    "MAXIMUM_DEPOSIT_FEE_RATE()": FunctionFragment;
    "MAXIMUM_HARVEST_INTERVAL()": FunctionFragment;
    "add(uint256,address,uint16,uint256,address[])": FunctionFragment;
    "canHarvest(uint256,address)": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "depositWithPermit(uint256,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "emergencyWithdraw(uint256)": FunctionFragment;
    "flare()": FunctionFragment;
    "flarePerSec()": FunctionFragment;
    "harvestMany(uint256[])": FunctionFragment;
    "investorAddress()": FunctionFragment;
    "investorPercent()": FunctionFragment;
    "massUpdatePools()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingTokens(uint256,address)": FunctionFragment;
    "poolInfo(uint256)": FunctionFragment;
    "poolLength()": FunctionFragment;
    "poolRewarders(uint256)": FunctionFragment;
    "poolRewardsPerSec(uint256)": FunctionFragment;
    "poolTotalLp(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "set(uint256,uint256,uint16,uint256,address[])": FunctionFragment;
    "setInvestorAddress(address)": FunctionFragment;
    "setInvestorPercent(uint256)": FunctionFragment;
    "setTeamAddress(address)": FunctionFragment;
    "setTeamPercent(uint256)": FunctionFragment;
    "setTreasuryAddress(address)": FunctionFragment;
    "setTreasuryPercent(uint256)": FunctionFragment;
    "startFarming()": FunctionFragment;
    "startTimestamp()": FunctionFragment;
    "teamAddress()": FunctionFragment;
    "teamPercent()": FunctionFragment;
    "totalAllocPoint()": FunctionFragment;
    "totalFlareInPools()": FunctionFragment;
    "totalLockedUpRewards()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasuryAddress()": FunctionFragment;
    "treasuryPercent()": FunctionFragment;
    "updateAllocPoint(uint256,uint256)": FunctionFragment;
    "updateEmissionRate(uint256)": FunctionFragment;
    "updatePool(uint256)": FunctionFragment;
    "userInfo(uint256,address)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAXIMUM_DEPOSIT_FEE_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAXIMUM_HARVEST_INTERVAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "add",
    values: [BigNumberish, string, BigNumberish, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "canHarvest",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositWithPermit",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "flare", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "flarePerSec",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "harvestMany",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "investorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "investorPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "massUpdatePools",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingTokens",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolRewarders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolRewardsPerSec",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolTotalLp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setInvestorAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setInvestorPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTeamAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTeamPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startFarming",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "teamAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "teamPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAllocPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalFlareInPools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalLockedUpRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateAllocPoint",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEmissionRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAXIMUM_DEPOSIT_FEE_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAXIMUM_HARVEST_INTERVAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canHarvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "flare", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "flarePerSec",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "harvestMany",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investorPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "massUpdatePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolRewarders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolRewardsPerSec",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolTotalLp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setInvestorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInvestorPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTeamAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTeamPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startFarming",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "teamAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "teamPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFlareInPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLockedUpRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAllocPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEmissionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Add(uint256,uint256,address,uint16,uint256,address[])": EventFragment;
    "AllocPointsUpdated(address,uint256,uint256)": EventFragment;
    "Deposit(address,uint256,uint256)": EventFragment;
    "EmergencyWithdraw(address,uint256,uint256)": EventFragment;
    "EmissionRateUpdated(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RewardLockedUp(address,uint256,uint256)": EventFragment;
    "Set(uint256,uint256,uint16,uint256,address[])": EventFragment;
    "SetInvestorAddress(address,address)": EventFragment;
    "SetInvestorPercent(uint256,uint256)": EventFragment;
    "SetTeamAddress(address,address)": EventFragment;
    "SetTeamPercent(uint256,uint256)": EventFragment;
    "SetTreasuryAddress(address,address)": EventFragment;
    "SetTreasuryPercent(uint256,uint256)": EventFragment;
    "UpdatePool(uint256,uint256,uint256,uint256)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Add"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllocPointsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmissionRateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardLockedUp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Set"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetInvestorAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetInvestorPercent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTeamAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTeamPercent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTreasuryAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTreasuryPercent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class FlareFarms extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FlareFarmsInterface;

  functions: {
    MAXIMUM_DEPOSIT_FEE_RATE(overrides?: CallOverrides): Promise<[number]>;

    "MAXIMUM_DEPOSIT_FEE_RATE()"(overrides?: CallOverrides): Promise<[number]>;

    MAXIMUM_HARVEST_INTERVAL(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MAXIMUM_HARVEST_INTERVAL()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _depositFeeBP: BigNumberish,
      _harvestInterval: BigNumberish,
      _rewarders: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "add(uint256,address,uint16,uint256,address[])"(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _depositFeeBP: BigNumberish,
      _harvestInterval: BigNumberish,
      _rewarders: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    canHarvest(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "canHarvest(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositWithPermit(
      pid: BigNumberish,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "depositWithPermit(uint256,uint256,uint256,uint8,bytes32,bytes32)"(
      pid: BigNumberish,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    flare(overrides?: CallOverrides): Promise<[string]>;

    "flare()"(overrides?: CallOverrides): Promise<[string]>;

    flarePerSec(overrides?: CallOverrides): Promise<[BigNumber]>;

    "flarePerSec()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    harvestMany(
      _pids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "harvestMany(uint256[])"(
      _pids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    investorAddress(overrides?: CallOverrides): Promise<[string]>;

    "investorAddress()"(overrides?: CallOverrides): Promise<[string]>;

    investorPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    "investorPercent()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    massUpdatePools(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "massUpdatePools()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pendingTokens(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], BigNumber[], BigNumber[]] & {
        addresses: string[];
        symbols: string[];
        decimals: BigNumber[];
        amounts: BigNumber[];
      }
    >;

    "pendingTokens(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], BigNumber[], BigNumber[]] & {
        addresses: string[];
        symbols: string[];
        decimals: BigNumber[];
        amounts: BigNumber[];
      }
    >;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber
      ] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardTimestamp: BigNumber;
        accFlarePerShare: BigNumber;
        depositFeeBP: number;
        harvestInterval: BigNumber;
        totalLp: BigNumber;
      }
    >;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber
      ] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardTimestamp: BigNumber;
        accFlarePerShare: BigNumber;
        depositFeeBP: number;
        harvestInterval: BigNumber;
        totalLp: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "poolLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolRewarders(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]] & { rewarders: string[] }>;

    "poolRewarders(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]] & { rewarders: string[] }>;

    poolRewardsPerSec(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], BigNumber[], BigNumber[]] & {
        addresses: string[];
        symbols: string[];
        decimals: BigNumber[];
        rewardsPerSec: BigNumber[];
      }
    >;

    "poolRewardsPerSec(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], BigNumber[], BigNumber[]] & {
        addresses: string[];
        symbols: string[];
        decimals: BigNumber[];
        rewardsPerSec: BigNumber[];
      }
    >;

    poolTotalLp(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "poolTotalLp(uint256)"(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _depositFeeBP: BigNumberish,
      _harvestInterval: BigNumberish,
      _rewarders: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "set(uint256,uint256,uint16,uint256,address[])"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _depositFeeBP: BigNumberish,
      _harvestInterval: BigNumberish,
      _rewarders: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInvestorAddress(
      _investorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setInvestorAddress(address)"(
      _investorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInvestorPercent(
      _newInvestorPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setInvestorPercent(uint256)"(
      _newInvestorPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTeamAddress(
      _teamAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTeamAddress(address)"(
      _teamAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTeamPercent(
      _newTeamPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTeamPercent(uint256)"(
      _newTeamPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasuryAddress(
      _treasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTreasuryAddress(address)"(
      _treasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasuryPercent(
      _newTreasuryPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTreasuryPercent(uint256)"(
      _newTreasuryPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startFarming(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "startFarming()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    "startTimestamp()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    teamAddress(overrides?: CallOverrides): Promise<[string]>;

    "teamAddress()"(overrides?: CallOverrides): Promise<[string]>;

    teamPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    "teamPercent()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalFlareInPools(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalFlareInPools()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalLockedUpRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalLockedUpRewards()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<[string]>;

    "treasuryAddress()"(overrides?: CallOverrides): Promise<[string]>;

    treasuryPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    "treasuryPercent()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateAllocPoint(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateAllocPoint(uint256,uint256)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateEmissionRate(
      _flarePerSec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateEmissionRate(uint256)"(
      _flarePerSec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        rewardLockedUp: BigNumber;
        nextHarvestUntil: BigNumber;
      }
    >;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        rewardLockedUp: BigNumber;
        nextHarvestUntil: BigNumber;
      }
    >;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MAXIMUM_DEPOSIT_FEE_RATE(overrides?: CallOverrides): Promise<number>;

  "MAXIMUM_DEPOSIT_FEE_RATE()"(overrides?: CallOverrides): Promise<number>;

  MAXIMUM_HARVEST_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

  "MAXIMUM_HARVEST_INTERVAL()"(overrides?: CallOverrides): Promise<BigNumber>;

  add(
    _allocPoint: BigNumberish,
    _lpToken: string,
    _depositFeeBP: BigNumberish,
    _harvestInterval: BigNumberish,
    _rewarders: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "add(uint256,address,uint16,uint256,address[])"(
    _allocPoint: BigNumberish,
    _lpToken: string,
    _depositFeeBP: BigNumberish,
    _harvestInterval: BigNumberish,
    _rewarders: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  canHarvest(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "canHarvest(uint256,address)"(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  deposit(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit(uint256,uint256)"(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositWithPermit(
    pid: BigNumberish,
    amount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "depositWithPermit(uint256,uint256,uint256,uint8,bytes32,bytes32)"(
    pid: BigNumberish,
    amount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "emergencyWithdraw(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  flare(overrides?: CallOverrides): Promise<string>;

  "flare()"(overrides?: CallOverrides): Promise<string>;

  flarePerSec(overrides?: CallOverrides): Promise<BigNumber>;

  "flarePerSec()"(overrides?: CallOverrides): Promise<BigNumber>;

  harvestMany(
    _pids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "harvestMany(uint256[])"(
    _pids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  investorAddress(overrides?: CallOverrides): Promise<string>;

  "investorAddress()"(overrides?: CallOverrides): Promise<string>;

  investorPercent(overrides?: CallOverrides): Promise<BigNumber>;

  "investorPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

  massUpdatePools(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "massUpdatePools()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pendingTokens(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [string[], string[], BigNumber[], BigNumber[]] & {
      addresses: string[];
      symbols: string[];
      decimals: BigNumber[];
      amounts: BigNumber[];
    }
  >;

  "pendingTokens(uint256,address)"(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [string[], string[], BigNumber[], BigNumber[]] & {
      addresses: string[];
      symbols: string[];
      decimals: BigNumber[];
      amounts: BigNumber[];
    }
  >;

  poolInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, number, BigNumber, BigNumber] & {
      lpToken: string;
      allocPoint: BigNumber;
      lastRewardTimestamp: BigNumber;
      accFlarePerShare: BigNumber;
      depositFeeBP: number;
      harvestInterval: BigNumber;
      totalLp: BigNumber;
    }
  >;

  "poolInfo(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, number, BigNumber, BigNumber] & {
      lpToken: string;
      allocPoint: BigNumber;
      lastRewardTimestamp: BigNumber;
      accFlarePerShare: BigNumber;
      depositFeeBP: number;
      harvestInterval: BigNumber;
      totalLp: BigNumber;
    }
  >;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  poolRewarders(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "poolRewarders(uint256)"(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  poolRewardsPerSec(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], string[], BigNumber[], BigNumber[]] & {
      addresses: string[];
      symbols: string[];
      decimals: BigNumber[];
      rewardsPerSec: BigNumber[];
    }
  >;

  "poolRewardsPerSec(uint256)"(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], string[], BigNumber[], BigNumber[]] & {
      addresses: string[];
      symbols: string[];
      decimals: BigNumber[];
      rewardsPerSec: BigNumber[];
    }
  >;

  poolTotalLp(pid: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "poolTotalLp(uint256)"(
    pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  set(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    _depositFeeBP: BigNumberish,
    _harvestInterval: BigNumberish,
    _rewarders: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "set(uint256,uint256,uint16,uint256,address[])"(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    _depositFeeBP: BigNumberish,
    _harvestInterval: BigNumberish,
    _rewarders: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInvestorAddress(
    _investorAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setInvestorAddress(address)"(
    _investorAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInvestorPercent(
    _newInvestorPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setInvestorPercent(uint256)"(
    _newInvestorPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTeamAddress(
    _teamAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTeamAddress(address)"(
    _teamAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTeamPercent(
    _newTeamPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTeamPercent(uint256)"(
    _newTeamPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasuryAddress(
    _treasuryAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTreasuryAddress(address)"(
    _treasuryAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasuryPercent(
    _newTreasuryPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTreasuryPercent(uint256)"(
    _newTreasuryPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startFarming(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "startFarming()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  "startTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

  teamAddress(overrides?: CallOverrides): Promise<string>;

  "teamAddress()"(overrides?: CallOverrides): Promise<string>;

  teamPercent(overrides?: CallOverrides): Promise<BigNumber>;

  "teamPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalFlareInPools(overrides?: CallOverrides): Promise<BigNumber>;

  "totalFlareInPools()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalLockedUpRewards(overrides?: CallOverrides): Promise<BigNumber>;

  "totalLockedUpRewards()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasuryAddress(overrides?: CallOverrides): Promise<string>;

  "treasuryAddress()"(overrides?: CallOverrides): Promise<string>;

  treasuryPercent(overrides?: CallOverrides): Promise<BigNumber>;

  "treasuryPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

  updateAllocPoint(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateAllocPoint(uint256,uint256)"(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateEmissionRate(
    _flarePerSec: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateEmissionRate(uint256)"(
    _flarePerSec: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePool(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updatePool(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      rewardDebt: BigNumber;
      rewardLockedUp: BigNumber;
      nextHarvestUntil: BigNumber;
    }
  >;

  "userInfo(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      rewardDebt: BigNumber;
      rewardLockedUp: BigNumber;
      nextHarvestUntil: BigNumber;
    }
  >;

  withdraw(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(uint256,uint256)"(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAXIMUM_DEPOSIT_FEE_RATE(overrides?: CallOverrides): Promise<number>;

    "MAXIMUM_DEPOSIT_FEE_RATE()"(overrides?: CallOverrides): Promise<number>;

    MAXIMUM_HARVEST_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    "MAXIMUM_HARVEST_INTERVAL()"(overrides?: CallOverrides): Promise<BigNumber>;

    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _depositFeeBP: BigNumberish,
      _harvestInterval: BigNumberish,
      _rewarders: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "add(uint256,address,uint16,uint256,address[])"(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _depositFeeBP: BigNumberish,
      _harvestInterval: BigNumberish,
      _rewarders: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    canHarvest(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "canHarvest(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositWithPermit(
      pid: BigNumberish,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositWithPermit(uint256,uint256,uint256,uint8,bytes32,bytes32)"(
      pid: BigNumberish,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    flare(overrides?: CallOverrides): Promise<string>;

    "flare()"(overrides?: CallOverrides): Promise<string>;

    flarePerSec(overrides?: CallOverrides): Promise<BigNumber>;

    "flarePerSec()"(overrides?: CallOverrides): Promise<BigNumber>;

    harvestMany(
      _pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "harvestMany(uint256[])"(
      _pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    investorAddress(overrides?: CallOverrides): Promise<string>;

    "investorAddress()"(overrides?: CallOverrides): Promise<string>;

    investorPercent(overrides?: CallOverrides): Promise<BigNumber>;

    "investorPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    massUpdatePools(overrides?: CallOverrides): Promise<void>;

    "massUpdatePools()"(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pendingTokens(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], BigNumber[], BigNumber[]] & {
        addresses: string[];
        symbols: string[];
        decimals: BigNumber[];
        amounts: BigNumber[];
      }
    >;

    "pendingTokens(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], BigNumber[], BigNumber[]] & {
        addresses: string[];
        symbols: string[];
        decimals: BigNumber[];
        amounts: BigNumber[];
      }
    >;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber
      ] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardTimestamp: BigNumber;
        accFlarePerShare: BigNumber;
        depositFeeBP: number;
        harvestInterval: BigNumber;
        totalLp: BigNumber;
      }
    >;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber
      ] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardTimestamp: BigNumber;
        accFlarePerShare: BigNumber;
        depositFeeBP: number;
        harvestInterval: BigNumber;
        totalLp: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolRewarders(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "poolRewarders(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    poolRewardsPerSec(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], BigNumber[], BigNumber[]] & {
        addresses: string[];
        symbols: string[];
        decimals: BigNumber[];
        rewardsPerSec: BigNumber[];
      }
    >;

    "poolRewardsPerSec(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], BigNumber[], BigNumber[]] & {
        addresses: string[];
        symbols: string[];
        decimals: BigNumber[];
        rewardsPerSec: BigNumber[];
      }
    >;

    poolTotalLp(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolTotalLp(uint256)"(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _depositFeeBP: BigNumberish,
      _harvestInterval: BigNumberish,
      _rewarders: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "set(uint256,uint256,uint16,uint256,address[])"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _depositFeeBP: BigNumberish,
      _harvestInterval: BigNumberish,
      _rewarders: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setInvestorAddress(
      _investorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setInvestorAddress(address)"(
      _investorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setInvestorPercent(
      _newInvestorPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setInvestorPercent(uint256)"(
      _newInvestorPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTeamAddress(
      _teamAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTeamAddress(address)"(
      _teamAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTeamPercent(
      _newTeamPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTeamPercent(uint256)"(
      _newTeamPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasuryAddress(
      _treasuryAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTreasuryAddress(address)"(
      _treasuryAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasuryPercent(
      _newTreasuryPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTreasuryPercent(uint256)"(
      _newTreasuryPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startFarming(overrides?: CallOverrides): Promise<void>;

    "startFarming()"(overrides?: CallOverrides): Promise<void>;

    startTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "startTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    teamAddress(overrides?: CallOverrides): Promise<string>;

    "teamAddress()"(overrides?: CallOverrides): Promise<string>;

    teamPercent(overrides?: CallOverrides): Promise<BigNumber>;

    "teamPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalFlareInPools(overrides?: CallOverrides): Promise<BigNumber>;

    "totalFlareInPools()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalLockedUpRewards(overrides?: CallOverrides): Promise<BigNumber>;

    "totalLockedUpRewards()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasuryAddress(overrides?: CallOverrides): Promise<string>;

    "treasuryAddress()"(overrides?: CallOverrides): Promise<string>;

    treasuryPercent(overrides?: CallOverrides): Promise<BigNumber>;

    "treasuryPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateAllocPoint(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateAllocPoint(uint256,uint256)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateEmissionRate(
      _flarePerSec: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateEmissionRate(uint256)"(
      _flarePerSec: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePool(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        rewardLockedUp: BigNumber;
        nextHarvestUntil: BigNumber;
      }
    >;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        rewardLockedUp: BigNumber;
        nextHarvestUntil: BigNumber;
      }
    >;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Add(
      pid: BigNumberish | null,
      allocPoint: null,
      lpToken: string | null,
      depositFeeBP: null,
      harvestInterval: null,
      rewarders: string[] | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, number, BigNumber, string[]],
      {
        pid: BigNumber;
        allocPoint: BigNumber;
        lpToken: string;
        depositFeeBP: number;
        harvestInterval: BigNumber;
        rewarders: string[];
      }
    >;

    AllocPointsUpdated(
      caller: string | null,
      previousAmount: null,
      newAmount: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { caller: string; previousAmount: BigNumber; newAmount: BigNumber }
    >;

    Deposit(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amount: BigNumber }
    >;

    EmergencyWithdraw(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amount: BigNumber }
    >;

    EmissionRateUpdated(
      caller: string | null,
      previousValue: null,
      newValue: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { caller: string; previousValue: BigNumber; newValue: BigNumber }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    RewardLockedUp(
      user: string | null,
      pid: BigNumberish | null,
      amountLockedUp: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amountLockedUp: BigNumber }
    >;

    Set(
      pid: BigNumberish | null,
      allocPoint: null,
      depositFeeBP: null,
      harvestInterval: null,
      rewarders: string[] | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, number, BigNumber, string[]],
      {
        pid: BigNumber;
        allocPoint: BigNumber;
        depositFeeBP: number;
        harvestInterval: BigNumber;
        rewarders: string[];
      }
    >;

    SetInvestorAddress(
      oldAddress: string | null,
      newAddress: string | null
    ): TypedEventFilter<
      [string, string],
      { oldAddress: string; newAddress: string }
    >;

    SetInvestorPercent(
      oldPercent: null,
      newPercent: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldPercent: BigNumber; newPercent: BigNumber }
    >;

    SetTeamAddress(
      oldAddress: string | null,
      newAddress: string | null
    ): TypedEventFilter<
      [string, string],
      { oldAddress: string; newAddress: string }
    >;

    SetTeamPercent(
      oldPercent: null,
      newPercent: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldPercent: BigNumber; newPercent: BigNumber }
    >;

    SetTreasuryAddress(
      oldAddress: string | null,
      newAddress: string | null
    ): TypedEventFilter<
      [string, string],
      { oldAddress: string; newAddress: string }
    >;

    SetTreasuryPercent(
      oldPercent: null,
      newPercent: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldPercent: BigNumber; newPercent: BigNumber }
    >;

    UpdatePool(
      pid: BigNumberish | null,
      lastRewardTimestamp: null,
      lpSupply: null,
      accFlarePerShare: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        pid: BigNumber;
        lastRewardTimestamp: BigNumber;
        lpSupply: BigNumber;
        accFlarePerShare: BigNumber;
      }
    >;

    Withdraw(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amount: BigNumber }
    >;
  };

  estimateGas: {
    MAXIMUM_DEPOSIT_FEE_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    "MAXIMUM_DEPOSIT_FEE_RATE()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAXIMUM_HARVEST_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    "MAXIMUM_HARVEST_INTERVAL()"(overrides?: CallOverrides): Promise<BigNumber>;

    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _depositFeeBP: BigNumberish,
      _harvestInterval: BigNumberish,
      _rewarders: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "add(uint256,address,uint16,uint256,address[])"(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _depositFeeBP: BigNumberish,
      _harvestInterval: BigNumberish,
      _rewarders: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    canHarvest(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canHarvest(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositWithPermit(
      pid: BigNumberish,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "depositWithPermit(uint256,uint256,uint256,uint8,bytes32,bytes32)"(
      pid: BigNumberish,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    flare(overrides?: CallOverrides): Promise<BigNumber>;

    "flare()"(overrides?: CallOverrides): Promise<BigNumber>;

    flarePerSec(overrides?: CallOverrides): Promise<BigNumber>;

    "flarePerSec()"(overrides?: CallOverrides): Promise<BigNumber>;

    harvestMany(
      _pids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "harvestMany(uint256[])"(
      _pids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    investorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "investorAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    investorPercent(overrides?: CallOverrides): Promise<BigNumber>;

    "investorPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    massUpdatePools(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "massUpdatePools()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingTokens(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingTokens(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolRewarders(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolRewarders(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolRewardsPerSec(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolRewardsPerSec(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolTotalLp(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolTotalLp(uint256)"(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _depositFeeBP: BigNumberish,
      _harvestInterval: BigNumberish,
      _rewarders: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "set(uint256,uint256,uint16,uint256,address[])"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _depositFeeBP: BigNumberish,
      _harvestInterval: BigNumberish,
      _rewarders: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInvestorAddress(
      _investorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setInvestorAddress(address)"(
      _investorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInvestorPercent(
      _newInvestorPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setInvestorPercent(uint256)"(
      _newInvestorPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTeamAddress(
      _teamAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTeamAddress(address)"(
      _teamAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTeamPercent(
      _newTeamPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTeamPercent(uint256)"(
      _newTeamPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasuryAddress(
      _treasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTreasuryAddress(address)"(
      _treasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasuryPercent(
      _newTreasuryPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTreasuryPercent(uint256)"(
      _newTreasuryPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startFarming(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "startFarming()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "startTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    teamAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "teamAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    teamPercent(overrides?: CallOverrides): Promise<BigNumber>;

    "teamPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalFlareInPools(overrides?: CallOverrides): Promise<BigNumber>;

    "totalFlareInPools()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalLockedUpRewards(overrides?: CallOverrides): Promise<BigNumber>;

    "totalLockedUpRewards()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasuryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "treasuryAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryPercent(overrides?: CallOverrides): Promise<BigNumber>;

    "treasuryPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateAllocPoint(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateAllocPoint(uint256,uint256)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateEmissionRate(
      _flarePerSec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateEmissionRate(uint256)"(
      _flarePerSec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAXIMUM_DEPOSIT_FEE_RATE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MAXIMUM_DEPOSIT_FEE_RATE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAXIMUM_HARVEST_INTERVAL(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MAXIMUM_HARVEST_INTERVAL()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _depositFeeBP: BigNumberish,
      _harvestInterval: BigNumberish,
      _rewarders: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "add(uint256,address,uint16,uint256,address[])"(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _depositFeeBP: BigNumberish,
      _harvestInterval: BigNumberish,
      _rewarders: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    canHarvest(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canHarvest(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositWithPermit(
      pid: BigNumberish,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "depositWithPermit(uint256,uint256,uint256,uint8,bytes32,bytes32)"(
      pid: BigNumberish,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    flare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "flare()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flarePerSec(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "flarePerSec()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvestMany(
      _pids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "harvestMany(uint256[])"(
      _pids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    investorAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "investorAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    investorPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "investorPercent()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    massUpdatePools(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "massUpdatePools()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingTokens(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingTokens(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolRewarders(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolRewarders(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolRewardsPerSec(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolRewardsPerSec(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolTotalLp(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolTotalLp(uint256)"(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _depositFeeBP: BigNumberish,
      _harvestInterval: BigNumberish,
      _rewarders: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "set(uint256,uint256,uint16,uint256,address[])"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _depositFeeBP: BigNumberish,
      _harvestInterval: BigNumberish,
      _rewarders: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInvestorAddress(
      _investorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setInvestorAddress(address)"(
      _investorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInvestorPercent(
      _newInvestorPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setInvestorPercent(uint256)"(
      _newInvestorPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTeamAddress(
      _teamAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTeamAddress(address)"(
      _teamAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTeamPercent(
      _newTeamPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTeamPercent(uint256)"(
      _newTeamPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasuryAddress(
      _treasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTreasuryAddress(address)"(
      _treasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasuryPercent(
      _newTreasuryPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTreasuryPercent(uint256)"(
      _newTreasuryPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startFarming(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "startFarming()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "startTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    teamAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "teamAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    teamPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "teamPercent()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalAllocPoint()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalFlareInPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalFlareInPools()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalLockedUpRewards(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalLockedUpRewards()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "treasuryAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    treasuryPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "treasuryPercent()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateAllocPoint(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateAllocPoint(uint256,uint256)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateEmissionRate(
      _flarePerSec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateEmissionRate(uint256)"(
      _flarePerSec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
