/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ZipFarmsInterface extends ethers.utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "add(uint256,address,address)": FunctionFragment;
    "addedTokens(address)": FunctionFragment;
    "batch(bytes[],bool)": FunctionFragment;
    "batchPermitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "batchRevertOnFailure(bytes[])": FunctionFragment;
    "deposit(uint256,uint128,address)": FunctionFragment;
    "depositNotify(uint256,uint128,address,address,bytes)": FunctionFragment;
    "depositShort(uint256,uint128)": FunctionFragment;
    "depositWithPermit(uint256,uint128,address,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "depositWithPermitShort(uint256,uint128,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "emergencyWithdraw(uint256,address)": FunctionFragment;
    "failsafe_setPoolParams(uint256,tuple)": FunctionFragment;
    "failsafe_setRewardParams(uint256,bool,uint64,bool,uint64,bool,uint256,bool,uint256,bool,uint256,bool)": FunctionFragment;
    "failsafe_setUserRewardDebt(uint256,address,int128)": FunctionFragment;
    "harvest(uint256,address)": FunctionFragment;
    "harvestLong(uint256,address,bool)": FunctionFragment;
    "harvestShort(uint256)": FunctionFragment;
    "lpToken(uint256)": FunctionFragment;
    "massUpdatePools(uint256[])": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerPauseDepositsAndHarvests()": FunctionFragment;
    "ownerUnpauseDepositsAndHarvests()": FunctionFragment;
    "ownerWithdrawRewardToken(address,uint256)": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingReward(uint256,address)": FunctionFragment;
    "poolInfo(uint256)": FunctionFragment;
    "poolLength()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewarder(uint256)": FunctionFragment;
    "set(uint256,uint256,address,bool)": FunctionFragment;
    "setZipPerSecond(uint256)": FunctionFragment;
    "totalAccumulatedRewardsLastSetTimestamp()": FunctionFragment;
    "totalAccumulatedZipRewards()": FunctionFragment;
    "totalAllocPoint()": FunctionFragment;
    "totalPaidRewards()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePool(uint256)": FunctionFragment;
    "userInfo(uint256,address)": FunctionFragment;
    "withdraw(uint256,uint128,address)": FunctionFragment;
    "withdrawAll(uint256)": FunctionFragment;
    "withdrawAllAndHarvest(uint256)": FunctionFragment;
    "withdrawAndHarvestLong(uint256,uint128,address,address)": FunctionFragment;
    "withdrawAndHarvestNotifyLong(uint256,uint128,address,address,bytes)": FunctionFragment;
    "withdrawAndHarvestShort(uint256,uint128)": FunctionFragment;
    "withdrawLong(uint256,uint128,address,bool)": FunctionFragment;
    "withdrawNotify(uint256,uint128,address,bytes)": FunctionFragment;
    "withdrawShort(uint256,uint128)": FunctionFragment;
    "zipPerSecond()": FunctionFragment;
    "zipRewardsSpentTime()": FunctionFragment;
    "zipToken()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "add",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "addedTokens", values: [string]): string;
  encodeFunctionData(
    functionFragment: "batch",
    values: [BytesLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "batchPermitToken",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchRevertOnFailure",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositNotify",
    values: [BigNumberish, BigNumberish, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositShort",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositWithPermit",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositWithPermitShort",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "failsafe_setPoolParams",
    values: [
      BigNumberish,
      {
        accZipPerShare: BigNumberish;
        lastRewardTime: BigNumberish;
        allocPoint: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "failsafe_setRewardParams",
    values: [
      BigNumberish,
      boolean,
      BigNumberish,
      boolean,
      BigNumberish,
      boolean,
      BigNumberish,
      boolean,
      BigNumberish,
      boolean,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "failsafe_setUserRewardDebt",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "harvest",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "harvestLong",
    values: [BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "harvestShort",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lpToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "massUpdatePools",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerPauseDepositsAndHarvests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownerUnpauseDepositsAndHarvests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownerWithdrawRewardToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingReward",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewarder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [BigNumberish, BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setZipPerSecond",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAccumulatedRewardsLastSetTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAccumulatedZipRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAllocPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPaidRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllAndHarvest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAndHarvestLong",
    values: [BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAndHarvestNotifyLong",
    values: [BigNumberish, BigNumberish, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAndHarvestShort",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLong",
    values: [BigNumberish, BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNotify",
    values: [BigNumberish, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawShort",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "zipPerSecond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "zipRewardsSpentTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "zipToken", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchPermitToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchRevertOnFailure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositNotify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositShort",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositWithPermitShort",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "failsafe_setPoolParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "failsafe_setRewardParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "failsafe_setUserRewardDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "harvestLong",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "harvestShort",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "massUpdatePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerPauseDepositsAndHarvests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerUnpauseDepositsAndHarvests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerWithdrawRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewarder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setZipPerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAccumulatedRewardsLastSetTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAccumulatedZipRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPaidRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllAndHarvest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAndHarvestLong",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAndHarvestNotifyLong",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAndHarvestShort",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLong",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNotify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawShort",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zipPerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zipRewardsSpentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zipToken", data: BytesLike): Result;

  events: {
    "Deposit(address,uint256,uint256,address)": EventFragment;
    "EmergencyWithdraw(address,uint256,uint256,address)": EventFragment;
    "Harvest(address,uint256,uint256)": EventFragment;
    "LogPoolAddition(uint256,uint256,address,address)": EventFragment;
    "LogSetPool(uint256,uint256,address,bool)": EventFragment;
    "LogUpdatePool(uint256,uint64,uint256,uint256)": EventFragment;
    "LogZipPerSecond(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Withdraw(address,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Harvest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogPoolAddition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogUpdatePool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogZipPerSecond"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class ZipFarms extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ZipFarmsInterface;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "acceptOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    add(
      allocPoint: BigNumberish,
      _lpToken: string,
      _rewarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "add(uint256,address,address)"(
      allocPoint: BigNumberish,
      _lpToken: string,
      _rewarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addedTokens(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "addedTokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    batch(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "batch(bytes[],bool)"(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchPermitToken(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "batchPermitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchRevertOnFailure(
      calls: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "batchRevertOnFailure(bytes[])"(
      calls: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit(uint256,uint128,address)"(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositNotify(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      notifyAddress: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "depositNotify(uint256,uint128,address,address,bytes)"(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      notifyAddress: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositShort(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "depositShort(uint256,uint128)"(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositWithPermit(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "depositWithPermit(uint256,uint128,address,uint256,uint8,bytes32,bytes32)"(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositWithPermitShort(
      pid: BigNumberish,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "depositWithPermitShort(uint256,uint128,uint256,uint8,bytes32,bytes32)"(
      pid: BigNumberish,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "emergencyWithdraw(uint256,address)"(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    failsafe_setPoolParams(
      pid: BigNumberish,
      newPoolInfo: {
        accZipPerShare: BigNumberish;
        lastRewardTime: BigNumberish;
        allocPoint: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "failsafe_setPoolParams(uint256,(uint256,uint64,uint64))"(
      pid: BigNumberish,
      newPoolInfo: {
        accZipPerShare: BigNumberish;
        lastRewardTime: BigNumberish;
        allocPoint: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    failsafe_setRewardParams(
      newZipPerSecond: BigNumberish,
      setNewZipPerSecond: boolean,
      newZipRewardsSpentTime: BigNumberish,
      setZipRewardsSpentTime: boolean,
      newTotalAccumulatedRewardsLastSetTimestamp: BigNumberish,
      setTotalAccumulatedRewardsLastSetTimestamp: boolean,
      newTotalAccumulatedZipRewards: BigNumberish,
      setTotalAccumulatedZipRewards: boolean,
      newTotalPaidRewards: BigNumberish,
      setNewTotalPaidRewards: boolean,
      newTotalAllocPoint: BigNumberish,
      setTotalAllocPoint: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "failsafe_setRewardParams(uint256,bool,uint64,bool,uint64,bool,uint256,bool,uint256,bool,uint256,bool)"(
      newZipPerSecond: BigNumberish,
      setNewZipPerSecond: boolean,
      newZipRewardsSpentTime: BigNumberish,
      setZipRewardsSpentTime: boolean,
      newTotalAccumulatedRewardsLastSetTimestamp: BigNumberish,
      setTotalAccumulatedRewardsLastSetTimestamp: boolean,
      newTotalAccumulatedZipRewards: BigNumberish,
      setTotalAccumulatedZipRewards: boolean,
      newTotalPaidRewards: BigNumberish,
      setNewTotalPaidRewards: boolean,
      newTotalAllocPoint: BigNumberish,
      setTotalAllocPoint: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    failsafe_setUserRewardDebt(
      pid: BigNumberish,
      who: string,
      rewardDebt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "failsafe_setUserRewardDebt(uint256,address,int128)"(
      pid: BigNumberish,
      who: string,
      rewardDebt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    harvest(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "harvest(uint256,address)"(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    harvestLong(
      pid: BigNumberish,
      to: string,
      ignoreNotifyThrow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "harvestLong(uint256,address,bool)"(
      pid: BigNumberish,
      to: string,
      ignoreNotifyThrow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    harvestShort(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "harvestShort(uint256)"(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lpToken(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "lpToken(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    massUpdatePools(
      pids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "massUpdatePools(uint256[])"(
      pids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    ownerPauseDepositsAndHarvests(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "ownerPauseDepositsAndHarvests()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownerUnpauseDepositsAndHarvests(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "ownerUnpauseDepositsAndHarvests()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownerWithdrawRewardToken(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "ownerWithdrawRewardToken(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    pendingReward(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pending: BigNumber }>;

    "pendingReward(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pending: BigNumber }>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        accZipPerShare: BigNumber;
        lastRewardTime: BigNumber;
        allocPoint: BigNumber;
      }
    >;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        accZipPerShare: BigNumber;
        lastRewardTime: BigNumber;
        allocPoint: BigNumber;
      }
    >;

    poolLength(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pools: BigNumber }>;

    "poolLength()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pools: BigNumber }>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewarder(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "rewarder(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "set(uint256,uint256,address,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setZipPerSecond(
      newZipPerSecond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setZipPerSecond(uint256)"(
      newZipPerSecond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalAccumulatedRewardsLastSetTimestamp(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalAccumulatedRewardsLastSetTimestamp()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalAccumulatedZipRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalAccumulatedZipRewards()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalPaidRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalPaidRewards()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePool(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updatePool(uint256)"(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    withdraw(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(uint256,uint128,address)"(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawAll(uint256)"(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAllAndHarvest(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawAllAndHarvest(uint256)"(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAndHarvestLong(
      pid: BigNumberish,
      amount: BigNumberish,
      stakedTo: string,
      rewardsTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawAndHarvestLong(uint256,uint128,address,address)"(
      pid: BigNumberish,
      amount: BigNumberish,
      stakedTo: string,
      rewardsTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAndHarvestNotifyLong(
      pid: BigNumberish,
      amount: BigNumberish,
      stakedTo: string,
      rewardsTo: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawAndHarvestNotifyLong(uint256,uint128,address,address,bytes)"(
      pid: BigNumberish,
      amount: BigNumberish,
      stakedTo: string,
      rewardsTo: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAndHarvestShort(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawAndHarvestShort(uint256,uint128)"(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawLong(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      ignoreNotifyThrow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawLong(uint256,uint128,address,bool)"(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      ignoreNotifyThrow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawNotify(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawNotify(uint256,uint128,address,bytes)"(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawShort(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawShort(uint256,uint128)"(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    zipPerSecond(overrides?: CallOverrides): Promise<[BigNumber]>;

    "zipPerSecond()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    zipRewardsSpentTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "zipRewardsSpentTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    zipToken(overrides?: CallOverrides): Promise<[string]>;

    "zipToken()"(overrides?: CallOverrides): Promise<[string]>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "acceptOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  add(
    allocPoint: BigNumberish,
    _lpToken: string,
    _rewarder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "add(uint256,address,address)"(
    allocPoint: BigNumberish,
    _lpToken: string,
    _rewarder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addedTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "addedTokens(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  batch(
    calls: BytesLike[],
    revertOnFail: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "batch(bytes[],bool)"(
    calls: BytesLike[],
    revertOnFail: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchPermitToken(
    token: string,
    from: string,
    to: string,
    amount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "batchPermitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)"(
    token: string,
    from: string,
    to: string,
    amount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchRevertOnFailure(
    calls: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "batchRevertOnFailure(bytes[])"(
    calls: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    pid: BigNumberish,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit(uint256,uint128,address)"(
    pid: BigNumberish,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositNotify(
    pid: BigNumberish,
    amount: BigNumberish,
    to: string,
    notifyAddress: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "depositNotify(uint256,uint128,address,address,bytes)"(
    pid: BigNumberish,
    amount: BigNumberish,
    to: string,
    notifyAddress: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositShort(
    pid: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "depositShort(uint256,uint128)"(
    pid: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositWithPermit(
    pid: BigNumberish,
    amount: BigNumberish,
    to: string,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "depositWithPermit(uint256,uint128,address,uint256,uint8,bytes32,bytes32)"(
    pid: BigNumberish,
    amount: BigNumberish,
    to: string,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositWithPermitShort(
    pid: BigNumberish,
    amount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "depositWithPermitShort(uint256,uint128,uint256,uint8,bytes32,bytes32)"(
    pid: BigNumberish,
    amount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    pid: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "emergencyWithdraw(uint256,address)"(
    pid: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  failsafe_setPoolParams(
    pid: BigNumberish,
    newPoolInfo: {
      accZipPerShare: BigNumberish;
      lastRewardTime: BigNumberish;
      allocPoint: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "failsafe_setPoolParams(uint256,(uint256,uint64,uint64))"(
    pid: BigNumberish,
    newPoolInfo: {
      accZipPerShare: BigNumberish;
      lastRewardTime: BigNumberish;
      allocPoint: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  failsafe_setRewardParams(
    newZipPerSecond: BigNumberish,
    setNewZipPerSecond: boolean,
    newZipRewardsSpentTime: BigNumberish,
    setZipRewardsSpentTime: boolean,
    newTotalAccumulatedRewardsLastSetTimestamp: BigNumberish,
    setTotalAccumulatedRewardsLastSetTimestamp: boolean,
    newTotalAccumulatedZipRewards: BigNumberish,
    setTotalAccumulatedZipRewards: boolean,
    newTotalPaidRewards: BigNumberish,
    setNewTotalPaidRewards: boolean,
    newTotalAllocPoint: BigNumberish,
    setTotalAllocPoint: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "failsafe_setRewardParams(uint256,bool,uint64,bool,uint64,bool,uint256,bool,uint256,bool,uint256,bool)"(
    newZipPerSecond: BigNumberish,
    setNewZipPerSecond: boolean,
    newZipRewardsSpentTime: BigNumberish,
    setZipRewardsSpentTime: boolean,
    newTotalAccumulatedRewardsLastSetTimestamp: BigNumberish,
    setTotalAccumulatedRewardsLastSetTimestamp: boolean,
    newTotalAccumulatedZipRewards: BigNumberish,
    setTotalAccumulatedZipRewards: boolean,
    newTotalPaidRewards: BigNumberish,
    setNewTotalPaidRewards: boolean,
    newTotalAllocPoint: BigNumberish,
    setTotalAllocPoint: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  failsafe_setUserRewardDebt(
    pid: BigNumberish,
    who: string,
    rewardDebt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "failsafe_setUserRewardDebt(uint256,address,int128)"(
    pid: BigNumberish,
    who: string,
    rewardDebt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  harvest(
    pid: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "harvest(uint256,address)"(
    pid: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  harvestLong(
    pid: BigNumberish,
    to: string,
    ignoreNotifyThrow: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "harvestLong(uint256,address,bool)"(
    pid: BigNumberish,
    to: string,
    ignoreNotifyThrow: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  harvestShort(
    pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "harvestShort(uint256)"(
    pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lpToken(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "lpToken(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  massUpdatePools(
    pids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "massUpdatePools(uint256[])"(
    pids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  ownerPauseDepositsAndHarvests(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "ownerPauseDepositsAndHarvests()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownerUnpauseDepositsAndHarvests(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "ownerUnpauseDepositsAndHarvests()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownerWithdrawRewardToken(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "ownerWithdrawRewardToken(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  pendingReward(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "pendingReward(uint256,address)"(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      accZipPerShare: BigNumber;
      lastRewardTime: BigNumber;
      allocPoint: BigNumber;
    }
  >;

  "poolInfo(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      accZipPerShare: BigNumber;
      lastRewardTime: BigNumber;
      allocPoint: BigNumber;
    }
  >;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewarder(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "rewarder(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  set(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    _rewarder: string,
    overwrite: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "set(uint256,uint256,address,bool)"(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    _rewarder: string,
    overwrite: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setZipPerSecond(
    newZipPerSecond: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setZipPerSecond(uint256)"(
    newZipPerSecond: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalAccumulatedRewardsLastSetTimestamp(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalAccumulatedRewardsLastSetTimestamp()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalAccumulatedZipRewards(overrides?: CallOverrides): Promise<BigNumber>;

  "totalAccumulatedZipRewards()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalPaidRewards(overrides?: CallOverrides): Promise<BigNumber>;

  "totalPaidRewards()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePool(
    pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updatePool(uint256)"(
    pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
  >;

  "userInfo(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
  >;

  withdraw(
    pid: BigNumberish,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(uint256,uint128,address)"(
    pid: BigNumberish,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawAll(uint256)"(
    pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAllAndHarvest(
    pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawAllAndHarvest(uint256)"(
    pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAndHarvestLong(
    pid: BigNumberish,
    amount: BigNumberish,
    stakedTo: string,
    rewardsTo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawAndHarvestLong(uint256,uint128,address,address)"(
    pid: BigNumberish,
    amount: BigNumberish,
    stakedTo: string,
    rewardsTo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAndHarvestNotifyLong(
    pid: BigNumberish,
    amount: BigNumberish,
    stakedTo: string,
    rewardsTo: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawAndHarvestNotifyLong(uint256,uint128,address,address,bytes)"(
    pid: BigNumberish,
    amount: BigNumberish,
    stakedTo: string,
    rewardsTo: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAndHarvestShort(
    pid: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawAndHarvestShort(uint256,uint128)"(
    pid: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawLong(
    pid: BigNumberish,
    amount: BigNumberish,
    to: string,
    ignoreNotifyThrow: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawLong(uint256,uint128,address,bool)"(
    pid: BigNumberish,
    amount: BigNumberish,
    to: string,
    ignoreNotifyThrow: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawNotify(
    pid: BigNumberish,
    amount: BigNumberish,
    to: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawNotify(uint256,uint128,address,bytes)"(
    pid: BigNumberish,
    amount: BigNumberish,
    to: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawShort(
    pid: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawShort(uint256,uint128)"(
    pid: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  zipPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

  "zipPerSecond()"(overrides?: CallOverrides): Promise<BigNumber>;

  zipRewardsSpentTime(overrides?: CallOverrides): Promise<BigNumber>;

  "zipRewardsSpentTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  zipToken(overrides?: CallOverrides): Promise<string>;

  "zipToken()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    "acceptOwnership()"(overrides?: CallOverrides): Promise<void>;

    add(
      allocPoint: BigNumberish,
      _lpToken: string,
      _rewarder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "add(uint256,address,address)"(
      allocPoint: BigNumberish,
      _lpToken: string,
      _rewarder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addedTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "addedTokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    batch(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "batch(bytes[],bool)"(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    batchPermitToken(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "batchPermitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    batchRevertOnFailure(
      calls: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "batchRevertOnFailure(bytes[])"(
      calls: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,uint128,address)"(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    depositNotify(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      notifyAddress: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositNotify(uint256,uint128,address,address,bytes)"(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      notifyAddress: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    depositShort(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositShort(uint256,uint128)"(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositWithPermit(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositWithPermit(uint256,uint128,address,uint256,uint8,bytes32,bytes32)"(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    depositWithPermitShort(
      pid: BigNumberish,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositWithPermitShort(uint256,uint128,uint256,uint8,bytes32,bytes32)"(
      pid: BigNumberish,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(
      pid: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "emergencyWithdraw(uint256,address)"(
      pid: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    failsafe_setPoolParams(
      pid: BigNumberish,
      newPoolInfo: {
        accZipPerShare: BigNumberish;
        lastRewardTime: BigNumberish;
        allocPoint: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "failsafe_setPoolParams(uint256,(uint256,uint64,uint64))"(
      pid: BigNumberish,
      newPoolInfo: {
        accZipPerShare: BigNumberish;
        lastRewardTime: BigNumberish;
        allocPoint: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    failsafe_setRewardParams(
      newZipPerSecond: BigNumberish,
      setNewZipPerSecond: boolean,
      newZipRewardsSpentTime: BigNumberish,
      setZipRewardsSpentTime: boolean,
      newTotalAccumulatedRewardsLastSetTimestamp: BigNumberish,
      setTotalAccumulatedRewardsLastSetTimestamp: boolean,
      newTotalAccumulatedZipRewards: BigNumberish,
      setTotalAccumulatedZipRewards: boolean,
      newTotalPaidRewards: BigNumberish,
      setNewTotalPaidRewards: boolean,
      newTotalAllocPoint: BigNumberish,
      setTotalAllocPoint: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "failsafe_setRewardParams(uint256,bool,uint64,bool,uint64,bool,uint256,bool,uint256,bool,uint256,bool)"(
      newZipPerSecond: BigNumberish,
      setNewZipPerSecond: boolean,
      newZipRewardsSpentTime: BigNumberish,
      setZipRewardsSpentTime: boolean,
      newTotalAccumulatedRewardsLastSetTimestamp: BigNumberish,
      setTotalAccumulatedRewardsLastSetTimestamp: boolean,
      newTotalAccumulatedZipRewards: BigNumberish,
      setTotalAccumulatedZipRewards: boolean,
      newTotalPaidRewards: BigNumberish,
      setNewTotalPaidRewards: boolean,
      newTotalAllocPoint: BigNumberish,
      setTotalAllocPoint: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    failsafe_setUserRewardDebt(
      pid: BigNumberish,
      who: string,
      rewardDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "failsafe_setUserRewardDebt(uint256,address,int128)"(
      pid: BigNumberish,
      who: string,
      rewardDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    harvest(
      pid: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "harvest(uint256,address)"(
      pid: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvestLong(
      pid: BigNumberish,
      to: string,
      ignoreNotifyThrow: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "harvestLong(uint256,address,bool)"(
      pid: BigNumberish,
      to: string,
      ignoreNotifyThrow: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvestShort(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "harvestShort(uint256)"(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lpToken(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "lpToken(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    massUpdatePools(
      pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "massUpdatePools(uint256[])"(
      pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    ownerPauseDepositsAndHarvests(overrides?: CallOverrides): Promise<void>;

    "ownerPauseDepositsAndHarvests()"(overrides?: CallOverrides): Promise<void>;

    ownerUnpauseDepositsAndHarvests(overrides?: CallOverrides): Promise<void>;

    "ownerUnpauseDepositsAndHarvests()"(
      overrides?: CallOverrides
    ): Promise<void>;

    ownerWithdrawRewardToken(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ownerWithdrawRewardToken(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    pendingReward(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingReward(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        accZipPerShare: BigNumber;
        lastRewardTime: BigNumber;
        allocPoint: BigNumber;
      }
    >;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        accZipPerShare: BigNumber;
        lastRewardTime: BigNumber;
        allocPoint: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rewarder(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "rewarder(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "set(uint256,uint256,address,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setZipPerSecond(
      newZipPerSecond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setZipPerSecond(uint256)"(
      newZipPerSecond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalAccumulatedRewardsLastSetTimestamp(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalAccumulatedRewardsLastSetTimestamp()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalAccumulatedZipRewards(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAccumulatedZipRewards()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalPaidRewards(overrides?: CallOverrides): Promise<BigNumber>;

    "totalPaidRewards()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePool(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        accZipPerShare: BigNumber;
        lastRewardTime: BigNumber;
        allocPoint: BigNumber;
      }
    >;

    "updatePool(uint256)"(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        accZipPerShare: BigNumber;
        lastRewardTime: BigNumber;
        allocPoint: BigNumber;
      }
    >;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    withdraw(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256,uint128,address)"(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "withdrawAll(uint256)"(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAllAndHarvest(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawAllAndHarvest(uint256)"(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawAndHarvestLong(
      pid: BigNumberish,
      amount: BigNumberish,
      stakedTo: string,
      rewardsTo: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawAndHarvestLong(uint256,uint128,address,address)"(
      pid: BigNumberish,
      amount: BigNumberish,
      stakedTo: string,
      rewardsTo: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawAndHarvestNotifyLong(
      pid: BigNumberish,
      amount: BigNumberish,
      stakedTo: string,
      rewardsTo: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawAndHarvestNotifyLong(uint256,uint128,address,address,bytes)"(
      pid: BigNumberish,
      amount: BigNumberish,
      stakedTo: string,
      rewardsTo: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawAndHarvestShort(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawAndHarvestShort(uint256,uint128)"(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawLong(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      ignoreNotifyThrow: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawLong(uint256,uint128,address,bool)"(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      ignoreNotifyThrow: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawNotify(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawNotify(uint256,uint128,address,bytes)"(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawShort(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawShort(uint256,uint128)"(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    zipPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    "zipPerSecond()"(overrides?: CallOverrides): Promise<BigNumber>;

    zipRewardsSpentTime(overrides?: CallOverrides): Promise<BigNumber>;

    "zipRewardsSpentTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    zipToken(overrides?: CallOverrides): Promise<string>;

    "zipToken()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Deposit(
      user: string | null,
      pid: BigNumberish | null,
      amount: null,
      to: string | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      { user: string; pid: BigNumber; amount: BigNumber; to: string }
    >;

    EmergencyWithdraw(
      user: string | null,
      pid: BigNumberish | null,
      amount: null,
      to: string | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      { user: string; pid: BigNumber; amount: BigNumber; to: string }
    >;

    Harvest(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amount: BigNumber }
    >;

    LogPoolAddition(
      pid: BigNumberish | null,
      allocPoint: null,
      lpToken: string | null,
      rewarder: string | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, string],
      {
        pid: BigNumber;
        allocPoint: BigNumber;
        lpToken: string;
        rewarder: string;
      }
    >;

    LogSetPool(
      pid: BigNumberish | null,
      allocPoint: null,
      rewarder: string | null,
      overwrite: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, boolean],
      {
        pid: BigNumber;
        allocPoint: BigNumber;
        rewarder: string;
        overwrite: boolean;
      }
    >;

    LogUpdatePool(
      pid: BigNumberish | null,
      lastRewardTime: null,
      lpSupply: null,
      accZipPerShare: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        pid: BigNumber;
        lastRewardTime: BigNumber;
        lpSupply: BigNumber;
        accZipPerShare: BigNumber;
      }
    >;

    LogZipPerSecond(
      zipPerSecond: null
    ): TypedEventFilter<[BigNumber], { zipPerSecond: BigNumber }>;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Paused(account: null): TypedEventFilter<[string], { account: string }>;

    Unpaused(account: null): TypedEventFilter<[string], { account: string }>;

    Withdraw(
      user: string | null,
      pid: BigNumberish | null,
      amount: null,
      to: string | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      { user: string; pid: BigNumber; amount: BigNumber; to: string }
    >;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "acceptOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    add(
      allocPoint: BigNumberish,
      _lpToken: string,
      _rewarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "add(uint256,address,address)"(
      allocPoint: BigNumberish,
      _lpToken: string,
      _rewarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addedTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "addedTokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batch(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "batch(bytes[],bool)"(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchPermitToken(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "batchPermitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchRevertOnFailure(
      calls: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "batchRevertOnFailure(bytes[])"(
      calls: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit(uint256,uint128,address)"(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositNotify(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      notifyAddress: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "depositNotify(uint256,uint128,address,address,bytes)"(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      notifyAddress: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositShort(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "depositShort(uint256,uint128)"(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositWithPermit(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "depositWithPermit(uint256,uint128,address,uint256,uint8,bytes32,bytes32)"(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositWithPermitShort(
      pid: BigNumberish,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "depositWithPermitShort(uint256,uint128,uint256,uint8,bytes32,bytes32)"(
      pid: BigNumberish,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "emergencyWithdraw(uint256,address)"(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    failsafe_setPoolParams(
      pid: BigNumberish,
      newPoolInfo: {
        accZipPerShare: BigNumberish;
        lastRewardTime: BigNumberish;
        allocPoint: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "failsafe_setPoolParams(uint256,(uint256,uint64,uint64))"(
      pid: BigNumberish,
      newPoolInfo: {
        accZipPerShare: BigNumberish;
        lastRewardTime: BigNumberish;
        allocPoint: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    failsafe_setRewardParams(
      newZipPerSecond: BigNumberish,
      setNewZipPerSecond: boolean,
      newZipRewardsSpentTime: BigNumberish,
      setZipRewardsSpentTime: boolean,
      newTotalAccumulatedRewardsLastSetTimestamp: BigNumberish,
      setTotalAccumulatedRewardsLastSetTimestamp: boolean,
      newTotalAccumulatedZipRewards: BigNumberish,
      setTotalAccumulatedZipRewards: boolean,
      newTotalPaidRewards: BigNumberish,
      setNewTotalPaidRewards: boolean,
      newTotalAllocPoint: BigNumberish,
      setTotalAllocPoint: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "failsafe_setRewardParams(uint256,bool,uint64,bool,uint64,bool,uint256,bool,uint256,bool,uint256,bool)"(
      newZipPerSecond: BigNumberish,
      setNewZipPerSecond: boolean,
      newZipRewardsSpentTime: BigNumberish,
      setZipRewardsSpentTime: boolean,
      newTotalAccumulatedRewardsLastSetTimestamp: BigNumberish,
      setTotalAccumulatedRewardsLastSetTimestamp: boolean,
      newTotalAccumulatedZipRewards: BigNumberish,
      setTotalAccumulatedZipRewards: boolean,
      newTotalPaidRewards: BigNumberish,
      setNewTotalPaidRewards: boolean,
      newTotalAllocPoint: BigNumberish,
      setTotalAllocPoint: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    failsafe_setUserRewardDebt(
      pid: BigNumberish,
      who: string,
      rewardDebt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "failsafe_setUserRewardDebt(uint256,address,int128)"(
      pid: BigNumberish,
      who: string,
      rewardDebt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    harvest(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "harvest(uint256,address)"(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    harvestLong(
      pid: BigNumberish,
      to: string,
      ignoreNotifyThrow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "harvestLong(uint256,address,bool)"(
      pid: BigNumberish,
      to: string,
      ignoreNotifyThrow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    harvestShort(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "harvestShort(uint256)"(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lpToken(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "lpToken(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    massUpdatePools(
      pids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "massUpdatePools(uint256[])"(
      pids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    ownerPauseDepositsAndHarvests(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "ownerPauseDepositsAndHarvests()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownerUnpauseDepositsAndHarvests(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "ownerUnpauseDepositsAndHarvests()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownerWithdrawRewardToken(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "ownerWithdrawRewardToken(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingReward(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingReward(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewarder(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "rewarder(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "set(uint256,uint256,address,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setZipPerSecond(
      newZipPerSecond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setZipPerSecond(uint256)"(
      newZipPerSecond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalAccumulatedRewardsLastSetTimestamp(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalAccumulatedRewardsLastSetTimestamp()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalAccumulatedZipRewards(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAccumulatedZipRewards()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalPaidRewards(overrides?: CallOverrides): Promise<BigNumber>;

    "totalPaidRewards()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePool(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updatePool(uint256)"(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(uint256,uint128,address)"(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawAll(uint256)"(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAllAndHarvest(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawAllAndHarvest(uint256)"(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAndHarvestLong(
      pid: BigNumberish,
      amount: BigNumberish,
      stakedTo: string,
      rewardsTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawAndHarvestLong(uint256,uint128,address,address)"(
      pid: BigNumberish,
      amount: BigNumberish,
      stakedTo: string,
      rewardsTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAndHarvestNotifyLong(
      pid: BigNumberish,
      amount: BigNumberish,
      stakedTo: string,
      rewardsTo: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawAndHarvestNotifyLong(uint256,uint128,address,address,bytes)"(
      pid: BigNumberish,
      amount: BigNumberish,
      stakedTo: string,
      rewardsTo: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAndHarvestShort(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawAndHarvestShort(uint256,uint128)"(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawLong(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      ignoreNotifyThrow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawLong(uint256,uint128,address,bool)"(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      ignoreNotifyThrow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawNotify(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawNotify(uint256,uint128,address,bytes)"(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawShort(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawShort(uint256,uint128)"(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    zipPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    "zipPerSecond()"(overrides?: CallOverrides): Promise<BigNumber>;

    zipRewardsSpentTime(overrides?: CallOverrides): Promise<BigNumber>;

    "zipRewardsSpentTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    zipToken(overrides?: CallOverrides): Promise<BigNumber>;

    "zipToken()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "acceptOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    add(
      allocPoint: BigNumberish,
      _lpToken: string,
      _rewarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "add(uint256,address,address)"(
      allocPoint: BigNumberish,
      _lpToken: string,
      _rewarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addedTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "addedTokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batch(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "batch(bytes[],bool)"(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchPermitToken(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "batchPermitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchRevertOnFailure(
      calls: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "batchRevertOnFailure(bytes[])"(
      calls: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,uint128,address)"(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositNotify(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      notifyAddress: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "depositNotify(uint256,uint128,address,address,bytes)"(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      notifyAddress: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositShort(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "depositShort(uint256,uint128)"(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositWithPermit(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "depositWithPermit(uint256,uint128,address,uint256,uint8,bytes32,bytes32)"(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositWithPermitShort(
      pid: BigNumberish,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "depositWithPermitShort(uint256,uint128,uint256,uint8,bytes32,bytes32)"(
      pid: BigNumberish,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "emergencyWithdraw(uint256,address)"(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    failsafe_setPoolParams(
      pid: BigNumberish,
      newPoolInfo: {
        accZipPerShare: BigNumberish;
        lastRewardTime: BigNumberish;
        allocPoint: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "failsafe_setPoolParams(uint256,(uint256,uint64,uint64))"(
      pid: BigNumberish,
      newPoolInfo: {
        accZipPerShare: BigNumberish;
        lastRewardTime: BigNumberish;
        allocPoint: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    failsafe_setRewardParams(
      newZipPerSecond: BigNumberish,
      setNewZipPerSecond: boolean,
      newZipRewardsSpentTime: BigNumberish,
      setZipRewardsSpentTime: boolean,
      newTotalAccumulatedRewardsLastSetTimestamp: BigNumberish,
      setTotalAccumulatedRewardsLastSetTimestamp: boolean,
      newTotalAccumulatedZipRewards: BigNumberish,
      setTotalAccumulatedZipRewards: boolean,
      newTotalPaidRewards: BigNumberish,
      setNewTotalPaidRewards: boolean,
      newTotalAllocPoint: BigNumberish,
      setTotalAllocPoint: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "failsafe_setRewardParams(uint256,bool,uint64,bool,uint64,bool,uint256,bool,uint256,bool,uint256,bool)"(
      newZipPerSecond: BigNumberish,
      setNewZipPerSecond: boolean,
      newZipRewardsSpentTime: BigNumberish,
      setZipRewardsSpentTime: boolean,
      newTotalAccumulatedRewardsLastSetTimestamp: BigNumberish,
      setTotalAccumulatedRewardsLastSetTimestamp: boolean,
      newTotalAccumulatedZipRewards: BigNumberish,
      setTotalAccumulatedZipRewards: boolean,
      newTotalPaidRewards: BigNumberish,
      setNewTotalPaidRewards: boolean,
      newTotalAllocPoint: BigNumberish,
      setTotalAllocPoint: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    failsafe_setUserRewardDebt(
      pid: BigNumberish,
      who: string,
      rewardDebt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "failsafe_setUserRewardDebt(uint256,address,int128)"(
      pid: BigNumberish,
      who: string,
      rewardDebt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    harvest(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "harvest(uint256,address)"(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    harvestLong(
      pid: BigNumberish,
      to: string,
      ignoreNotifyThrow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "harvestLong(uint256,address,bool)"(
      pid: BigNumberish,
      to: string,
      ignoreNotifyThrow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    harvestShort(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "harvestShort(uint256)"(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lpToken(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lpToken(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    massUpdatePools(
      pids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "massUpdatePools(uint256[])"(
      pids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerPauseDepositsAndHarvests(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "ownerPauseDepositsAndHarvests()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownerUnpauseDepositsAndHarvests(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "ownerUnpauseDepositsAndHarvests()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownerWithdrawRewardToken(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "ownerWithdrawRewardToken(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingReward(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingReward(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewarder(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewarder(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "set(uint256,uint256,address,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setZipPerSecond(
      newZipPerSecond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setZipPerSecond(uint256)"(
      newZipPerSecond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalAccumulatedRewardsLastSetTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalAccumulatedRewardsLastSetTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalAccumulatedZipRewards(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalAccumulatedZipRewards()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalAllocPoint()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalPaidRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalPaidRewards()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePool(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updatePool(uint256)"(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,uint128,address)"(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawAll(uint256)"(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAllAndHarvest(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawAllAndHarvest(uint256)"(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAndHarvestLong(
      pid: BigNumberish,
      amount: BigNumberish,
      stakedTo: string,
      rewardsTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawAndHarvestLong(uint256,uint128,address,address)"(
      pid: BigNumberish,
      amount: BigNumberish,
      stakedTo: string,
      rewardsTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAndHarvestNotifyLong(
      pid: BigNumberish,
      amount: BigNumberish,
      stakedTo: string,
      rewardsTo: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawAndHarvestNotifyLong(uint256,uint128,address,address,bytes)"(
      pid: BigNumberish,
      amount: BigNumberish,
      stakedTo: string,
      rewardsTo: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAndHarvestShort(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawAndHarvestShort(uint256,uint128)"(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLong(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      ignoreNotifyThrow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawLong(uint256,uint128,address,bool)"(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      ignoreNotifyThrow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawNotify(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawNotify(uint256,uint128,address,bytes)"(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawShort(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawShort(uint256,uint128)"(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    zipPerSecond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "zipPerSecond()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    zipRewardsSpentTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "zipRewardsSpentTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    zipToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "zipToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
