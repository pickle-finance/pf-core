/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface OxdLensInterface extends ethers.utils.Interface {
  functions: {
    "gaugeBySolidPool(address)": FunctionFragment;
    "gaugesFactoryAddress()": FunctionFragment;
    "initializeProxyStorage(address,address,address,address,address,address,address,address,address,address,address,address)": FunctionFragment;
    "isOxPool(address)": FunctionFragment;
    "isPartner(address)": FunctionFragment;
    "isProxyPartner(address)": FunctionFragment;
    "migrateableOxPools(address)": FunctionFragment;
    "minterAddress()": FunctionFragment;
    "oxPoolBySolidPool(address)": FunctionFragment;
    "oxPoolData(address)": FunctionFragment;
    "oxPoolFactory()": FunctionFragment;
    "oxPoolFactoryAddress()": FunctionFragment;
    "oxPoolsAddresses()": FunctionFragment;
    "oxPoolsData(address[])": FunctionFragment;
    "oxPoolsLength()": FunctionFragment;
    "oxPoolsMigrationMapping(address)": FunctionFragment;
    "oxSolid()": FunctionFragment;
    "oxSolidAddress()": FunctionFragment;
    "oxSolidBalanceOf(address)": FunctionFragment;
    "oxSolidRewardPoolPosition(address)": FunctionFragment;
    "oxSolidRewardsPool()": FunctionFragment;
    "oxSolidRewardsPoolAddress()": FunctionFragment;
    "oxd()": FunctionFragment;
    "oxdAddress()": FunctionFragment;
    "oxdTotalSupply()": FunctionFragment;
    "oxdV1Address()": FunctionFragment;
    "oxdV1RedeemAddress()": FunctionFragment;
    "oxdV1RewardsAddress()": FunctionFragment;
    "oxdV1StakedOxSolidBalanceOf(address)": FunctionFragment;
    "oxdV1StakedOxSolidStakableAmount(address)": FunctionFragment;
    "partnersRewardsPoolAddress()": FunctionFragment;
    "poolsFactoryAddress()": FunctionFragment;
    "poolsPositions(address)": FunctionFragment;
    "positionsOf(address)": FunctionFragment;
    "protocolAddresses()": FunctionFragment;
    "proxyStorageInitialized()": FunctionFragment;
    "rewardTokenPositionOf(address,address,address)": FunctionFragment;
    "rewardTokensData(address)": FunctionFragment;
    "rewardTokensDatas(address[])": FunctionFragment;
    "rewardTokensPositionsOf(address,address)": FunctionFragment;
    "rewardsDistributorAddress()": FunctionFragment;
    "setMigration(address,address)": FunctionFragment;
    "setMigrations(address[],address[])": FunctionFragment;
    "solid()": FunctionFragment;
    "solidAddress()": FunctionFragment;
    "solidBalanceOf(address)": FunctionFragment;
    "solidInflationSinceInception()": FunctionFragment;
    "solidPoolByOxPool(address)": FunctionFragment;
    "solidlyLens()": FunctionFragment;
    "solidlyLensAddress()": FunctionFragment;
    "stakedOxSolidBalanceOf(address)": FunctionFragment;
    "stakingPoolPosition(address,address)": FunctionFragment;
    "stakingPoolsPositions(address)": FunctionFragment;
    "stakingRewardsByOxPool(address)": FunctionFragment;
    "stakingRewardsBySolidPool(address)": FunctionFragment;
    "tokenId()": FunctionFragment;
    "tokensAllowlist()": FunctionFragment;
    "tokensAllowlistAddress()": FunctionFragment;
    "transferTreasury(address)": FunctionFragment;
    "treasuryAddress()": FunctionFragment;
    "userProxiesLength()": FunctionFragment;
    "userProxyByAccount(address)": FunctionFragment;
    "userProxyByIndex(uint256)": FunctionFragment;
    "userProxyFactory()": FunctionFragment;
    "userProxyFactoryAddress()": FunctionFragment;
    "userProxyInterfaceAddress()": FunctionFragment;
    "ve()": FunctionFragment;
    "veAddress()": FunctionFragment;
    "veTotalBalanceOf(tuple[])": FunctionFragment;
    "vlOxd()": FunctionFragment;
    "vlOxdAddress()": FunctionFragment;
    "vlOxdLocksData(address)": FunctionFragment;
    "vlOxdRewardTokenPositionOf(address,address)": FunctionFragment;
    "vlOxdRewardTokenPositionsOf(address)": FunctionFragment;
    "votePositionsOf(address)": FunctionFragment;
    "voterAddress()": FunctionFragment;
    "voterProxy()": FunctionFragment;
    "voterProxyAddress()": FunctionFragment;
    "votingSnapshot()": FunctionFragment;
    "votingSnapshotAddress()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "gaugeBySolidPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "gaugesFactoryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeProxyStorage",
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "isOxPool", values: [string]): string;
  encodeFunctionData(functionFragment: "isPartner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isProxyPartner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateableOxPools",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "minterAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oxPoolBySolidPool",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "oxPoolData", values: [string]): string;
  encodeFunctionData(
    functionFragment: "oxPoolFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oxPoolFactoryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oxPoolsAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oxPoolsData",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "oxPoolsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oxPoolsMigrationMapping",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "oxSolid", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "oxSolidAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oxSolidBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "oxSolidRewardPoolPosition",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "oxSolidRewardsPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oxSolidRewardsPoolAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oxd", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "oxdAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oxdTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oxdV1Address",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oxdV1RedeemAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oxdV1RewardsAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oxdV1StakedOxSolidBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "oxdV1StakedOxSolidStakableAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "partnersRewardsPoolAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolsFactoryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolsPositions",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "positionsOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "protocolAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxyStorageInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokenPositionOf",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokensData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokensDatas",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokensPositionsOf",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsDistributorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMigration",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMigrations",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(functionFragment: "solid", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "solidAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "solidBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "solidInflationSinceInception",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "solidPoolByOxPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "solidlyLens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "solidlyLensAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakedOxSolidBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingPoolPosition",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingPoolsPositions",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingRewardsByOxPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingRewardsBySolidPool",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "tokenId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokensAllowlist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensAllowlistAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferTreasury",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userProxiesLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userProxyByAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userProxyByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userProxyFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userProxyFactoryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userProxyInterfaceAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ve", values?: undefined): string;
  encodeFunctionData(functionFragment: "veAddress", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "veTotalBalanceOf",
    values: [
      { tokenId: BigNumberish; balanceOf: BigNumberish; locked: BigNumberish }[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "vlOxd", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vlOxdAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vlOxdLocksData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vlOxdRewardTokenPositionOf",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "vlOxdRewardTokenPositionsOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "votePositionsOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "voterAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "voterProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "voterProxyAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingSnapshot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingSnapshotAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "gaugeBySolidPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gaugesFactoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeProxyStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOxPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPartner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isProxyPartner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateableOxPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oxPoolBySolidPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oxPoolData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oxPoolFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oxPoolFactoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oxPoolsAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oxPoolsData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oxPoolsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oxPoolsMigrationMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oxSolid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oxSolidAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oxSolidBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oxSolidRewardPoolPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oxSolidRewardsPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oxSolidRewardsPoolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oxd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oxdAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oxdTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oxdV1Address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oxdV1RedeemAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oxdV1RewardsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oxdV1StakedOxSolidBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oxdV1StakedOxSolidStakableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "partnersRewardsPoolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolsFactoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolsPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxyStorageInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokenPositionOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokensData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokensDatas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokensPositionsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsDistributorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMigrations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "solid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "solidAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "solidBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "solidInflationSinceInception",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "solidPoolByOxPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "solidlyLens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "solidlyLensAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakedOxSolidBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingPoolPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingPoolsPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingRewardsByOxPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingRewardsBySolidPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensAllowlist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensAllowlistAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userProxiesLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userProxyByAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userProxyByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userProxyFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userProxyFactoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userProxyInterfaceAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "veAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "veTotalBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vlOxd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vlOxdAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vlOxdLocksData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vlOxdRewardTokenPositionOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vlOxdRewardTokenPositionsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votePositionsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voterProxy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voterProxyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingSnapshot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingSnapshotAddress",
    data: BytesLike
  ): Result;

  events: {};
}

export class OxdLens extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OxdLensInterface;

  functions: {
    gaugeBySolidPool(
      solidPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "gaugeBySolidPool(address)"(
      solidPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    gaugesFactoryAddress(overrides?: CallOverrides): Promise<[string]>;

    "gaugesFactoryAddress()"(overrides?: CallOverrides): Promise<[string]>;

    initializeProxyStorage(
      _oxPoolFactoryAddress: string,
      _userProxyFactoryAddress: string,
      _solidlyLensAddress: string,
      _oxdAddress: string,
      _vlOxdAddress: string,
      _oxSolidAddress: string,
      _oxSolidRewardsPoolAddress: string,
      _rewardsDistributorAddress: string,
      _partnersRewardsPoolAddress: string,
      _userProxyInterfaceAddress: string,
      _oxdV1RewardsAddress: string,
      _oxdV1RedeemAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initializeProxyStorage(address,address,address,address,address,address,address,address,address,address,address,address)"(
      _oxPoolFactoryAddress: string,
      _userProxyFactoryAddress: string,
      _solidlyLensAddress: string,
      _oxdAddress: string,
      _vlOxdAddress: string,
      _oxSolidAddress: string,
      _oxSolidRewardsPoolAddress: string,
      _rewardsDistributorAddress: string,
      _partnersRewardsPoolAddress: string,
      _userProxyInterfaceAddress: string,
      _oxdV1RewardsAddress: string,
      _oxdV1RedeemAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isOxPool(
      oxPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isOxPool(address)"(
      oxPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPartner(
      userProxyAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isPartner(address)"(
      userProxyAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isProxyPartner(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isProxyPartner(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    migrateableOxPools(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, string, BigNumber] & {
          fromOxPoolAddress: string;
          toOxPoolAddress: string;
          fromStakingPoolAddress: string;
          balanceOf: BigNumber;
        })[]
      ]
    >;

    "migrateableOxPools(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, string, BigNumber] & {
          fromOxPoolAddress: string;
          toOxPoolAddress: string;
          fromStakingPoolAddress: string;
          balanceOf: BigNumber;
        })[]
      ]
    >;

    minterAddress(overrides?: CallOverrides): Promise<[string]>;

    "minterAddress()"(overrides?: CallOverrides): Promise<[string]>;

    oxPoolBySolidPool(
      solidPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "oxPoolBySolidPool(address)"(
      solidPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    oxPoolData(
      oxPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          BigNumber,
          BigNumber,
          [
            string,
            string,
            boolean,
            string,
            string,
            string,
            string,
            string[],
            string,
            BigNumber
          ] & {
            id: string;
            symbol: string;
            stable: boolean;
            token0Address: string;
            token1Address: string;
            gaugeAddress: string;
            bribeAddress: string;
            bribeTokensAddresses: string[];
            fees: string;
            totalSupply: BigNumber;
          }
        ] & {
          id: string;
          stakingAddress: string;
          stakedTotalSupply: BigNumber;
          totalSupply: BigNumber;
          poolData: [
            string,
            string,
            boolean,
            string,
            string,
            string,
            string,
            string[],
            string,
            BigNumber
          ] & {
            id: string;
            symbol: string;
            stable: boolean;
            token0Address: string;
            token1Address: string;
            gaugeAddress: string;
            bribeAddress: string;
            bribeTokensAddresses: string[];
            fees: string;
            totalSupply: BigNumber;
          };
        }
      ]
    >;

    "oxPoolData(address)"(
      oxPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          BigNumber,
          BigNumber,
          [
            string,
            string,
            boolean,
            string,
            string,
            string,
            string,
            string[],
            string,
            BigNumber
          ] & {
            id: string;
            symbol: string;
            stable: boolean;
            token0Address: string;
            token1Address: string;
            gaugeAddress: string;
            bribeAddress: string;
            bribeTokensAddresses: string[];
            fees: string;
            totalSupply: BigNumber;
          }
        ] & {
          id: string;
          stakingAddress: string;
          stakedTotalSupply: BigNumber;
          totalSupply: BigNumber;
          poolData: [
            string,
            string,
            boolean,
            string,
            string,
            string,
            string,
            string[],
            string,
            BigNumber
          ] & {
            id: string;
            symbol: string;
            stable: boolean;
            token0Address: string;
            token1Address: string;
            gaugeAddress: string;
            bribeAddress: string;
            bribeTokensAddresses: string[];
            fees: string;
            totalSupply: BigNumber;
          };
        }
      ]
    >;

    oxPoolFactory(overrides?: CallOverrides): Promise<[string]>;

    "oxPoolFactory()"(overrides?: CallOverrides): Promise<[string]>;

    oxPoolFactoryAddress(overrides?: CallOverrides): Promise<[string]>;

    "oxPoolFactoryAddress()"(overrides?: CallOverrides): Promise<[string]>;

    oxPoolsAddresses(overrides?: CallOverrides): Promise<[string[]]>;

    "oxPoolsAddresses()"(overrides?: CallOverrides): Promise<[string[]]>;

    "oxPoolsData(address[])"(
      _oxPoolsAddresses: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          BigNumber,
          BigNumber,
          [
            string,
            string,
            boolean,
            string,
            string,
            string,
            string,
            string[],
            string,
            BigNumber
          ] & {
            id: string;
            symbol: string;
            stable: boolean;
            token0Address: string;
            token1Address: string;
            gaugeAddress: string;
            bribeAddress: string;
            bribeTokensAddresses: string[];
            fees: string;
            totalSupply: BigNumber;
          }
        ] & {
          id: string;
          stakingAddress: string;
          stakedTotalSupply: BigNumber;
          totalSupply: BigNumber;
          poolData: [
            string,
            string,
            boolean,
            string,
            string,
            string,
            string,
            string[],
            string,
            BigNumber
          ] & {
            id: string;
            symbol: string;
            stable: boolean;
            token0Address: string;
            token1Address: string;
            gaugeAddress: string;
            bribeAddress: string;
            bribeTokensAddresses: string[];
            fees: string;
            totalSupply: BigNumber;
          };
        })[]
      ]
    >;

    "oxPoolsData()"(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          BigNumber,
          BigNumber,
          [
            string,
            string,
            boolean,
            string,
            string,
            string,
            string,
            string[],
            string,
            BigNumber
          ] & {
            id: string;
            symbol: string;
            stable: boolean;
            token0Address: string;
            token1Address: string;
            gaugeAddress: string;
            bribeAddress: string;
            bribeTokensAddresses: string[];
            fees: string;
            totalSupply: BigNumber;
          }
        ] & {
          id: string;
          stakingAddress: string;
          stakedTotalSupply: BigNumber;
          totalSupply: BigNumber;
          poolData: [
            string,
            string,
            boolean,
            string,
            string,
            string,
            string,
            string[],
            string,
            BigNumber
          ] & {
            id: string;
            symbol: string;
            stable: boolean;
            token0Address: string;
            token1Address: string;
            gaugeAddress: string;
            bribeAddress: string;
            bribeTokensAddresses: string[];
            fees: string;
            totalSupply: BigNumber;
          };
        })[]
      ]
    >;

    oxPoolsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "oxPoolsLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    oxPoolsMigrationMapping(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "oxPoolsMigrationMapping(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    oxSolid(overrides?: CallOverrides): Promise<[string]>;

    "oxSolid()"(overrides?: CallOverrides): Promise<[string]>;

    oxSolidAddress(overrides?: CallOverrides): Promise<[string]>;

    "oxSolidAddress()"(overrides?: CallOverrides): Promise<[string]>;

    oxSolidBalanceOf(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "oxSolidBalanceOf(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    oxSolidRewardPoolPosition(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          rewardTokenAddress: string;
          rewardRate: BigNumber;
          rewardPerToken: BigNumber;
          getRewardForDuration: BigNumber;
          earned: BigNumber;
        })[]
      ]
    >;

    "oxSolidRewardPoolPosition(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          rewardTokenAddress: string;
          rewardRate: BigNumber;
          rewardPerToken: BigNumber;
          getRewardForDuration: BigNumber;
          earned: BigNumber;
        })[]
      ]
    >;

    oxSolidRewardsPool(overrides?: CallOverrides): Promise<[string]>;

    "oxSolidRewardsPool()"(overrides?: CallOverrides): Promise<[string]>;

    oxSolidRewardsPoolAddress(overrides?: CallOverrides): Promise<[string]>;

    "oxSolidRewardsPoolAddress()"(overrides?: CallOverrides): Promise<[string]>;

    oxd(overrides?: CallOverrides): Promise<[string]>;

    "oxd()"(overrides?: CallOverrides): Promise<[string]>;

    oxdAddress(overrides?: CallOverrides): Promise<[string]>;

    "oxdAddress()"(overrides?: CallOverrides): Promise<[string]>;

    oxdTotalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "oxdTotalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    oxdV1Address(overrides?: CallOverrides): Promise<[string]>;

    "oxdV1Address()"(overrides?: CallOverrides): Promise<[string]>;

    oxdV1RedeemAddress(overrides?: CallOverrides): Promise<[string]>;

    "oxdV1RedeemAddress()"(overrides?: CallOverrides): Promise<[string]>;

    oxdV1RewardsAddress(overrides?: CallOverrides): Promise<[string]>;

    "oxdV1RewardsAddress()"(overrides?: CallOverrides): Promise<[string]>;

    oxdV1StakedOxSolidBalanceOf(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { stakedBalance: BigNumber }>;

    "oxdV1StakedOxSolidBalanceOf(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { stakedBalance: BigNumber }>;

    oxdV1StakedOxSolidStakableAmount(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { stakableAmount: BigNumber }>;

    "oxdV1StakedOxSolidStakableAmount(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { stakableAmount: BigNumber }>;

    partnersRewardsPoolAddress(overrides?: CallOverrides): Promise<[string]>;

    "partnersRewardsPoolAddress()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    poolsFactoryAddress(overrides?: CallOverrides): Promise<[string]>;

    "poolsFactoryAddress()"(overrides?: CallOverrides): Promise<[string]>;

    "poolsPositions(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { id: string; balanceOf: BigNumber })[]]
    >;

    "poolsPositions(address,uint256,uint256)"(
      accountAddress: string,
      startIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { id: string; balanceOf: BigNumber })[]]
    >;

    positionsOf(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          ([BigNumber, BigNumber, BigNumber] & {
            tokenId: BigNumber;
            balanceOf: BigNumber;
            locked: BigNumber;
          })[],
          ([
            string,
            string,
            string,
            BigNumber,
            ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
              rewardTokenAddress: string;
              rewardRate: BigNumber;
              rewardPerToken: BigNumber;
              getRewardForDuration: BigNumber;
              earned: BigNumber;
            })[]
          ] & {
            stakingPoolAddress: string;
            oxPoolAddress: string;
            solidPoolAddress: string;
            balanceOf: BigNumber;
            rewardTokens: ([
              string,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              rewardTokenAddress: string;
              rewardRate: BigNumber;
              rewardPerToken: BigNumber;
              getRewardForDuration: BigNumber;
              earned: BigNumber;
            })[];
          })[],
          BigNumber,
          BigNumber,
          ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
            rewardTokenAddress: string;
            rewardRate: BigNumber;
            rewardPerToken: BigNumber;
            getRewardForDuration: BigNumber;
            earned: BigNumber;
          })[],
          BigNumber,
          BigNumber,
          ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
            rewardTokenAddress: string;
            rewardRate: BigNumber;
            rewardPerToken: BigNumber;
            getRewardForDuration: BigNumber;
            earned: BigNumber;
          })[],
          BigNumber,
          BigNumber,
          BigNumber,
          [
            BigNumber,
            BigNumber,
            BigNumber,
            ([BigNumber, BigNumber, number] & {
              amount: BigNumber;
              boosted: BigNumber;
              unlockTime: number;
            })[]
          ] & {
            total: BigNumber;
            unlockable: BigNumber;
            locked: BigNumber;
            locks: ([BigNumber, BigNumber, number] & {
              amount: BigNumber;
              boosted: BigNumber;
              unlockTime: number;
            })[];
          },
          ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
            rewardTokenAddress: string;
            rewardRate: BigNumber;
            rewardPerToken: BigNumber;
            getRewardForDuration: BigNumber;
            earned: BigNumber;
          })[],
          [
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            ([string, BigNumber] & { poolAddress: string; weight: BigNumber })[]
          ] & {
            delegateAddress: string;
            weightTotal: BigNumber;
            weightUsed: BigNumber;
            weightAvailable: BigNumber;
            votes: ([string, BigNumber] & {
              poolAddress: string;
              weight: BigNumber;
            })[];
          },
          BigNumber,
          string[]
        ] & {
          userProxyAddress: string;
          veTotalBalanceOf: BigNumber;
          vePositions: ([BigNumber, BigNumber, BigNumber] & {
            tokenId: BigNumber;
            balanceOf: BigNumber;
            locked: BigNumber;
          })[];
          stakingPools: ([
            string,
            string,
            string,
            BigNumber,
            ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
              rewardTokenAddress: string;
              rewardRate: BigNumber;
              rewardPerToken: BigNumber;
              getRewardForDuration: BigNumber;
              earned: BigNumber;
            })[]
          ] & {
            stakingPoolAddress: string;
            oxPoolAddress: string;
            solidPoolAddress: string;
            balanceOf: BigNumber;
            rewardTokens: ([
              string,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              rewardTokenAddress: string;
              rewardRate: BigNumber;
              rewardPerToken: BigNumber;
              getRewardForDuration: BigNumber;
              earned: BigNumber;
            })[];
          })[];
          oxSolidBalanceOf: BigNumber;
          stakedOxSolidBalanceOf: BigNumber;
          oxSolidRewardPoolPosition: ([
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            rewardTokenAddress: string;
            rewardRate: BigNumber;
            rewardPerToken: BigNumber;
            getRewardForDuration: BigNumber;
            earned: BigNumber;
          })[];
          oxdV1StakedOxSolidStakableAmount: BigNumber;
          oxdV1StakedOxSolidBalanceOf: BigNumber;
          oxdV1OxSolidRewardPoolPosition: ([
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            rewardTokenAddress: string;
            rewardRate: BigNumber;
            rewardPerToken: BigNumber;
            getRewardForDuration: BigNumber;
            earned: BigNumber;
          })[];
          oxdBalanceOf: BigNumber;
          solidBalanceOf: BigNumber;
          vlOxdBalanceOf: BigNumber;
          vlOxdLocksData: [
            BigNumber,
            BigNumber,
            BigNumber,
            ([BigNumber, BigNumber, number] & {
              amount: BigNumber;
              boosted: BigNumber;
              unlockTime: number;
            })[]
          ] & {
            total: BigNumber;
            unlockable: BigNumber;
            locked: BigNumber;
            locks: ([BigNumber, BigNumber, number] & {
              amount: BigNumber;
              boosted: BigNumber;
              unlockTime: number;
            })[];
          };
          vlOxdRewardPoolPosition: ([
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            rewardTokenAddress: string;
            rewardRate: BigNumber;
            rewardPerToken: BigNumber;
            getRewardForDuration: BigNumber;
            earned: BigNumber;
          })[];
          votesData: [
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            ([string, BigNumber] & { poolAddress: string; weight: BigNumber })[]
          ] & {
            delegateAddress: string;
            weightTotal: BigNumber;
            weightUsed: BigNumber;
            weightAvailable: BigNumber;
            votes: ([string, BigNumber] & {
              poolAddress: string;
              weight: BigNumber;
            })[];
          };
          oxdV1BalanceOf: BigNumber;
          userProxyImplementationsAddresses: string[];
        }
      ]
    >;

    "positionsOf(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          ([BigNumber, BigNumber, BigNumber] & {
            tokenId: BigNumber;
            balanceOf: BigNumber;
            locked: BigNumber;
          })[],
          ([
            string,
            string,
            string,
            BigNumber,
            ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
              rewardTokenAddress: string;
              rewardRate: BigNumber;
              rewardPerToken: BigNumber;
              getRewardForDuration: BigNumber;
              earned: BigNumber;
            })[]
          ] & {
            stakingPoolAddress: string;
            oxPoolAddress: string;
            solidPoolAddress: string;
            balanceOf: BigNumber;
            rewardTokens: ([
              string,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              rewardTokenAddress: string;
              rewardRate: BigNumber;
              rewardPerToken: BigNumber;
              getRewardForDuration: BigNumber;
              earned: BigNumber;
            })[];
          })[],
          BigNumber,
          BigNumber,
          ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
            rewardTokenAddress: string;
            rewardRate: BigNumber;
            rewardPerToken: BigNumber;
            getRewardForDuration: BigNumber;
            earned: BigNumber;
          })[],
          BigNumber,
          BigNumber,
          ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
            rewardTokenAddress: string;
            rewardRate: BigNumber;
            rewardPerToken: BigNumber;
            getRewardForDuration: BigNumber;
            earned: BigNumber;
          })[],
          BigNumber,
          BigNumber,
          BigNumber,
          [
            BigNumber,
            BigNumber,
            BigNumber,
            ([BigNumber, BigNumber, number] & {
              amount: BigNumber;
              boosted: BigNumber;
              unlockTime: number;
            })[]
          ] & {
            total: BigNumber;
            unlockable: BigNumber;
            locked: BigNumber;
            locks: ([BigNumber, BigNumber, number] & {
              amount: BigNumber;
              boosted: BigNumber;
              unlockTime: number;
            })[];
          },
          ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
            rewardTokenAddress: string;
            rewardRate: BigNumber;
            rewardPerToken: BigNumber;
            getRewardForDuration: BigNumber;
            earned: BigNumber;
          })[],
          [
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            ([string, BigNumber] & { poolAddress: string; weight: BigNumber })[]
          ] & {
            delegateAddress: string;
            weightTotal: BigNumber;
            weightUsed: BigNumber;
            weightAvailable: BigNumber;
            votes: ([string, BigNumber] & {
              poolAddress: string;
              weight: BigNumber;
            })[];
          },
          BigNumber,
          string[]
        ] & {
          userProxyAddress: string;
          veTotalBalanceOf: BigNumber;
          vePositions: ([BigNumber, BigNumber, BigNumber] & {
            tokenId: BigNumber;
            balanceOf: BigNumber;
            locked: BigNumber;
          })[];
          stakingPools: ([
            string,
            string,
            string,
            BigNumber,
            ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
              rewardTokenAddress: string;
              rewardRate: BigNumber;
              rewardPerToken: BigNumber;
              getRewardForDuration: BigNumber;
              earned: BigNumber;
            })[]
          ] & {
            stakingPoolAddress: string;
            oxPoolAddress: string;
            solidPoolAddress: string;
            balanceOf: BigNumber;
            rewardTokens: ([
              string,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              rewardTokenAddress: string;
              rewardRate: BigNumber;
              rewardPerToken: BigNumber;
              getRewardForDuration: BigNumber;
              earned: BigNumber;
            })[];
          })[];
          oxSolidBalanceOf: BigNumber;
          stakedOxSolidBalanceOf: BigNumber;
          oxSolidRewardPoolPosition: ([
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            rewardTokenAddress: string;
            rewardRate: BigNumber;
            rewardPerToken: BigNumber;
            getRewardForDuration: BigNumber;
            earned: BigNumber;
          })[];
          oxdV1StakedOxSolidStakableAmount: BigNumber;
          oxdV1StakedOxSolidBalanceOf: BigNumber;
          oxdV1OxSolidRewardPoolPosition: ([
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            rewardTokenAddress: string;
            rewardRate: BigNumber;
            rewardPerToken: BigNumber;
            getRewardForDuration: BigNumber;
            earned: BigNumber;
          })[];
          oxdBalanceOf: BigNumber;
          solidBalanceOf: BigNumber;
          vlOxdBalanceOf: BigNumber;
          vlOxdLocksData: [
            BigNumber,
            BigNumber,
            BigNumber,
            ([BigNumber, BigNumber, number] & {
              amount: BigNumber;
              boosted: BigNumber;
              unlockTime: number;
            })[]
          ] & {
            total: BigNumber;
            unlockable: BigNumber;
            locked: BigNumber;
            locks: ([BigNumber, BigNumber, number] & {
              amount: BigNumber;
              boosted: BigNumber;
              unlockTime: number;
            })[];
          };
          vlOxdRewardPoolPosition: ([
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            rewardTokenAddress: string;
            rewardRate: BigNumber;
            rewardPerToken: BigNumber;
            getRewardForDuration: BigNumber;
            earned: BigNumber;
          })[];
          votesData: [
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            ([string, BigNumber] & { poolAddress: string; weight: BigNumber })[]
          ] & {
            delegateAddress: string;
            weightTotal: BigNumber;
            weightUsed: BigNumber;
            weightAvailable: BigNumber;
            votes: ([string, BigNumber] & {
              poolAddress: string;
              weight: BigNumber;
            })[];
          };
          oxdV1BalanceOf: BigNumber;
          userProxyImplementationsAddresses: string[];
        }
      ]
    >;

    protocolAddresses(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string
        ] & {
          oxPoolFactoryAddress: string;
          solidlyLensAddress: string;
          oxdAddress: string;
          vlOxdAddress: string;
          oxSolidAddress: string;
          voterProxyAddress: string;
          solidAddress: string;
          voterAddress: string;
          poolsFactoryAddress: string;
          gaugesFactoryAddress: string;
          minterAddress: string;
          veAddress: string;
          userProxyInterfaceAddress: string;
          votingSnapshotAddress: string;
          oxdV1RewardsAddress: string;
          oxdV1RedeemAddress: string;
          oxdV1Address: string;
          tokensAllowlistAddress: string;
        }
      ]
    >;

    "protocolAddresses()"(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string
        ] & {
          oxPoolFactoryAddress: string;
          solidlyLensAddress: string;
          oxdAddress: string;
          vlOxdAddress: string;
          oxSolidAddress: string;
          voterProxyAddress: string;
          solidAddress: string;
          voterAddress: string;
          poolsFactoryAddress: string;
          gaugesFactoryAddress: string;
          minterAddress: string;
          veAddress: string;
          userProxyInterfaceAddress: string;
          votingSnapshotAddress: string;
          oxdV1RewardsAddress: string;
          oxdV1RedeemAddress: string;
          oxdV1Address: string;
          tokensAllowlistAddress: string;
        }
      ]
    >;

    proxyStorageInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "proxyStorageInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    rewardTokenPositionOf(
      accountAddress: string,
      stakingPoolAddress: string,
      rewardTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          rewardTokenAddress: string;
          rewardRate: BigNumber;
          rewardPerToken: BigNumber;
          getRewardForDuration: BigNumber;
          earned: BigNumber;
        }
      ]
    >;

    "rewardTokenPositionOf(address,address,address)"(
      accountAddress: string,
      stakingPoolAddress: string,
      rewardTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          rewardTokenAddress: string;
          rewardRate: BigNumber;
          rewardPerToken: BigNumber;
          getRewardForDuration: BigNumber;
          earned: BigNumber;
        }
      ]
    >;

    rewardTokensData(
      stakingPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, BigNumber] & {
          id: string;
          rewardRate: BigNumber;
          periodFinish: BigNumber;
        })[]
      ]
    >;

    "rewardTokensData(address)"(
      stakingPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, BigNumber] & {
          id: string;
          rewardRate: BigNumber;
          periodFinish: BigNumber;
        })[]
      ]
    >;

    rewardTokensDatas(
      stakingPoolsAddresses: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, BigNumber] & {
          id: string;
          rewardRate: BigNumber;
          periodFinish: BigNumber;
        })[][]
      ]
    >;

    "rewardTokensDatas(address[])"(
      stakingPoolsAddresses: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, BigNumber] & {
          id: string;
          rewardRate: BigNumber;
          periodFinish: BigNumber;
        })[][]
      ]
    >;

    "rewardTokensPositionsOf(address,address)"(
      accountAddress: string,
      stakingPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          rewardTokenAddress: string;
          rewardRate: BigNumber;
          rewardPerToken: BigNumber;
          getRewardForDuration: BigNumber;
          earned: BigNumber;
        })[]
      ]
    >;

    "rewardTokensPositionsOf(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
            rewardTokenAddress: string;
            rewardRate: BigNumber;
            rewardPerToken: BigNumber;
            getRewardForDuration: BigNumber;
            earned: BigNumber;
          })[]
        ] & {
          stakingPoolAddress: string;
          rewardTokens: ([
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            rewardTokenAddress: string;
            rewardRate: BigNumber;
            rewardPerToken: BigNumber;
            getRewardForDuration: BigNumber;
            earned: BigNumber;
          })[];
        })[]
      ]
    >;

    rewardsDistributorAddress(overrides?: CallOverrides): Promise<[string]>;

    "rewardsDistributorAddress()"(overrides?: CallOverrides): Promise<[string]>;

    setMigration(
      fromOxPoolAddress: string,
      toOxPoolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMigration(address,address)"(
      fromOxPoolAddress: string,
      toOxPoolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMigrations(
      fromOxPoolsAddresses: string[],
      toOxPoolsAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMigrations(address[],address[])"(
      fromOxPoolsAddresses: string[],
      toOxPoolsAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    solid(overrides?: CallOverrides): Promise<[string]>;

    "solid()"(overrides?: CallOverrides): Promise<[string]>;

    solidAddress(overrides?: CallOverrides): Promise<[string]>;

    "solidAddress()"(overrides?: CallOverrides): Promise<[string]>;

    solidBalanceOf(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "solidBalanceOf(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    solidInflationSinceInception(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "solidInflationSinceInception()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    solidPoolByOxPool(
      oxPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "solidPoolByOxPool(address)"(
      oxPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    solidlyLens(overrides?: CallOverrides): Promise<[string]>;

    "solidlyLens()"(overrides?: CallOverrides): Promise<[string]>;

    solidlyLensAddress(overrides?: CallOverrides): Promise<[string]>;

    "solidlyLensAddress()"(overrides?: CallOverrides): Promise<[string]>;

    stakedOxSolidBalanceOf(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { stakedBalance: BigNumber }>;

    "stakedOxSolidBalanceOf(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { stakedBalance: BigNumber }>;

    stakingPoolPosition(
      accountAddress: string,
      stakingPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          BigNumber,
          ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
            rewardTokenAddress: string;
            rewardRate: BigNumber;
            rewardPerToken: BigNumber;
            getRewardForDuration: BigNumber;
            earned: BigNumber;
          })[]
        ] & {
          stakingPoolAddress: string;
          oxPoolAddress: string;
          solidPoolAddress: string;
          balanceOf: BigNumber;
          rewardTokens: ([
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            rewardTokenAddress: string;
            rewardRate: BigNumber;
            rewardPerToken: BigNumber;
            getRewardForDuration: BigNumber;
            earned: BigNumber;
          })[];
        }
      ]
    >;

    "stakingPoolPosition(address,address)"(
      accountAddress: string,
      stakingPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          BigNumber,
          ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
            rewardTokenAddress: string;
            rewardRate: BigNumber;
            rewardPerToken: BigNumber;
            getRewardForDuration: BigNumber;
            earned: BigNumber;
          })[]
        ] & {
          stakingPoolAddress: string;
          oxPoolAddress: string;
          solidPoolAddress: string;
          balanceOf: BigNumber;
          rewardTokens: ([
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            rewardTokenAddress: string;
            rewardRate: BigNumber;
            rewardPerToken: BigNumber;
            getRewardForDuration: BigNumber;
            earned: BigNumber;
          })[];
        }
      ]
    >;

    "stakingPoolsPositions(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          string,
          BigNumber,
          ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
            rewardTokenAddress: string;
            rewardRate: BigNumber;
            rewardPerToken: BigNumber;
            getRewardForDuration: BigNumber;
            earned: BigNumber;
          })[]
        ] & {
          stakingPoolAddress: string;
          oxPoolAddress: string;
          solidPoolAddress: string;
          balanceOf: BigNumber;
          rewardTokens: ([
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            rewardTokenAddress: string;
            rewardRate: BigNumber;
            rewardPerToken: BigNumber;
            getRewardForDuration: BigNumber;
            earned: BigNumber;
          })[];
        })[]
      ]
    >;

    "stakingPoolsPositions()"(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          string,
          BigNumber,
          ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
            rewardTokenAddress: string;
            rewardRate: BigNumber;
            rewardPerToken: BigNumber;
            getRewardForDuration: BigNumber;
            earned: BigNumber;
          })[]
        ] & {
          stakingPoolAddress: string;
          oxPoolAddress: string;
          solidPoolAddress: string;
          balanceOf: BigNumber;
          rewardTokens: ([
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            rewardTokenAddress: string;
            rewardRate: BigNumber;
            rewardPerToken: BigNumber;
            getRewardForDuration: BigNumber;
            earned: BigNumber;
          })[];
        })[]
      ]
    >;

    stakingRewardsByOxPool(
      oxPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "stakingRewardsByOxPool(address)"(
      oxPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    stakingRewardsBySolidPool(
      solidPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "stakingRewardsBySolidPool(address)"(
      solidPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "tokenId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokensAllowlist(overrides?: CallOverrides): Promise<[string]>;

    "tokensAllowlist()"(overrides?: CallOverrides): Promise<[string]>;

    tokensAllowlistAddress(overrides?: CallOverrides): Promise<[string]>;

    "tokensAllowlistAddress()"(overrides?: CallOverrides): Promise<[string]>;

    transferTreasury(
      _newTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferTreasury(address)"(
      _newTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<[string]>;

    "treasuryAddress()"(overrides?: CallOverrides): Promise<[string]>;

    userProxiesLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "userProxiesLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    userProxyByAccount(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "userProxyByAccount(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    userProxyByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "userProxyByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    userProxyFactory(overrides?: CallOverrides): Promise<[string]>;

    "userProxyFactory()"(overrides?: CallOverrides): Promise<[string]>;

    userProxyFactoryAddress(overrides?: CallOverrides): Promise<[string]>;

    "userProxyFactoryAddress()"(overrides?: CallOverrides): Promise<[string]>;

    userProxyInterfaceAddress(overrides?: CallOverrides): Promise<[string]>;

    "userProxyInterfaceAddress()"(overrides?: CallOverrides): Promise<[string]>;

    ve(overrides?: CallOverrides): Promise<[string]>;

    "ve()"(overrides?: CallOverrides): Promise<[string]>;

    veAddress(overrides?: CallOverrides): Promise<[string]>;

    "veAddress()"(overrides?: CallOverrides): Promise<[string]>;

    veTotalBalanceOf(
      positions: {
        tokenId: BigNumberish;
        balanceOf: BigNumberish;
        locked: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "veTotalBalanceOf(tuple[])"(
      positions: {
        tokenId: BigNumberish;
        balanceOf: BigNumberish;
        locked: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vlOxd(overrides?: CallOverrides): Promise<[string]>;

    "vlOxd()"(overrides?: CallOverrides): Promise<[string]>;

    vlOxdAddress(overrides?: CallOverrides): Promise<[string]>;

    "vlOxdAddress()"(overrides?: CallOverrides): Promise<[string]>;

    vlOxdLocksData(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          ([BigNumber, BigNumber, number] & {
            amount: BigNumber;
            boosted: BigNumber;
            unlockTime: number;
          })[]
        ] & {
          total: BigNumber;
          unlockable: BigNumber;
          locked: BigNumber;
          locks: ([BigNumber, BigNumber, number] & {
            amount: BigNumber;
            boosted: BigNumber;
            unlockTime: number;
          })[];
        }
      ]
    >;

    "vlOxdLocksData(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          ([BigNumber, BigNumber, number] & {
            amount: BigNumber;
            boosted: BigNumber;
            unlockTime: number;
          })[]
        ] & {
          total: BigNumber;
          unlockable: BigNumber;
          locked: BigNumber;
          locks: ([BigNumber, BigNumber, number] & {
            amount: BigNumber;
            boosted: BigNumber;
            unlockTime: number;
          })[];
        }
      ]
    >;

    vlOxdRewardTokenPositionOf(
      accountAddress: string,
      rewardTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          rewardTokenAddress: string;
          rewardRate: BigNumber;
          rewardPerToken: BigNumber;
          getRewardForDuration: BigNumber;
          earned: BigNumber;
        }
      ]
    >;

    "vlOxdRewardTokenPositionOf(address,address)"(
      accountAddress: string,
      rewardTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          rewardTokenAddress: string;
          rewardRate: BigNumber;
          rewardPerToken: BigNumber;
          getRewardForDuration: BigNumber;
          earned: BigNumber;
        }
      ]
    >;

    vlOxdRewardTokenPositionsOf(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          rewardTokenAddress: string;
          rewardRate: BigNumber;
          rewardPerToken: BigNumber;
          getRewardForDuration: BigNumber;
          earned: BigNumber;
        })[]
      ]
    >;

    "vlOxdRewardTokenPositionsOf(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          rewardTokenAddress: string;
          rewardRate: BigNumber;
          rewardPerToken: BigNumber;
          getRewardForDuration: BigNumber;
          earned: BigNumber;
        })[]
      ]
    >;

    votePositionsOf(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          ([string, BigNumber] & { poolAddress: string; weight: BigNumber })[]
        ] & {
          delegateAddress: string;
          weightTotal: BigNumber;
          weightUsed: BigNumber;
          weightAvailable: BigNumber;
          votes: ([string, BigNumber] & {
            poolAddress: string;
            weight: BigNumber;
          })[];
        }
      ]
    >;

    "votePositionsOf(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          ([string, BigNumber] & { poolAddress: string; weight: BigNumber })[]
        ] & {
          delegateAddress: string;
          weightTotal: BigNumber;
          weightUsed: BigNumber;
          weightAvailable: BigNumber;
          votes: ([string, BigNumber] & {
            poolAddress: string;
            weight: BigNumber;
          })[];
        }
      ]
    >;

    voterAddress(overrides?: CallOverrides): Promise<[string]>;

    "voterAddress()"(overrides?: CallOverrides): Promise<[string]>;

    voterProxy(overrides?: CallOverrides): Promise<[string]>;

    "voterProxy()"(overrides?: CallOverrides): Promise<[string]>;

    voterProxyAddress(overrides?: CallOverrides): Promise<[string]>;

    "voterProxyAddress()"(overrides?: CallOverrides): Promise<[string]>;

    votingSnapshot(overrides?: CallOverrides): Promise<[string]>;

    "votingSnapshot()"(overrides?: CallOverrides): Promise<[string]>;

    votingSnapshotAddress(overrides?: CallOverrides): Promise<[string]>;

    "votingSnapshotAddress()"(overrides?: CallOverrides): Promise<[string]>;
  };

  gaugeBySolidPool(
    solidPoolAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "gaugeBySolidPool(address)"(
    solidPoolAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  gaugesFactoryAddress(overrides?: CallOverrides): Promise<string>;

  "gaugesFactoryAddress()"(overrides?: CallOverrides): Promise<string>;

  initializeProxyStorage(
    _oxPoolFactoryAddress: string,
    _userProxyFactoryAddress: string,
    _solidlyLensAddress: string,
    _oxdAddress: string,
    _vlOxdAddress: string,
    _oxSolidAddress: string,
    _oxSolidRewardsPoolAddress: string,
    _rewardsDistributorAddress: string,
    _partnersRewardsPoolAddress: string,
    _userProxyInterfaceAddress: string,
    _oxdV1RewardsAddress: string,
    _oxdV1RedeemAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initializeProxyStorage(address,address,address,address,address,address,address,address,address,address,address,address)"(
    _oxPoolFactoryAddress: string,
    _userProxyFactoryAddress: string,
    _solidlyLensAddress: string,
    _oxdAddress: string,
    _vlOxdAddress: string,
    _oxSolidAddress: string,
    _oxSolidRewardsPoolAddress: string,
    _rewardsDistributorAddress: string,
    _partnersRewardsPoolAddress: string,
    _userProxyInterfaceAddress: string,
    _oxdV1RewardsAddress: string,
    _oxdV1RedeemAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isOxPool(oxPoolAddress: string, overrides?: CallOverrides): Promise<boolean>;

  "isOxPool(address)"(
    oxPoolAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPartner(
    userProxyAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isPartner(address)"(
    userProxyAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isProxyPartner(
    accountAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isProxyPartner(address)"(
    accountAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  migrateableOxPools(
    accountAddress: string,
    overrides?: CallOverrides
  ): Promise<
    ([string, string, string, BigNumber] & {
      fromOxPoolAddress: string;
      toOxPoolAddress: string;
      fromStakingPoolAddress: string;
      balanceOf: BigNumber;
    })[]
  >;

  "migrateableOxPools(address)"(
    accountAddress: string,
    overrides?: CallOverrides
  ): Promise<
    ([string, string, string, BigNumber] & {
      fromOxPoolAddress: string;
      toOxPoolAddress: string;
      fromStakingPoolAddress: string;
      balanceOf: BigNumber;
    })[]
  >;

  minterAddress(overrides?: CallOverrides): Promise<string>;

  "minterAddress()"(overrides?: CallOverrides): Promise<string>;

  oxPoolBySolidPool(
    solidPoolAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "oxPoolBySolidPool(address)"(
    solidPoolAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  oxPoolData(
    oxPoolAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      [
        string,
        string,
        boolean,
        string,
        string,
        string,
        string,
        string[],
        string,
        BigNumber
      ] & {
        id: string;
        symbol: string;
        stable: boolean;
        token0Address: string;
        token1Address: string;
        gaugeAddress: string;
        bribeAddress: string;
        bribeTokensAddresses: string[];
        fees: string;
        totalSupply: BigNumber;
      }
    ] & {
      id: string;
      stakingAddress: string;
      stakedTotalSupply: BigNumber;
      totalSupply: BigNumber;
      poolData: [
        string,
        string,
        boolean,
        string,
        string,
        string,
        string,
        string[],
        string,
        BigNumber
      ] & {
        id: string;
        symbol: string;
        stable: boolean;
        token0Address: string;
        token1Address: string;
        gaugeAddress: string;
        bribeAddress: string;
        bribeTokensAddresses: string[];
        fees: string;
        totalSupply: BigNumber;
      };
    }
  >;

  "oxPoolData(address)"(
    oxPoolAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      [
        string,
        string,
        boolean,
        string,
        string,
        string,
        string,
        string[],
        string,
        BigNumber
      ] & {
        id: string;
        symbol: string;
        stable: boolean;
        token0Address: string;
        token1Address: string;
        gaugeAddress: string;
        bribeAddress: string;
        bribeTokensAddresses: string[];
        fees: string;
        totalSupply: BigNumber;
      }
    ] & {
      id: string;
      stakingAddress: string;
      stakedTotalSupply: BigNumber;
      totalSupply: BigNumber;
      poolData: [
        string,
        string,
        boolean,
        string,
        string,
        string,
        string,
        string[],
        string,
        BigNumber
      ] & {
        id: string;
        symbol: string;
        stable: boolean;
        token0Address: string;
        token1Address: string;
        gaugeAddress: string;
        bribeAddress: string;
        bribeTokensAddresses: string[];
        fees: string;
        totalSupply: BigNumber;
      };
    }
  >;

  oxPoolFactory(overrides?: CallOverrides): Promise<string>;

  "oxPoolFactory()"(overrides?: CallOverrides): Promise<string>;

  oxPoolFactoryAddress(overrides?: CallOverrides): Promise<string>;

  "oxPoolFactoryAddress()"(overrides?: CallOverrides): Promise<string>;

  oxPoolsAddresses(overrides?: CallOverrides): Promise<string[]>;

  "oxPoolsAddresses()"(overrides?: CallOverrides): Promise<string[]>;

  "oxPoolsData(address[])"(
    _oxPoolsAddresses: string[],
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      string,
      BigNumber,
      BigNumber,
      [
        string,
        string,
        boolean,
        string,
        string,
        string,
        string,
        string[],
        string,
        BigNumber
      ] & {
        id: string;
        symbol: string;
        stable: boolean;
        token0Address: string;
        token1Address: string;
        gaugeAddress: string;
        bribeAddress: string;
        bribeTokensAddresses: string[];
        fees: string;
        totalSupply: BigNumber;
      }
    ] & {
      id: string;
      stakingAddress: string;
      stakedTotalSupply: BigNumber;
      totalSupply: BigNumber;
      poolData: [
        string,
        string,
        boolean,
        string,
        string,
        string,
        string,
        string[],
        string,
        BigNumber
      ] & {
        id: string;
        symbol: string;
        stable: boolean;
        token0Address: string;
        token1Address: string;
        gaugeAddress: string;
        bribeAddress: string;
        bribeTokensAddresses: string[];
        fees: string;
        totalSupply: BigNumber;
      };
    })[]
  >;

  "oxPoolsData()"(
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      string,
      BigNumber,
      BigNumber,
      [
        string,
        string,
        boolean,
        string,
        string,
        string,
        string,
        string[],
        string,
        BigNumber
      ] & {
        id: string;
        symbol: string;
        stable: boolean;
        token0Address: string;
        token1Address: string;
        gaugeAddress: string;
        bribeAddress: string;
        bribeTokensAddresses: string[];
        fees: string;
        totalSupply: BigNumber;
      }
    ] & {
      id: string;
      stakingAddress: string;
      stakedTotalSupply: BigNumber;
      totalSupply: BigNumber;
      poolData: [
        string,
        string,
        boolean,
        string,
        string,
        string,
        string,
        string[],
        string,
        BigNumber
      ] & {
        id: string;
        symbol: string;
        stable: boolean;
        token0Address: string;
        token1Address: string;
        gaugeAddress: string;
        bribeAddress: string;
        bribeTokensAddresses: string[];
        fees: string;
        totalSupply: BigNumber;
      };
    })[]
  >;

  oxPoolsLength(overrides?: CallOverrides): Promise<BigNumber>;

  "oxPoolsLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  oxPoolsMigrationMapping(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "oxPoolsMigrationMapping(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  oxSolid(overrides?: CallOverrides): Promise<string>;

  "oxSolid()"(overrides?: CallOverrides): Promise<string>;

  oxSolidAddress(overrides?: CallOverrides): Promise<string>;

  "oxSolidAddress()"(overrides?: CallOverrides): Promise<string>;

  oxSolidBalanceOf(
    accountAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "oxSolidBalanceOf(address)"(
    accountAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  oxSolidRewardPoolPosition(
    accountAddress: string,
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      rewardTokenAddress: string;
      rewardRate: BigNumber;
      rewardPerToken: BigNumber;
      getRewardForDuration: BigNumber;
      earned: BigNumber;
    })[]
  >;

  "oxSolidRewardPoolPosition(address)"(
    accountAddress: string,
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      rewardTokenAddress: string;
      rewardRate: BigNumber;
      rewardPerToken: BigNumber;
      getRewardForDuration: BigNumber;
      earned: BigNumber;
    })[]
  >;

  oxSolidRewardsPool(overrides?: CallOverrides): Promise<string>;

  "oxSolidRewardsPool()"(overrides?: CallOverrides): Promise<string>;

  oxSolidRewardsPoolAddress(overrides?: CallOverrides): Promise<string>;

  "oxSolidRewardsPoolAddress()"(overrides?: CallOverrides): Promise<string>;

  oxd(overrides?: CallOverrides): Promise<string>;

  "oxd()"(overrides?: CallOverrides): Promise<string>;

  oxdAddress(overrides?: CallOverrides): Promise<string>;

  "oxdAddress()"(overrides?: CallOverrides): Promise<string>;

  oxdTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "oxdTotalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  oxdV1Address(overrides?: CallOverrides): Promise<string>;

  "oxdV1Address()"(overrides?: CallOverrides): Promise<string>;

  oxdV1RedeemAddress(overrides?: CallOverrides): Promise<string>;

  "oxdV1RedeemAddress()"(overrides?: CallOverrides): Promise<string>;

  oxdV1RewardsAddress(overrides?: CallOverrides): Promise<string>;

  "oxdV1RewardsAddress()"(overrides?: CallOverrides): Promise<string>;

  oxdV1StakedOxSolidBalanceOf(
    accountAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "oxdV1StakedOxSolidBalanceOf(address)"(
    accountAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  oxdV1StakedOxSolidStakableAmount(
    accountAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "oxdV1StakedOxSolidStakableAmount(address)"(
    accountAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  partnersRewardsPoolAddress(overrides?: CallOverrides): Promise<string>;

  "partnersRewardsPoolAddress()"(overrides?: CallOverrides): Promise<string>;

  poolsFactoryAddress(overrides?: CallOverrides): Promise<string>;

  "poolsFactoryAddress()"(overrides?: CallOverrides): Promise<string>;

  "poolsPositions(address)"(
    accountAddress: string,
    overrides?: CallOverrides
  ): Promise<([string, BigNumber] & { id: string; balanceOf: BigNumber })[]>;

  "poolsPositions(address,uint256,uint256)"(
    accountAddress: string,
    startIndex: BigNumberish,
    endIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<([string, BigNumber] & { id: string; balanceOf: BigNumber })[]>;

  positionsOf(
    accountAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      ([BigNumber, BigNumber, BigNumber] & {
        tokenId: BigNumber;
        balanceOf: BigNumber;
        locked: BigNumber;
      })[],
      ([
        string,
        string,
        string,
        BigNumber,
        ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          rewardTokenAddress: string;
          rewardRate: BigNumber;
          rewardPerToken: BigNumber;
          getRewardForDuration: BigNumber;
          earned: BigNumber;
        })[]
      ] & {
        stakingPoolAddress: string;
        oxPoolAddress: string;
        solidPoolAddress: string;
        balanceOf: BigNumber;
        rewardTokens: ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          rewardTokenAddress: string;
          rewardRate: BigNumber;
          rewardPerToken: BigNumber;
          getRewardForDuration: BigNumber;
          earned: BigNumber;
        })[];
      })[],
      BigNumber,
      BigNumber,
      ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardTokenAddress: string;
        rewardRate: BigNumber;
        rewardPerToken: BigNumber;
        getRewardForDuration: BigNumber;
        earned: BigNumber;
      })[],
      BigNumber,
      BigNumber,
      ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardTokenAddress: string;
        rewardRate: BigNumber;
        rewardPerToken: BigNumber;
        getRewardForDuration: BigNumber;
        earned: BigNumber;
      })[],
      BigNumber,
      BigNumber,
      BigNumber,
      [
        BigNumber,
        BigNumber,
        BigNumber,
        ([BigNumber, BigNumber, number] & {
          amount: BigNumber;
          boosted: BigNumber;
          unlockTime: number;
        })[]
      ] & {
        total: BigNumber;
        unlockable: BigNumber;
        locked: BigNumber;
        locks: ([BigNumber, BigNumber, number] & {
          amount: BigNumber;
          boosted: BigNumber;
          unlockTime: number;
        })[];
      },
      ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardTokenAddress: string;
        rewardRate: BigNumber;
        rewardPerToken: BigNumber;
        getRewardForDuration: BigNumber;
        earned: BigNumber;
      })[],
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        ([string, BigNumber] & { poolAddress: string; weight: BigNumber })[]
      ] & {
        delegateAddress: string;
        weightTotal: BigNumber;
        weightUsed: BigNumber;
        weightAvailable: BigNumber;
        votes: ([string, BigNumber] & {
          poolAddress: string;
          weight: BigNumber;
        })[];
      },
      BigNumber,
      string[]
    ] & {
      userProxyAddress: string;
      veTotalBalanceOf: BigNumber;
      vePositions: ([BigNumber, BigNumber, BigNumber] & {
        tokenId: BigNumber;
        balanceOf: BigNumber;
        locked: BigNumber;
      })[];
      stakingPools: ([
        string,
        string,
        string,
        BigNumber,
        ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          rewardTokenAddress: string;
          rewardRate: BigNumber;
          rewardPerToken: BigNumber;
          getRewardForDuration: BigNumber;
          earned: BigNumber;
        })[]
      ] & {
        stakingPoolAddress: string;
        oxPoolAddress: string;
        solidPoolAddress: string;
        balanceOf: BigNumber;
        rewardTokens: ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          rewardTokenAddress: string;
          rewardRate: BigNumber;
          rewardPerToken: BigNumber;
          getRewardForDuration: BigNumber;
          earned: BigNumber;
        })[];
      })[];
      oxSolidBalanceOf: BigNumber;
      stakedOxSolidBalanceOf: BigNumber;
      oxSolidRewardPoolPosition: ([
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        rewardTokenAddress: string;
        rewardRate: BigNumber;
        rewardPerToken: BigNumber;
        getRewardForDuration: BigNumber;
        earned: BigNumber;
      })[];
      oxdV1StakedOxSolidStakableAmount: BigNumber;
      oxdV1StakedOxSolidBalanceOf: BigNumber;
      oxdV1OxSolidRewardPoolPosition: ([
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        rewardTokenAddress: string;
        rewardRate: BigNumber;
        rewardPerToken: BigNumber;
        getRewardForDuration: BigNumber;
        earned: BigNumber;
      })[];
      oxdBalanceOf: BigNumber;
      solidBalanceOf: BigNumber;
      vlOxdBalanceOf: BigNumber;
      vlOxdLocksData: [
        BigNumber,
        BigNumber,
        BigNumber,
        ([BigNumber, BigNumber, number] & {
          amount: BigNumber;
          boosted: BigNumber;
          unlockTime: number;
        })[]
      ] & {
        total: BigNumber;
        unlockable: BigNumber;
        locked: BigNumber;
        locks: ([BigNumber, BigNumber, number] & {
          amount: BigNumber;
          boosted: BigNumber;
          unlockTime: number;
        })[];
      };
      vlOxdRewardPoolPosition: ([
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        rewardTokenAddress: string;
        rewardRate: BigNumber;
        rewardPerToken: BigNumber;
        getRewardForDuration: BigNumber;
        earned: BigNumber;
      })[];
      votesData: [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        ([string, BigNumber] & { poolAddress: string; weight: BigNumber })[]
      ] & {
        delegateAddress: string;
        weightTotal: BigNumber;
        weightUsed: BigNumber;
        weightAvailable: BigNumber;
        votes: ([string, BigNumber] & {
          poolAddress: string;
          weight: BigNumber;
        })[];
      };
      oxdV1BalanceOf: BigNumber;
      userProxyImplementationsAddresses: string[];
    }
  >;

  "positionsOf(address)"(
    accountAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      ([BigNumber, BigNumber, BigNumber] & {
        tokenId: BigNumber;
        balanceOf: BigNumber;
        locked: BigNumber;
      })[],
      ([
        string,
        string,
        string,
        BigNumber,
        ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          rewardTokenAddress: string;
          rewardRate: BigNumber;
          rewardPerToken: BigNumber;
          getRewardForDuration: BigNumber;
          earned: BigNumber;
        })[]
      ] & {
        stakingPoolAddress: string;
        oxPoolAddress: string;
        solidPoolAddress: string;
        balanceOf: BigNumber;
        rewardTokens: ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          rewardTokenAddress: string;
          rewardRate: BigNumber;
          rewardPerToken: BigNumber;
          getRewardForDuration: BigNumber;
          earned: BigNumber;
        })[];
      })[],
      BigNumber,
      BigNumber,
      ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardTokenAddress: string;
        rewardRate: BigNumber;
        rewardPerToken: BigNumber;
        getRewardForDuration: BigNumber;
        earned: BigNumber;
      })[],
      BigNumber,
      BigNumber,
      ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardTokenAddress: string;
        rewardRate: BigNumber;
        rewardPerToken: BigNumber;
        getRewardForDuration: BigNumber;
        earned: BigNumber;
      })[],
      BigNumber,
      BigNumber,
      BigNumber,
      [
        BigNumber,
        BigNumber,
        BigNumber,
        ([BigNumber, BigNumber, number] & {
          amount: BigNumber;
          boosted: BigNumber;
          unlockTime: number;
        })[]
      ] & {
        total: BigNumber;
        unlockable: BigNumber;
        locked: BigNumber;
        locks: ([BigNumber, BigNumber, number] & {
          amount: BigNumber;
          boosted: BigNumber;
          unlockTime: number;
        })[];
      },
      ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardTokenAddress: string;
        rewardRate: BigNumber;
        rewardPerToken: BigNumber;
        getRewardForDuration: BigNumber;
        earned: BigNumber;
      })[],
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        ([string, BigNumber] & { poolAddress: string; weight: BigNumber })[]
      ] & {
        delegateAddress: string;
        weightTotal: BigNumber;
        weightUsed: BigNumber;
        weightAvailable: BigNumber;
        votes: ([string, BigNumber] & {
          poolAddress: string;
          weight: BigNumber;
        })[];
      },
      BigNumber,
      string[]
    ] & {
      userProxyAddress: string;
      veTotalBalanceOf: BigNumber;
      vePositions: ([BigNumber, BigNumber, BigNumber] & {
        tokenId: BigNumber;
        balanceOf: BigNumber;
        locked: BigNumber;
      })[];
      stakingPools: ([
        string,
        string,
        string,
        BigNumber,
        ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          rewardTokenAddress: string;
          rewardRate: BigNumber;
          rewardPerToken: BigNumber;
          getRewardForDuration: BigNumber;
          earned: BigNumber;
        })[]
      ] & {
        stakingPoolAddress: string;
        oxPoolAddress: string;
        solidPoolAddress: string;
        balanceOf: BigNumber;
        rewardTokens: ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          rewardTokenAddress: string;
          rewardRate: BigNumber;
          rewardPerToken: BigNumber;
          getRewardForDuration: BigNumber;
          earned: BigNumber;
        })[];
      })[];
      oxSolidBalanceOf: BigNumber;
      stakedOxSolidBalanceOf: BigNumber;
      oxSolidRewardPoolPosition: ([
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        rewardTokenAddress: string;
        rewardRate: BigNumber;
        rewardPerToken: BigNumber;
        getRewardForDuration: BigNumber;
        earned: BigNumber;
      })[];
      oxdV1StakedOxSolidStakableAmount: BigNumber;
      oxdV1StakedOxSolidBalanceOf: BigNumber;
      oxdV1OxSolidRewardPoolPosition: ([
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        rewardTokenAddress: string;
        rewardRate: BigNumber;
        rewardPerToken: BigNumber;
        getRewardForDuration: BigNumber;
        earned: BigNumber;
      })[];
      oxdBalanceOf: BigNumber;
      solidBalanceOf: BigNumber;
      vlOxdBalanceOf: BigNumber;
      vlOxdLocksData: [
        BigNumber,
        BigNumber,
        BigNumber,
        ([BigNumber, BigNumber, number] & {
          amount: BigNumber;
          boosted: BigNumber;
          unlockTime: number;
        })[]
      ] & {
        total: BigNumber;
        unlockable: BigNumber;
        locked: BigNumber;
        locks: ([BigNumber, BigNumber, number] & {
          amount: BigNumber;
          boosted: BigNumber;
          unlockTime: number;
        })[];
      };
      vlOxdRewardPoolPosition: ([
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        rewardTokenAddress: string;
        rewardRate: BigNumber;
        rewardPerToken: BigNumber;
        getRewardForDuration: BigNumber;
        earned: BigNumber;
      })[];
      votesData: [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        ([string, BigNumber] & { poolAddress: string; weight: BigNumber })[]
      ] & {
        delegateAddress: string;
        weightTotal: BigNumber;
        weightUsed: BigNumber;
        weightAvailable: BigNumber;
        votes: ([string, BigNumber] & {
          poolAddress: string;
          weight: BigNumber;
        })[];
      };
      oxdV1BalanceOf: BigNumber;
      userProxyImplementationsAddresses: string[];
    }
  >;

  protocolAddresses(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ] & {
      oxPoolFactoryAddress: string;
      solidlyLensAddress: string;
      oxdAddress: string;
      vlOxdAddress: string;
      oxSolidAddress: string;
      voterProxyAddress: string;
      solidAddress: string;
      voterAddress: string;
      poolsFactoryAddress: string;
      gaugesFactoryAddress: string;
      minterAddress: string;
      veAddress: string;
      userProxyInterfaceAddress: string;
      votingSnapshotAddress: string;
      oxdV1RewardsAddress: string;
      oxdV1RedeemAddress: string;
      oxdV1Address: string;
      tokensAllowlistAddress: string;
    }
  >;

  "protocolAddresses()"(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ] & {
      oxPoolFactoryAddress: string;
      solidlyLensAddress: string;
      oxdAddress: string;
      vlOxdAddress: string;
      oxSolidAddress: string;
      voterProxyAddress: string;
      solidAddress: string;
      voterAddress: string;
      poolsFactoryAddress: string;
      gaugesFactoryAddress: string;
      minterAddress: string;
      veAddress: string;
      userProxyInterfaceAddress: string;
      votingSnapshotAddress: string;
      oxdV1RewardsAddress: string;
      oxdV1RedeemAddress: string;
      oxdV1Address: string;
      tokensAllowlistAddress: string;
    }
  >;

  proxyStorageInitialized(overrides?: CallOverrides): Promise<boolean>;

  "proxyStorageInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  rewardTokenPositionOf(
    accountAddress: string,
    stakingPoolAddress: string,
    rewardTokenAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      rewardTokenAddress: string;
      rewardRate: BigNumber;
      rewardPerToken: BigNumber;
      getRewardForDuration: BigNumber;
      earned: BigNumber;
    }
  >;

  "rewardTokenPositionOf(address,address,address)"(
    accountAddress: string,
    stakingPoolAddress: string,
    rewardTokenAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      rewardTokenAddress: string;
      rewardRate: BigNumber;
      rewardPerToken: BigNumber;
      getRewardForDuration: BigNumber;
      earned: BigNumber;
    }
  >;

  rewardTokensData(
    stakingPoolAddress: string,
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber] & {
      id: string;
      rewardRate: BigNumber;
      periodFinish: BigNumber;
    })[]
  >;

  "rewardTokensData(address)"(
    stakingPoolAddress: string,
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber] & {
      id: string;
      rewardRate: BigNumber;
      periodFinish: BigNumber;
    })[]
  >;

  rewardTokensDatas(
    stakingPoolsAddresses: string[],
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber] & {
      id: string;
      rewardRate: BigNumber;
      periodFinish: BigNumber;
    })[][]
  >;

  "rewardTokensDatas(address[])"(
    stakingPoolsAddresses: string[],
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber] & {
      id: string;
      rewardRate: BigNumber;
      periodFinish: BigNumber;
    })[][]
  >;

  "rewardTokensPositionsOf(address,address)"(
    accountAddress: string,
    stakingPoolAddress: string,
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      rewardTokenAddress: string;
      rewardRate: BigNumber;
      rewardPerToken: BigNumber;
      getRewardForDuration: BigNumber;
      earned: BigNumber;
    })[]
  >;

  "rewardTokensPositionsOf(address)"(
    accountAddress: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardTokenAddress: string;
        rewardRate: BigNumber;
        rewardPerToken: BigNumber;
        getRewardForDuration: BigNumber;
        earned: BigNumber;
      })[]
    ] & {
      stakingPoolAddress: string;
      rewardTokens: ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardTokenAddress: string;
        rewardRate: BigNumber;
        rewardPerToken: BigNumber;
        getRewardForDuration: BigNumber;
        earned: BigNumber;
      })[];
    })[]
  >;

  rewardsDistributorAddress(overrides?: CallOverrides): Promise<string>;

  "rewardsDistributorAddress()"(overrides?: CallOverrides): Promise<string>;

  setMigration(
    fromOxPoolAddress: string,
    toOxPoolAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMigration(address,address)"(
    fromOxPoolAddress: string,
    toOxPoolAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMigrations(
    fromOxPoolsAddresses: string[],
    toOxPoolsAddresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMigrations(address[],address[])"(
    fromOxPoolsAddresses: string[],
    toOxPoolsAddresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  solid(overrides?: CallOverrides): Promise<string>;

  "solid()"(overrides?: CallOverrides): Promise<string>;

  solidAddress(overrides?: CallOverrides): Promise<string>;

  "solidAddress()"(overrides?: CallOverrides): Promise<string>;

  solidBalanceOf(
    accountAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "solidBalanceOf(address)"(
    accountAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  solidInflationSinceInception(overrides?: CallOverrides): Promise<BigNumber>;

  "solidInflationSinceInception()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  solidPoolByOxPool(
    oxPoolAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "solidPoolByOxPool(address)"(
    oxPoolAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  solidlyLens(overrides?: CallOverrides): Promise<string>;

  "solidlyLens()"(overrides?: CallOverrides): Promise<string>;

  solidlyLensAddress(overrides?: CallOverrides): Promise<string>;

  "solidlyLensAddress()"(overrides?: CallOverrides): Promise<string>;

  stakedOxSolidBalanceOf(
    accountAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "stakedOxSolidBalanceOf(address)"(
    accountAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stakingPoolPosition(
    accountAddress: string,
    stakingPoolAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardTokenAddress: string;
        rewardRate: BigNumber;
        rewardPerToken: BigNumber;
        getRewardForDuration: BigNumber;
        earned: BigNumber;
      })[]
    ] & {
      stakingPoolAddress: string;
      oxPoolAddress: string;
      solidPoolAddress: string;
      balanceOf: BigNumber;
      rewardTokens: ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardTokenAddress: string;
        rewardRate: BigNumber;
        rewardPerToken: BigNumber;
        getRewardForDuration: BigNumber;
        earned: BigNumber;
      })[];
    }
  >;

  "stakingPoolPosition(address,address)"(
    accountAddress: string,
    stakingPoolAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardTokenAddress: string;
        rewardRate: BigNumber;
        rewardPerToken: BigNumber;
        getRewardForDuration: BigNumber;
        earned: BigNumber;
      })[]
    ] & {
      stakingPoolAddress: string;
      oxPoolAddress: string;
      solidPoolAddress: string;
      balanceOf: BigNumber;
      rewardTokens: ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardTokenAddress: string;
        rewardRate: BigNumber;
        rewardPerToken: BigNumber;
        getRewardForDuration: BigNumber;
        earned: BigNumber;
      })[];
    }
  >;

  "stakingPoolsPositions(address)"(
    accountAddress: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      string,
      string,
      BigNumber,
      ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardTokenAddress: string;
        rewardRate: BigNumber;
        rewardPerToken: BigNumber;
        getRewardForDuration: BigNumber;
        earned: BigNumber;
      })[]
    ] & {
      stakingPoolAddress: string;
      oxPoolAddress: string;
      solidPoolAddress: string;
      balanceOf: BigNumber;
      rewardTokens: ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardTokenAddress: string;
        rewardRate: BigNumber;
        rewardPerToken: BigNumber;
        getRewardForDuration: BigNumber;
        earned: BigNumber;
      })[];
    })[]
  >;

  "stakingPoolsPositions()"(
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      string,
      string,
      BigNumber,
      ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardTokenAddress: string;
        rewardRate: BigNumber;
        rewardPerToken: BigNumber;
        getRewardForDuration: BigNumber;
        earned: BigNumber;
      })[]
    ] & {
      stakingPoolAddress: string;
      oxPoolAddress: string;
      solidPoolAddress: string;
      balanceOf: BigNumber;
      rewardTokens: ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardTokenAddress: string;
        rewardRate: BigNumber;
        rewardPerToken: BigNumber;
        getRewardForDuration: BigNumber;
        earned: BigNumber;
      })[];
    })[]
  >;

  stakingRewardsByOxPool(
    oxPoolAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "stakingRewardsByOxPool(address)"(
    oxPoolAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  stakingRewardsBySolidPool(
    solidPoolAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "stakingRewardsBySolidPool(address)"(
    solidPoolAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenId(overrides?: CallOverrides): Promise<BigNumber>;

  "tokenId()"(overrides?: CallOverrides): Promise<BigNumber>;

  tokensAllowlist(overrides?: CallOverrides): Promise<string>;

  "tokensAllowlist()"(overrides?: CallOverrides): Promise<string>;

  tokensAllowlistAddress(overrides?: CallOverrides): Promise<string>;

  "tokensAllowlistAddress()"(overrides?: CallOverrides): Promise<string>;

  transferTreasury(
    _newTreasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferTreasury(address)"(
    _newTreasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasuryAddress(overrides?: CallOverrides): Promise<string>;

  "treasuryAddress()"(overrides?: CallOverrides): Promise<string>;

  userProxiesLength(overrides?: CallOverrides): Promise<BigNumber>;

  "userProxiesLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  userProxyByAccount(
    accountAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "userProxyByAccount(address)"(
    accountAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  userProxyByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "userProxyByIndex(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  userProxyFactory(overrides?: CallOverrides): Promise<string>;

  "userProxyFactory()"(overrides?: CallOverrides): Promise<string>;

  userProxyFactoryAddress(overrides?: CallOverrides): Promise<string>;

  "userProxyFactoryAddress()"(overrides?: CallOverrides): Promise<string>;

  userProxyInterfaceAddress(overrides?: CallOverrides): Promise<string>;

  "userProxyInterfaceAddress()"(overrides?: CallOverrides): Promise<string>;

  ve(overrides?: CallOverrides): Promise<string>;

  "ve()"(overrides?: CallOverrides): Promise<string>;

  veAddress(overrides?: CallOverrides): Promise<string>;

  "veAddress()"(overrides?: CallOverrides): Promise<string>;

  veTotalBalanceOf(
    positions: {
      tokenId: BigNumberish;
      balanceOf: BigNumberish;
      locked: BigNumberish;
    }[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "veTotalBalanceOf(tuple[])"(
    positions: {
      tokenId: BigNumberish;
      balanceOf: BigNumberish;
      locked: BigNumberish;
    }[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vlOxd(overrides?: CallOverrides): Promise<string>;

  "vlOxd()"(overrides?: CallOverrides): Promise<string>;

  vlOxdAddress(overrides?: CallOverrides): Promise<string>;

  "vlOxdAddress()"(overrides?: CallOverrides): Promise<string>;

  vlOxdLocksData(
    accountAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      ([BigNumber, BigNumber, number] & {
        amount: BigNumber;
        boosted: BigNumber;
        unlockTime: number;
      })[]
    ] & {
      total: BigNumber;
      unlockable: BigNumber;
      locked: BigNumber;
      locks: ([BigNumber, BigNumber, number] & {
        amount: BigNumber;
        boosted: BigNumber;
        unlockTime: number;
      })[];
    }
  >;

  "vlOxdLocksData(address)"(
    accountAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      ([BigNumber, BigNumber, number] & {
        amount: BigNumber;
        boosted: BigNumber;
        unlockTime: number;
      })[]
    ] & {
      total: BigNumber;
      unlockable: BigNumber;
      locked: BigNumber;
      locks: ([BigNumber, BigNumber, number] & {
        amount: BigNumber;
        boosted: BigNumber;
        unlockTime: number;
      })[];
    }
  >;

  vlOxdRewardTokenPositionOf(
    accountAddress: string,
    rewardTokenAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      rewardTokenAddress: string;
      rewardRate: BigNumber;
      rewardPerToken: BigNumber;
      getRewardForDuration: BigNumber;
      earned: BigNumber;
    }
  >;

  "vlOxdRewardTokenPositionOf(address,address)"(
    accountAddress: string,
    rewardTokenAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      rewardTokenAddress: string;
      rewardRate: BigNumber;
      rewardPerToken: BigNumber;
      getRewardForDuration: BigNumber;
      earned: BigNumber;
    }
  >;

  vlOxdRewardTokenPositionsOf(
    accountAddress: string,
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      rewardTokenAddress: string;
      rewardRate: BigNumber;
      rewardPerToken: BigNumber;
      getRewardForDuration: BigNumber;
      earned: BigNumber;
    })[]
  >;

  "vlOxdRewardTokenPositionsOf(address)"(
    accountAddress: string,
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      rewardTokenAddress: string;
      rewardRate: BigNumber;
      rewardPerToken: BigNumber;
      getRewardForDuration: BigNumber;
      earned: BigNumber;
    })[]
  >;

  votePositionsOf(
    accountAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      ([string, BigNumber] & { poolAddress: string; weight: BigNumber })[]
    ] & {
      delegateAddress: string;
      weightTotal: BigNumber;
      weightUsed: BigNumber;
      weightAvailable: BigNumber;
      votes: ([string, BigNumber] & {
        poolAddress: string;
        weight: BigNumber;
      })[];
    }
  >;

  "votePositionsOf(address)"(
    accountAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      ([string, BigNumber] & { poolAddress: string; weight: BigNumber })[]
    ] & {
      delegateAddress: string;
      weightTotal: BigNumber;
      weightUsed: BigNumber;
      weightAvailable: BigNumber;
      votes: ([string, BigNumber] & {
        poolAddress: string;
        weight: BigNumber;
      })[];
    }
  >;

  voterAddress(overrides?: CallOverrides): Promise<string>;

  "voterAddress()"(overrides?: CallOverrides): Promise<string>;

  voterProxy(overrides?: CallOverrides): Promise<string>;

  "voterProxy()"(overrides?: CallOverrides): Promise<string>;

  voterProxyAddress(overrides?: CallOverrides): Promise<string>;

  "voterProxyAddress()"(overrides?: CallOverrides): Promise<string>;

  votingSnapshot(overrides?: CallOverrides): Promise<string>;

  "votingSnapshot()"(overrides?: CallOverrides): Promise<string>;

  votingSnapshotAddress(overrides?: CallOverrides): Promise<string>;

  "votingSnapshotAddress()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    gaugeBySolidPool(
      solidPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "gaugeBySolidPool(address)"(
      solidPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    gaugesFactoryAddress(overrides?: CallOverrides): Promise<string>;

    "gaugesFactoryAddress()"(overrides?: CallOverrides): Promise<string>;

    initializeProxyStorage(
      _oxPoolFactoryAddress: string,
      _userProxyFactoryAddress: string,
      _solidlyLensAddress: string,
      _oxdAddress: string,
      _vlOxdAddress: string,
      _oxSolidAddress: string,
      _oxSolidRewardsPoolAddress: string,
      _rewardsDistributorAddress: string,
      _partnersRewardsPoolAddress: string,
      _userProxyInterfaceAddress: string,
      _oxdV1RewardsAddress: string,
      _oxdV1RedeemAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initializeProxyStorage(address,address,address,address,address,address,address,address,address,address,address,address)"(
      _oxPoolFactoryAddress: string,
      _userProxyFactoryAddress: string,
      _solidlyLensAddress: string,
      _oxdAddress: string,
      _vlOxdAddress: string,
      _oxSolidAddress: string,
      _oxSolidRewardsPoolAddress: string,
      _rewardsDistributorAddress: string,
      _partnersRewardsPoolAddress: string,
      _userProxyInterfaceAddress: string,
      _oxdV1RewardsAddress: string,
      _oxdV1RedeemAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isOxPool(
      oxPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isOxPool(address)"(
      oxPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPartner(
      userProxyAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isPartner(address)"(
      userProxyAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isProxyPartner(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isProxyPartner(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    migrateableOxPools(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<
      ([string, string, string, BigNumber] & {
        fromOxPoolAddress: string;
        toOxPoolAddress: string;
        fromStakingPoolAddress: string;
        balanceOf: BigNumber;
      })[]
    >;

    "migrateableOxPools(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<
      ([string, string, string, BigNumber] & {
        fromOxPoolAddress: string;
        toOxPoolAddress: string;
        fromStakingPoolAddress: string;
        balanceOf: BigNumber;
      })[]
    >;

    minterAddress(overrides?: CallOverrides): Promise<string>;

    "minterAddress()"(overrides?: CallOverrides): Promise<string>;

    oxPoolBySolidPool(
      solidPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "oxPoolBySolidPool(address)"(
      solidPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    oxPoolData(
      oxPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        [
          string,
          string,
          boolean,
          string,
          string,
          string,
          string,
          string[],
          string,
          BigNumber
        ] & {
          id: string;
          symbol: string;
          stable: boolean;
          token0Address: string;
          token1Address: string;
          gaugeAddress: string;
          bribeAddress: string;
          bribeTokensAddresses: string[];
          fees: string;
          totalSupply: BigNumber;
        }
      ] & {
        id: string;
        stakingAddress: string;
        stakedTotalSupply: BigNumber;
        totalSupply: BigNumber;
        poolData: [
          string,
          string,
          boolean,
          string,
          string,
          string,
          string,
          string[],
          string,
          BigNumber
        ] & {
          id: string;
          symbol: string;
          stable: boolean;
          token0Address: string;
          token1Address: string;
          gaugeAddress: string;
          bribeAddress: string;
          bribeTokensAddresses: string[];
          fees: string;
          totalSupply: BigNumber;
        };
      }
    >;

    "oxPoolData(address)"(
      oxPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        [
          string,
          string,
          boolean,
          string,
          string,
          string,
          string,
          string[],
          string,
          BigNumber
        ] & {
          id: string;
          symbol: string;
          stable: boolean;
          token0Address: string;
          token1Address: string;
          gaugeAddress: string;
          bribeAddress: string;
          bribeTokensAddresses: string[];
          fees: string;
          totalSupply: BigNumber;
        }
      ] & {
        id: string;
        stakingAddress: string;
        stakedTotalSupply: BigNumber;
        totalSupply: BigNumber;
        poolData: [
          string,
          string,
          boolean,
          string,
          string,
          string,
          string,
          string[],
          string,
          BigNumber
        ] & {
          id: string;
          symbol: string;
          stable: boolean;
          token0Address: string;
          token1Address: string;
          gaugeAddress: string;
          bribeAddress: string;
          bribeTokensAddresses: string[];
          fees: string;
          totalSupply: BigNumber;
        };
      }
    >;

    oxPoolFactory(overrides?: CallOverrides): Promise<string>;

    "oxPoolFactory()"(overrides?: CallOverrides): Promise<string>;

    oxPoolFactoryAddress(overrides?: CallOverrides): Promise<string>;

    "oxPoolFactoryAddress()"(overrides?: CallOverrides): Promise<string>;

    oxPoolsAddresses(overrides?: CallOverrides): Promise<string[]>;

    "oxPoolsAddresses()"(overrides?: CallOverrides): Promise<string[]>;

    "oxPoolsData(address[])"(
      _oxPoolsAddresses: string[],
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        string,
        BigNumber,
        BigNumber,
        [
          string,
          string,
          boolean,
          string,
          string,
          string,
          string,
          string[],
          string,
          BigNumber
        ] & {
          id: string;
          symbol: string;
          stable: boolean;
          token0Address: string;
          token1Address: string;
          gaugeAddress: string;
          bribeAddress: string;
          bribeTokensAddresses: string[];
          fees: string;
          totalSupply: BigNumber;
        }
      ] & {
        id: string;
        stakingAddress: string;
        stakedTotalSupply: BigNumber;
        totalSupply: BigNumber;
        poolData: [
          string,
          string,
          boolean,
          string,
          string,
          string,
          string,
          string[],
          string,
          BigNumber
        ] & {
          id: string;
          symbol: string;
          stable: boolean;
          token0Address: string;
          token1Address: string;
          gaugeAddress: string;
          bribeAddress: string;
          bribeTokensAddresses: string[];
          fees: string;
          totalSupply: BigNumber;
        };
      })[]
    >;

    "oxPoolsData()"(
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        string,
        BigNumber,
        BigNumber,
        [
          string,
          string,
          boolean,
          string,
          string,
          string,
          string,
          string[],
          string,
          BigNumber
        ] & {
          id: string;
          symbol: string;
          stable: boolean;
          token0Address: string;
          token1Address: string;
          gaugeAddress: string;
          bribeAddress: string;
          bribeTokensAddresses: string[];
          fees: string;
          totalSupply: BigNumber;
        }
      ] & {
        id: string;
        stakingAddress: string;
        stakedTotalSupply: BigNumber;
        totalSupply: BigNumber;
        poolData: [
          string,
          string,
          boolean,
          string,
          string,
          string,
          string,
          string[],
          string,
          BigNumber
        ] & {
          id: string;
          symbol: string;
          stable: boolean;
          token0Address: string;
          token1Address: string;
          gaugeAddress: string;
          bribeAddress: string;
          bribeTokensAddresses: string[];
          fees: string;
          totalSupply: BigNumber;
        };
      })[]
    >;

    oxPoolsLength(overrides?: CallOverrides): Promise<BigNumber>;

    "oxPoolsLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    oxPoolsMigrationMapping(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "oxPoolsMigrationMapping(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    oxSolid(overrides?: CallOverrides): Promise<string>;

    "oxSolid()"(overrides?: CallOverrides): Promise<string>;

    oxSolidAddress(overrides?: CallOverrides): Promise<string>;

    "oxSolidAddress()"(overrides?: CallOverrides): Promise<string>;

    oxSolidBalanceOf(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "oxSolidBalanceOf(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oxSolidRewardPoolPosition(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardTokenAddress: string;
        rewardRate: BigNumber;
        rewardPerToken: BigNumber;
        getRewardForDuration: BigNumber;
        earned: BigNumber;
      })[]
    >;

    "oxSolidRewardPoolPosition(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardTokenAddress: string;
        rewardRate: BigNumber;
        rewardPerToken: BigNumber;
        getRewardForDuration: BigNumber;
        earned: BigNumber;
      })[]
    >;

    oxSolidRewardsPool(overrides?: CallOverrides): Promise<string>;

    "oxSolidRewardsPool()"(overrides?: CallOverrides): Promise<string>;

    oxSolidRewardsPoolAddress(overrides?: CallOverrides): Promise<string>;

    "oxSolidRewardsPoolAddress()"(overrides?: CallOverrides): Promise<string>;

    oxd(overrides?: CallOverrides): Promise<string>;

    "oxd()"(overrides?: CallOverrides): Promise<string>;

    oxdAddress(overrides?: CallOverrides): Promise<string>;

    "oxdAddress()"(overrides?: CallOverrides): Promise<string>;

    oxdTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "oxdTotalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    oxdV1Address(overrides?: CallOverrides): Promise<string>;

    "oxdV1Address()"(overrides?: CallOverrides): Promise<string>;

    oxdV1RedeemAddress(overrides?: CallOverrides): Promise<string>;

    "oxdV1RedeemAddress()"(overrides?: CallOverrides): Promise<string>;

    oxdV1RewardsAddress(overrides?: CallOverrides): Promise<string>;

    "oxdV1RewardsAddress()"(overrides?: CallOverrides): Promise<string>;

    oxdV1StakedOxSolidBalanceOf(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "oxdV1StakedOxSolidBalanceOf(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oxdV1StakedOxSolidStakableAmount(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "oxdV1StakedOxSolidStakableAmount(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    partnersRewardsPoolAddress(overrides?: CallOverrides): Promise<string>;

    "partnersRewardsPoolAddress()"(overrides?: CallOverrides): Promise<string>;

    poolsFactoryAddress(overrides?: CallOverrides): Promise<string>;

    "poolsFactoryAddress()"(overrides?: CallOverrides): Promise<string>;

    "poolsPositions(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<([string, BigNumber] & { id: string; balanceOf: BigNumber })[]>;

    "poolsPositions(address,uint256,uint256)"(
      accountAddress: string,
      startIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<([string, BigNumber] & { id: string; balanceOf: BigNumber })[]>;

    positionsOf(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        ([BigNumber, BigNumber, BigNumber] & {
          tokenId: BigNumber;
          balanceOf: BigNumber;
          locked: BigNumber;
        })[],
        ([
          string,
          string,
          string,
          BigNumber,
          ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
            rewardTokenAddress: string;
            rewardRate: BigNumber;
            rewardPerToken: BigNumber;
            getRewardForDuration: BigNumber;
            earned: BigNumber;
          })[]
        ] & {
          stakingPoolAddress: string;
          oxPoolAddress: string;
          solidPoolAddress: string;
          balanceOf: BigNumber;
          rewardTokens: ([
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            rewardTokenAddress: string;
            rewardRate: BigNumber;
            rewardPerToken: BigNumber;
            getRewardForDuration: BigNumber;
            earned: BigNumber;
          })[];
        })[],
        BigNumber,
        BigNumber,
        ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          rewardTokenAddress: string;
          rewardRate: BigNumber;
          rewardPerToken: BigNumber;
          getRewardForDuration: BigNumber;
          earned: BigNumber;
        })[],
        BigNumber,
        BigNumber,
        ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          rewardTokenAddress: string;
          rewardRate: BigNumber;
          rewardPerToken: BigNumber;
          getRewardForDuration: BigNumber;
          earned: BigNumber;
        })[],
        BigNumber,
        BigNumber,
        BigNumber,
        [
          BigNumber,
          BigNumber,
          BigNumber,
          ([BigNumber, BigNumber, number] & {
            amount: BigNumber;
            boosted: BigNumber;
            unlockTime: number;
          })[]
        ] & {
          total: BigNumber;
          unlockable: BigNumber;
          locked: BigNumber;
          locks: ([BigNumber, BigNumber, number] & {
            amount: BigNumber;
            boosted: BigNumber;
            unlockTime: number;
          })[];
        },
        ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          rewardTokenAddress: string;
          rewardRate: BigNumber;
          rewardPerToken: BigNumber;
          getRewardForDuration: BigNumber;
          earned: BigNumber;
        })[],
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          ([string, BigNumber] & { poolAddress: string; weight: BigNumber })[]
        ] & {
          delegateAddress: string;
          weightTotal: BigNumber;
          weightUsed: BigNumber;
          weightAvailable: BigNumber;
          votes: ([string, BigNumber] & {
            poolAddress: string;
            weight: BigNumber;
          })[];
        },
        BigNumber,
        string[]
      ] & {
        userProxyAddress: string;
        veTotalBalanceOf: BigNumber;
        vePositions: ([BigNumber, BigNumber, BigNumber] & {
          tokenId: BigNumber;
          balanceOf: BigNumber;
          locked: BigNumber;
        })[];
        stakingPools: ([
          string,
          string,
          string,
          BigNumber,
          ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
            rewardTokenAddress: string;
            rewardRate: BigNumber;
            rewardPerToken: BigNumber;
            getRewardForDuration: BigNumber;
            earned: BigNumber;
          })[]
        ] & {
          stakingPoolAddress: string;
          oxPoolAddress: string;
          solidPoolAddress: string;
          balanceOf: BigNumber;
          rewardTokens: ([
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            rewardTokenAddress: string;
            rewardRate: BigNumber;
            rewardPerToken: BigNumber;
            getRewardForDuration: BigNumber;
            earned: BigNumber;
          })[];
        })[];
        oxSolidBalanceOf: BigNumber;
        stakedOxSolidBalanceOf: BigNumber;
        oxSolidRewardPoolPosition: ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          rewardTokenAddress: string;
          rewardRate: BigNumber;
          rewardPerToken: BigNumber;
          getRewardForDuration: BigNumber;
          earned: BigNumber;
        })[];
        oxdV1StakedOxSolidStakableAmount: BigNumber;
        oxdV1StakedOxSolidBalanceOf: BigNumber;
        oxdV1OxSolidRewardPoolPosition: ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          rewardTokenAddress: string;
          rewardRate: BigNumber;
          rewardPerToken: BigNumber;
          getRewardForDuration: BigNumber;
          earned: BigNumber;
        })[];
        oxdBalanceOf: BigNumber;
        solidBalanceOf: BigNumber;
        vlOxdBalanceOf: BigNumber;
        vlOxdLocksData: [
          BigNumber,
          BigNumber,
          BigNumber,
          ([BigNumber, BigNumber, number] & {
            amount: BigNumber;
            boosted: BigNumber;
            unlockTime: number;
          })[]
        ] & {
          total: BigNumber;
          unlockable: BigNumber;
          locked: BigNumber;
          locks: ([BigNumber, BigNumber, number] & {
            amount: BigNumber;
            boosted: BigNumber;
            unlockTime: number;
          })[];
        };
        vlOxdRewardPoolPosition: ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          rewardTokenAddress: string;
          rewardRate: BigNumber;
          rewardPerToken: BigNumber;
          getRewardForDuration: BigNumber;
          earned: BigNumber;
        })[];
        votesData: [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          ([string, BigNumber] & { poolAddress: string; weight: BigNumber })[]
        ] & {
          delegateAddress: string;
          weightTotal: BigNumber;
          weightUsed: BigNumber;
          weightAvailable: BigNumber;
          votes: ([string, BigNumber] & {
            poolAddress: string;
            weight: BigNumber;
          })[];
        };
        oxdV1BalanceOf: BigNumber;
        userProxyImplementationsAddresses: string[];
      }
    >;

    "positionsOf(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        ([BigNumber, BigNumber, BigNumber] & {
          tokenId: BigNumber;
          balanceOf: BigNumber;
          locked: BigNumber;
        })[],
        ([
          string,
          string,
          string,
          BigNumber,
          ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
            rewardTokenAddress: string;
            rewardRate: BigNumber;
            rewardPerToken: BigNumber;
            getRewardForDuration: BigNumber;
            earned: BigNumber;
          })[]
        ] & {
          stakingPoolAddress: string;
          oxPoolAddress: string;
          solidPoolAddress: string;
          balanceOf: BigNumber;
          rewardTokens: ([
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            rewardTokenAddress: string;
            rewardRate: BigNumber;
            rewardPerToken: BigNumber;
            getRewardForDuration: BigNumber;
            earned: BigNumber;
          })[];
        })[],
        BigNumber,
        BigNumber,
        ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          rewardTokenAddress: string;
          rewardRate: BigNumber;
          rewardPerToken: BigNumber;
          getRewardForDuration: BigNumber;
          earned: BigNumber;
        })[],
        BigNumber,
        BigNumber,
        ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          rewardTokenAddress: string;
          rewardRate: BigNumber;
          rewardPerToken: BigNumber;
          getRewardForDuration: BigNumber;
          earned: BigNumber;
        })[],
        BigNumber,
        BigNumber,
        BigNumber,
        [
          BigNumber,
          BigNumber,
          BigNumber,
          ([BigNumber, BigNumber, number] & {
            amount: BigNumber;
            boosted: BigNumber;
            unlockTime: number;
          })[]
        ] & {
          total: BigNumber;
          unlockable: BigNumber;
          locked: BigNumber;
          locks: ([BigNumber, BigNumber, number] & {
            amount: BigNumber;
            boosted: BigNumber;
            unlockTime: number;
          })[];
        },
        ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          rewardTokenAddress: string;
          rewardRate: BigNumber;
          rewardPerToken: BigNumber;
          getRewardForDuration: BigNumber;
          earned: BigNumber;
        })[],
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          ([string, BigNumber] & { poolAddress: string; weight: BigNumber })[]
        ] & {
          delegateAddress: string;
          weightTotal: BigNumber;
          weightUsed: BigNumber;
          weightAvailable: BigNumber;
          votes: ([string, BigNumber] & {
            poolAddress: string;
            weight: BigNumber;
          })[];
        },
        BigNumber,
        string[]
      ] & {
        userProxyAddress: string;
        veTotalBalanceOf: BigNumber;
        vePositions: ([BigNumber, BigNumber, BigNumber] & {
          tokenId: BigNumber;
          balanceOf: BigNumber;
          locked: BigNumber;
        })[];
        stakingPools: ([
          string,
          string,
          string,
          BigNumber,
          ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
            rewardTokenAddress: string;
            rewardRate: BigNumber;
            rewardPerToken: BigNumber;
            getRewardForDuration: BigNumber;
            earned: BigNumber;
          })[]
        ] & {
          stakingPoolAddress: string;
          oxPoolAddress: string;
          solidPoolAddress: string;
          balanceOf: BigNumber;
          rewardTokens: ([
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            rewardTokenAddress: string;
            rewardRate: BigNumber;
            rewardPerToken: BigNumber;
            getRewardForDuration: BigNumber;
            earned: BigNumber;
          })[];
        })[];
        oxSolidBalanceOf: BigNumber;
        stakedOxSolidBalanceOf: BigNumber;
        oxSolidRewardPoolPosition: ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          rewardTokenAddress: string;
          rewardRate: BigNumber;
          rewardPerToken: BigNumber;
          getRewardForDuration: BigNumber;
          earned: BigNumber;
        })[];
        oxdV1StakedOxSolidStakableAmount: BigNumber;
        oxdV1StakedOxSolidBalanceOf: BigNumber;
        oxdV1OxSolidRewardPoolPosition: ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          rewardTokenAddress: string;
          rewardRate: BigNumber;
          rewardPerToken: BigNumber;
          getRewardForDuration: BigNumber;
          earned: BigNumber;
        })[];
        oxdBalanceOf: BigNumber;
        solidBalanceOf: BigNumber;
        vlOxdBalanceOf: BigNumber;
        vlOxdLocksData: [
          BigNumber,
          BigNumber,
          BigNumber,
          ([BigNumber, BigNumber, number] & {
            amount: BigNumber;
            boosted: BigNumber;
            unlockTime: number;
          })[]
        ] & {
          total: BigNumber;
          unlockable: BigNumber;
          locked: BigNumber;
          locks: ([BigNumber, BigNumber, number] & {
            amount: BigNumber;
            boosted: BigNumber;
            unlockTime: number;
          })[];
        };
        vlOxdRewardPoolPosition: ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          rewardTokenAddress: string;
          rewardRate: BigNumber;
          rewardPerToken: BigNumber;
          getRewardForDuration: BigNumber;
          earned: BigNumber;
        })[];
        votesData: [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          ([string, BigNumber] & { poolAddress: string; weight: BigNumber })[]
        ] & {
          delegateAddress: string;
          weightTotal: BigNumber;
          weightUsed: BigNumber;
          weightAvailable: BigNumber;
          votes: ([string, BigNumber] & {
            poolAddress: string;
            weight: BigNumber;
          })[];
        };
        oxdV1BalanceOf: BigNumber;
        userProxyImplementationsAddresses: string[];
      }
    >;

    protocolAddresses(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ] & {
        oxPoolFactoryAddress: string;
        solidlyLensAddress: string;
        oxdAddress: string;
        vlOxdAddress: string;
        oxSolidAddress: string;
        voterProxyAddress: string;
        solidAddress: string;
        voterAddress: string;
        poolsFactoryAddress: string;
        gaugesFactoryAddress: string;
        minterAddress: string;
        veAddress: string;
        userProxyInterfaceAddress: string;
        votingSnapshotAddress: string;
        oxdV1RewardsAddress: string;
        oxdV1RedeemAddress: string;
        oxdV1Address: string;
        tokensAllowlistAddress: string;
      }
    >;

    "protocolAddresses()"(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ] & {
        oxPoolFactoryAddress: string;
        solidlyLensAddress: string;
        oxdAddress: string;
        vlOxdAddress: string;
        oxSolidAddress: string;
        voterProxyAddress: string;
        solidAddress: string;
        voterAddress: string;
        poolsFactoryAddress: string;
        gaugesFactoryAddress: string;
        minterAddress: string;
        veAddress: string;
        userProxyInterfaceAddress: string;
        votingSnapshotAddress: string;
        oxdV1RewardsAddress: string;
        oxdV1RedeemAddress: string;
        oxdV1Address: string;
        tokensAllowlistAddress: string;
      }
    >;

    proxyStorageInitialized(overrides?: CallOverrides): Promise<boolean>;

    "proxyStorageInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    rewardTokenPositionOf(
      accountAddress: string,
      stakingPoolAddress: string,
      rewardTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardTokenAddress: string;
        rewardRate: BigNumber;
        rewardPerToken: BigNumber;
        getRewardForDuration: BigNumber;
        earned: BigNumber;
      }
    >;

    "rewardTokenPositionOf(address,address,address)"(
      accountAddress: string,
      stakingPoolAddress: string,
      rewardTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardTokenAddress: string;
        rewardRate: BigNumber;
        rewardPerToken: BigNumber;
        getRewardForDuration: BigNumber;
        earned: BigNumber;
      }
    >;

    rewardTokensData(
      stakingPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber] & {
        id: string;
        rewardRate: BigNumber;
        periodFinish: BigNumber;
      })[]
    >;

    "rewardTokensData(address)"(
      stakingPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber] & {
        id: string;
        rewardRate: BigNumber;
        periodFinish: BigNumber;
      })[]
    >;

    rewardTokensDatas(
      stakingPoolsAddresses: string[],
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber] & {
        id: string;
        rewardRate: BigNumber;
        periodFinish: BigNumber;
      })[][]
    >;

    "rewardTokensDatas(address[])"(
      stakingPoolsAddresses: string[],
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber] & {
        id: string;
        rewardRate: BigNumber;
        periodFinish: BigNumber;
      })[][]
    >;

    "rewardTokensPositionsOf(address,address)"(
      accountAddress: string,
      stakingPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardTokenAddress: string;
        rewardRate: BigNumber;
        rewardPerToken: BigNumber;
        getRewardForDuration: BigNumber;
        earned: BigNumber;
      })[]
    >;

    "rewardTokensPositionsOf(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          rewardTokenAddress: string;
          rewardRate: BigNumber;
          rewardPerToken: BigNumber;
          getRewardForDuration: BigNumber;
          earned: BigNumber;
        })[]
      ] & {
        stakingPoolAddress: string;
        rewardTokens: ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          rewardTokenAddress: string;
          rewardRate: BigNumber;
          rewardPerToken: BigNumber;
          getRewardForDuration: BigNumber;
          earned: BigNumber;
        })[];
      })[]
    >;

    rewardsDistributorAddress(overrides?: CallOverrides): Promise<string>;

    "rewardsDistributorAddress()"(overrides?: CallOverrides): Promise<string>;

    setMigration(
      fromOxPoolAddress: string,
      toOxPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMigration(address,address)"(
      fromOxPoolAddress: string,
      toOxPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMigrations(
      fromOxPoolsAddresses: string[],
      toOxPoolsAddresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setMigrations(address[],address[])"(
      fromOxPoolsAddresses: string[],
      toOxPoolsAddresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    solid(overrides?: CallOverrides): Promise<string>;

    "solid()"(overrides?: CallOverrides): Promise<string>;

    solidAddress(overrides?: CallOverrides): Promise<string>;

    "solidAddress()"(overrides?: CallOverrides): Promise<string>;

    solidBalanceOf(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "solidBalanceOf(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    solidInflationSinceInception(overrides?: CallOverrides): Promise<BigNumber>;

    "solidInflationSinceInception()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    solidPoolByOxPool(
      oxPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "solidPoolByOxPool(address)"(
      oxPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    solidlyLens(overrides?: CallOverrides): Promise<string>;

    "solidlyLens()"(overrides?: CallOverrides): Promise<string>;

    solidlyLensAddress(overrides?: CallOverrides): Promise<string>;

    "solidlyLensAddress()"(overrides?: CallOverrides): Promise<string>;

    stakedOxSolidBalanceOf(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stakedOxSolidBalanceOf(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakingPoolPosition(
      accountAddress: string,
      stakingPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          rewardTokenAddress: string;
          rewardRate: BigNumber;
          rewardPerToken: BigNumber;
          getRewardForDuration: BigNumber;
          earned: BigNumber;
        })[]
      ] & {
        stakingPoolAddress: string;
        oxPoolAddress: string;
        solidPoolAddress: string;
        balanceOf: BigNumber;
        rewardTokens: ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          rewardTokenAddress: string;
          rewardRate: BigNumber;
          rewardPerToken: BigNumber;
          getRewardForDuration: BigNumber;
          earned: BigNumber;
        })[];
      }
    >;

    "stakingPoolPosition(address,address)"(
      accountAddress: string,
      stakingPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          rewardTokenAddress: string;
          rewardRate: BigNumber;
          rewardPerToken: BigNumber;
          getRewardForDuration: BigNumber;
          earned: BigNumber;
        })[]
      ] & {
        stakingPoolAddress: string;
        oxPoolAddress: string;
        solidPoolAddress: string;
        balanceOf: BigNumber;
        rewardTokens: ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          rewardTokenAddress: string;
          rewardRate: BigNumber;
          rewardPerToken: BigNumber;
          getRewardForDuration: BigNumber;
          earned: BigNumber;
        })[];
      }
    >;

    "stakingPoolsPositions(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        string,
        string,
        BigNumber,
        ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          rewardTokenAddress: string;
          rewardRate: BigNumber;
          rewardPerToken: BigNumber;
          getRewardForDuration: BigNumber;
          earned: BigNumber;
        })[]
      ] & {
        stakingPoolAddress: string;
        oxPoolAddress: string;
        solidPoolAddress: string;
        balanceOf: BigNumber;
        rewardTokens: ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          rewardTokenAddress: string;
          rewardRate: BigNumber;
          rewardPerToken: BigNumber;
          getRewardForDuration: BigNumber;
          earned: BigNumber;
        })[];
      })[]
    >;

    "stakingPoolsPositions()"(
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        string,
        string,
        BigNumber,
        ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          rewardTokenAddress: string;
          rewardRate: BigNumber;
          rewardPerToken: BigNumber;
          getRewardForDuration: BigNumber;
          earned: BigNumber;
        })[]
      ] & {
        stakingPoolAddress: string;
        oxPoolAddress: string;
        solidPoolAddress: string;
        balanceOf: BigNumber;
        rewardTokens: ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          rewardTokenAddress: string;
          rewardRate: BigNumber;
          rewardPerToken: BigNumber;
          getRewardForDuration: BigNumber;
          earned: BigNumber;
        })[];
      })[]
    >;

    stakingRewardsByOxPool(
      oxPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "stakingRewardsByOxPool(address)"(
      oxPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    stakingRewardsBySolidPool(
      solidPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "stakingRewardsBySolidPool(address)"(
      solidPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenId(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenId()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokensAllowlist(overrides?: CallOverrides): Promise<string>;

    "tokensAllowlist()"(overrides?: CallOverrides): Promise<string>;

    tokensAllowlistAddress(overrides?: CallOverrides): Promise<string>;

    "tokensAllowlistAddress()"(overrides?: CallOverrides): Promise<string>;

    transferTreasury(
      _newTreasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferTreasury(address)"(
      _newTreasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasuryAddress(overrides?: CallOverrides): Promise<string>;

    "treasuryAddress()"(overrides?: CallOverrides): Promise<string>;

    userProxiesLength(overrides?: CallOverrides): Promise<BigNumber>;

    "userProxiesLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    userProxyByAccount(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "userProxyByAccount(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    userProxyByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "userProxyByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    userProxyFactory(overrides?: CallOverrides): Promise<string>;

    "userProxyFactory()"(overrides?: CallOverrides): Promise<string>;

    userProxyFactoryAddress(overrides?: CallOverrides): Promise<string>;

    "userProxyFactoryAddress()"(overrides?: CallOverrides): Promise<string>;

    userProxyInterfaceAddress(overrides?: CallOverrides): Promise<string>;

    "userProxyInterfaceAddress()"(overrides?: CallOverrides): Promise<string>;

    ve(overrides?: CallOverrides): Promise<string>;

    "ve()"(overrides?: CallOverrides): Promise<string>;

    veAddress(overrides?: CallOverrides): Promise<string>;

    "veAddress()"(overrides?: CallOverrides): Promise<string>;

    veTotalBalanceOf(
      positions: {
        tokenId: BigNumberish;
        balanceOf: BigNumberish;
        locked: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "veTotalBalanceOf(tuple[])"(
      positions: {
        tokenId: BigNumberish;
        balanceOf: BigNumberish;
        locked: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vlOxd(overrides?: CallOverrides): Promise<string>;

    "vlOxd()"(overrides?: CallOverrides): Promise<string>;

    vlOxdAddress(overrides?: CallOverrides): Promise<string>;

    "vlOxdAddress()"(overrides?: CallOverrides): Promise<string>;

    vlOxdLocksData(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        ([BigNumber, BigNumber, number] & {
          amount: BigNumber;
          boosted: BigNumber;
          unlockTime: number;
        })[]
      ] & {
        total: BigNumber;
        unlockable: BigNumber;
        locked: BigNumber;
        locks: ([BigNumber, BigNumber, number] & {
          amount: BigNumber;
          boosted: BigNumber;
          unlockTime: number;
        })[];
      }
    >;

    "vlOxdLocksData(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        ([BigNumber, BigNumber, number] & {
          amount: BigNumber;
          boosted: BigNumber;
          unlockTime: number;
        })[]
      ] & {
        total: BigNumber;
        unlockable: BigNumber;
        locked: BigNumber;
        locks: ([BigNumber, BigNumber, number] & {
          amount: BigNumber;
          boosted: BigNumber;
          unlockTime: number;
        })[];
      }
    >;

    vlOxdRewardTokenPositionOf(
      accountAddress: string,
      rewardTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardTokenAddress: string;
        rewardRate: BigNumber;
        rewardPerToken: BigNumber;
        getRewardForDuration: BigNumber;
        earned: BigNumber;
      }
    >;

    "vlOxdRewardTokenPositionOf(address,address)"(
      accountAddress: string,
      rewardTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardTokenAddress: string;
        rewardRate: BigNumber;
        rewardPerToken: BigNumber;
        getRewardForDuration: BigNumber;
        earned: BigNumber;
      }
    >;

    vlOxdRewardTokenPositionsOf(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardTokenAddress: string;
        rewardRate: BigNumber;
        rewardPerToken: BigNumber;
        getRewardForDuration: BigNumber;
        earned: BigNumber;
      })[]
    >;

    "vlOxdRewardTokenPositionsOf(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardTokenAddress: string;
        rewardRate: BigNumber;
        rewardPerToken: BigNumber;
        getRewardForDuration: BigNumber;
        earned: BigNumber;
      })[]
    >;

    votePositionsOf(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        ([string, BigNumber] & { poolAddress: string; weight: BigNumber })[]
      ] & {
        delegateAddress: string;
        weightTotal: BigNumber;
        weightUsed: BigNumber;
        weightAvailable: BigNumber;
        votes: ([string, BigNumber] & {
          poolAddress: string;
          weight: BigNumber;
        })[];
      }
    >;

    "votePositionsOf(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        ([string, BigNumber] & { poolAddress: string; weight: BigNumber })[]
      ] & {
        delegateAddress: string;
        weightTotal: BigNumber;
        weightUsed: BigNumber;
        weightAvailable: BigNumber;
        votes: ([string, BigNumber] & {
          poolAddress: string;
          weight: BigNumber;
        })[];
      }
    >;

    voterAddress(overrides?: CallOverrides): Promise<string>;

    "voterAddress()"(overrides?: CallOverrides): Promise<string>;

    voterProxy(overrides?: CallOverrides): Promise<string>;

    "voterProxy()"(overrides?: CallOverrides): Promise<string>;

    voterProxyAddress(overrides?: CallOverrides): Promise<string>;

    "voterProxyAddress()"(overrides?: CallOverrides): Promise<string>;

    votingSnapshot(overrides?: CallOverrides): Promise<string>;

    "votingSnapshot()"(overrides?: CallOverrides): Promise<string>;

    votingSnapshotAddress(overrides?: CallOverrides): Promise<string>;

    "votingSnapshotAddress()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    gaugeBySolidPool(
      solidPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "gaugeBySolidPool(address)"(
      solidPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gaugesFactoryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "gaugesFactoryAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    initializeProxyStorage(
      _oxPoolFactoryAddress: string,
      _userProxyFactoryAddress: string,
      _solidlyLensAddress: string,
      _oxdAddress: string,
      _vlOxdAddress: string,
      _oxSolidAddress: string,
      _oxSolidRewardsPoolAddress: string,
      _rewardsDistributorAddress: string,
      _partnersRewardsPoolAddress: string,
      _userProxyInterfaceAddress: string,
      _oxdV1RewardsAddress: string,
      _oxdV1RedeemAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initializeProxyStorage(address,address,address,address,address,address,address,address,address,address,address,address)"(
      _oxPoolFactoryAddress: string,
      _userProxyFactoryAddress: string,
      _solidlyLensAddress: string,
      _oxdAddress: string,
      _vlOxdAddress: string,
      _oxSolidAddress: string,
      _oxSolidRewardsPoolAddress: string,
      _rewardsDistributorAddress: string,
      _partnersRewardsPoolAddress: string,
      _userProxyInterfaceAddress: string,
      _oxdV1RewardsAddress: string,
      _oxdV1RedeemAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isOxPool(
      oxPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isOxPool(address)"(
      oxPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPartner(
      userProxyAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isPartner(address)"(
      userProxyAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isProxyPartner(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isProxyPartner(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migrateableOxPools(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "migrateableOxPools(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minterAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "minterAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    oxPoolBySolidPool(
      solidPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "oxPoolBySolidPool(address)"(
      solidPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oxPoolData(
      oxPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "oxPoolData(address)"(
      oxPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oxPoolFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "oxPoolFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    oxPoolFactoryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "oxPoolFactoryAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    oxPoolsAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    "oxPoolsAddresses()"(overrides?: CallOverrides): Promise<BigNumber>;

    "oxPoolsData(address[])"(
      _oxPoolsAddresses: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "oxPoolsData()"(overrides?: CallOverrides): Promise<BigNumber>;

    oxPoolsLength(overrides?: CallOverrides): Promise<BigNumber>;

    "oxPoolsLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    oxPoolsMigrationMapping(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "oxPoolsMigrationMapping(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oxSolid(overrides?: CallOverrides): Promise<BigNumber>;

    "oxSolid()"(overrides?: CallOverrides): Promise<BigNumber>;

    oxSolidAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "oxSolidAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    oxSolidBalanceOf(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "oxSolidBalanceOf(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oxSolidRewardPoolPosition(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "oxSolidRewardPoolPosition(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oxSolidRewardsPool(overrides?: CallOverrides): Promise<BigNumber>;

    "oxSolidRewardsPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    oxSolidRewardsPoolAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "oxSolidRewardsPoolAddress()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oxd(overrides?: CallOverrides): Promise<BigNumber>;

    "oxd()"(overrides?: CallOverrides): Promise<BigNumber>;

    oxdAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "oxdAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    oxdTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "oxdTotalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    oxdV1Address(overrides?: CallOverrides): Promise<BigNumber>;

    "oxdV1Address()"(overrides?: CallOverrides): Promise<BigNumber>;

    oxdV1RedeemAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "oxdV1RedeemAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    oxdV1RewardsAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "oxdV1RewardsAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    oxdV1StakedOxSolidBalanceOf(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "oxdV1StakedOxSolidBalanceOf(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oxdV1StakedOxSolidStakableAmount(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "oxdV1StakedOxSolidStakableAmount(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    partnersRewardsPoolAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "partnersRewardsPoolAddress()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolsFactoryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "poolsFactoryAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    "poolsPositions(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolsPositions(address,uint256,uint256)"(
      accountAddress: string,
      startIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    positionsOf(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "positionsOf(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    "protocolAddresses()"(overrides?: CallOverrides): Promise<BigNumber>;

    proxyStorageInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "proxyStorageInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokenPositionOf(
      accountAddress: string,
      stakingPoolAddress: string,
      rewardTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardTokenPositionOf(address,address,address)"(
      accountAddress: string,
      stakingPoolAddress: string,
      rewardTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardTokensData(
      stakingPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardTokensData(address)"(
      stakingPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardTokensDatas(
      stakingPoolsAddresses: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardTokensDatas(address[])"(
      stakingPoolsAddresses: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardTokensPositionsOf(address,address)"(
      accountAddress: string,
      stakingPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardTokensPositionsOf(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsDistributorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsDistributorAddress()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMigration(
      fromOxPoolAddress: string,
      toOxPoolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMigration(address,address)"(
      fromOxPoolAddress: string,
      toOxPoolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMigrations(
      fromOxPoolsAddresses: string[],
      toOxPoolsAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMigrations(address[],address[])"(
      fromOxPoolsAddresses: string[],
      toOxPoolsAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    solid(overrides?: CallOverrides): Promise<BigNumber>;

    "solid()"(overrides?: CallOverrides): Promise<BigNumber>;

    solidAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "solidAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    solidBalanceOf(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "solidBalanceOf(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    solidInflationSinceInception(overrides?: CallOverrides): Promise<BigNumber>;

    "solidInflationSinceInception()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    solidPoolByOxPool(
      oxPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "solidPoolByOxPool(address)"(
      oxPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    solidlyLens(overrides?: CallOverrides): Promise<BigNumber>;

    "solidlyLens()"(overrides?: CallOverrides): Promise<BigNumber>;

    solidlyLensAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "solidlyLensAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakedOxSolidBalanceOf(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stakedOxSolidBalanceOf(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakingPoolPosition(
      accountAddress: string,
      stakingPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stakingPoolPosition(address,address)"(
      accountAddress: string,
      stakingPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stakingPoolsPositions(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stakingPoolsPositions()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakingRewardsByOxPool(
      oxPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stakingRewardsByOxPool(address)"(
      oxPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakingRewardsBySolidPool(
      solidPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stakingRewardsBySolidPool(address)"(
      solidPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenId(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenId()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokensAllowlist(overrides?: CallOverrides): Promise<BigNumber>;

    "tokensAllowlist()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokensAllowlistAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "tokensAllowlistAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferTreasury(
      _newTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferTreasury(address)"(
      _newTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasuryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "treasuryAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    userProxiesLength(overrides?: CallOverrides): Promise<BigNumber>;

    "userProxiesLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    userProxyByAccount(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userProxyByAccount(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userProxyByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userProxyByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userProxyFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "userProxyFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    userProxyFactoryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "userProxyFactoryAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    userProxyInterfaceAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "userProxyInterfaceAddress()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ve(overrides?: CallOverrides): Promise<BigNumber>;

    "ve()"(overrides?: CallOverrides): Promise<BigNumber>;

    veAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "veAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    veTotalBalanceOf(
      positions: {
        tokenId: BigNumberish;
        balanceOf: BigNumberish;
        locked: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "veTotalBalanceOf(tuple[])"(
      positions: {
        tokenId: BigNumberish;
        balanceOf: BigNumberish;
        locked: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vlOxd(overrides?: CallOverrides): Promise<BigNumber>;

    "vlOxd()"(overrides?: CallOverrides): Promise<BigNumber>;

    vlOxdAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "vlOxdAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    vlOxdLocksData(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "vlOxdLocksData(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vlOxdRewardTokenPositionOf(
      accountAddress: string,
      rewardTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "vlOxdRewardTokenPositionOf(address,address)"(
      accountAddress: string,
      rewardTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vlOxdRewardTokenPositionsOf(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "vlOxdRewardTokenPositionsOf(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votePositionsOf(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "votePositionsOf(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    voterAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "voterAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    voterProxy(overrides?: CallOverrides): Promise<BigNumber>;

    "voterProxy()"(overrides?: CallOverrides): Promise<BigNumber>;

    voterProxyAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "voterProxyAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    votingSnapshot(overrides?: CallOverrides): Promise<BigNumber>;

    "votingSnapshot()"(overrides?: CallOverrides): Promise<BigNumber>;

    votingSnapshotAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "votingSnapshotAddress()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    gaugeBySolidPool(
      solidPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "gaugeBySolidPool(address)"(
      solidPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gaugesFactoryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "gaugesFactoryAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initializeProxyStorage(
      _oxPoolFactoryAddress: string,
      _userProxyFactoryAddress: string,
      _solidlyLensAddress: string,
      _oxdAddress: string,
      _vlOxdAddress: string,
      _oxSolidAddress: string,
      _oxSolidRewardsPoolAddress: string,
      _rewardsDistributorAddress: string,
      _partnersRewardsPoolAddress: string,
      _userProxyInterfaceAddress: string,
      _oxdV1RewardsAddress: string,
      _oxdV1RedeemAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initializeProxyStorage(address,address,address,address,address,address,address,address,address,address,address,address)"(
      _oxPoolFactoryAddress: string,
      _userProxyFactoryAddress: string,
      _solidlyLensAddress: string,
      _oxdAddress: string,
      _vlOxdAddress: string,
      _oxSolidAddress: string,
      _oxSolidRewardsPoolAddress: string,
      _rewardsDistributorAddress: string,
      _partnersRewardsPoolAddress: string,
      _userProxyInterfaceAddress: string,
      _oxdV1RewardsAddress: string,
      _oxdV1RedeemAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isOxPool(
      oxPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isOxPool(address)"(
      oxPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPartner(
      userProxyAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isPartner(address)"(
      userProxyAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isProxyPartner(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isProxyPartner(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migrateableOxPools(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "migrateableOxPools(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minterAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minterAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oxPoolBySolidPool(
      solidPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "oxPoolBySolidPool(address)"(
      solidPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oxPoolData(
      oxPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "oxPoolData(address)"(
      oxPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oxPoolFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oxPoolFactory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oxPoolFactoryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "oxPoolFactoryAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oxPoolsAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oxPoolsAddresses()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "oxPoolsData(address[])"(
      _oxPoolsAddresses: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "oxPoolsData()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oxPoolsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oxPoolsLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oxPoolsMigrationMapping(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "oxPoolsMigrationMapping(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oxSolid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oxSolid()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oxSolidAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oxSolidAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oxSolidBalanceOf(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "oxSolidBalanceOf(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oxSolidRewardPoolPosition(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "oxSolidRewardPoolPosition(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oxSolidRewardsPool(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "oxSolidRewardsPool()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oxSolidRewardsPoolAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "oxSolidRewardsPoolAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oxd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oxd()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oxdAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oxdAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oxdTotalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oxdTotalSupply()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oxdV1Address(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oxdV1Address()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oxdV1RedeemAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "oxdV1RedeemAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oxdV1RewardsAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "oxdV1RewardsAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oxdV1StakedOxSolidBalanceOf(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "oxdV1StakedOxSolidBalanceOf(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oxdV1StakedOxSolidStakableAmount(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "oxdV1StakedOxSolidStakableAmount(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    partnersRewardsPoolAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "partnersRewardsPoolAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolsFactoryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolsFactoryAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolsPositions(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolsPositions(address,uint256,uint256)"(
      accountAddress: string,
      startIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positionsOf(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "positionsOf(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "protocolAddresses()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxyStorageInitialized(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proxyStorageInitialized()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardTokenPositionOf(
      accountAddress: string,
      stakingPoolAddress: string,
      rewardTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardTokenPositionOf(address,address,address)"(
      accountAddress: string,
      stakingPoolAddress: string,
      rewardTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardTokensData(
      stakingPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardTokensData(address)"(
      stakingPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardTokensDatas(
      stakingPoolsAddresses: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardTokensDatas(address[])"(
      stakingPoolsAddresses: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardTokensPositionsOf(address,address)"(
      accountAddress: string,
      stakingPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardTokensPositionsOf(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsDistributorAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardsDistributorAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMigration(
      fromOxPoolAddress: string,
      toOxPoolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMigration(address,address)"(
      fromOxPoolAddress: string,
      toOxPoolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMigrations(
      fromOxPoolsAddresses: string[],
      toOxPoolsAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMigrations(address[],address[])"(
      fromOxPoolsAddresses: string[],
      toOxPoolsAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    solid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "solid()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    solidAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "solidAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    solidBalanceOf(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "solidBalanceOf(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    solidInflationSinceInception(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "solidInflationSinceInception()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    solidPoolByOxPool(
      oxPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "solidPoolByOxPool(address)"(
      oxPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    solidlyLens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "solidlyLens()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    solidlyLensAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "solidlyLensAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakedOxSolidBalanceOf(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakedOxSolidBalanceOf(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingPoolPosition(
      accountAddress: string,
      stakingPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakingPoolPosition(address,address)"(
      accountAddress: string,
      stakingPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakingPoolsPositions(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakingPoolsPositions()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingRewardsByOxPool(
      oxPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakingRewardsByOxPool(address)"(
      oxPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingRewardsBySolidPool(
      solidPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakingRewardsBySolidPool(address)"(
      solidPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokensAllowlist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokensAllowlist()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensAllowlistAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokensAllowlistAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferTreasury(
      _newTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferTreasury(address)"(
      _newTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "treasuryAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userProxiesLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "userProxiesLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userProxyByAccount(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userProxyByAccount(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userProxyByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userProxyByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userProxyFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "userProxyFactory()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userProxyFactoryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userProxyFactoryAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userProxyInterfaceAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userProxyInterfaceAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ve()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    veAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "veAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    veTotalBalanceOf(
      positions: {
        tokenId: BigNumberish;
        balanceOf: BigNumberish;
        locked: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "veTotalBalanceOf(tuple[])"(
      positions: {
        tokenId: BigNumberish;
        balanceOf: BigNumberish;
        locked: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vlOxd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vlOxd()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vlOxdAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vlOxdAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vlOxdLocksData(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "vlOxdLocksData(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vlOxdRewardTokenPositionOf(
      accountAddress: string,
      rewardTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "vlOxdRewardTokenPositionOf(address,address)"(
      accountAddress: string,
      rewardTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vlOxdRewardTokenPositionsOf(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "vlOxdRewardTokenPositionsOf(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votePositionsOf(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "votePositionsOf(address)"(
      accountAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voterAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "voterAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voterProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "voterProxy()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voterProxyAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "voterProxyAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votingSnapshot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "votingSnapshot()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votingSnapshotAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "votingSnapshotAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
